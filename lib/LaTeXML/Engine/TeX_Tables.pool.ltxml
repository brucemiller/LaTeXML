# -*- mode: Perl -*-
# /=====================================================================\ #
# | TeX_Tables                                                          | #
# | Core TeX Implementation for LaTeXML                                 | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;
#use Unicode::Normalize;
#use LaTeXML::Util::Pathname;
#use List::Util qw(min max);

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Tables Family of primitive control sequences
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#----------------------------------------------------------------------
# This is where ALL alignments start & finish
# This creates the object representing the entire alignment!
DefConstructor('\lx@begin@alignment',
  "#alignment",
  reversion => sub { Revert($_[0]->getProperty('alignment')); },
  sizer     => '#alignment',
  #  beforeDigest => sub { $_[0]->bgroup; },
  afterDigest => sub {
    my ($stomach, $whatsit) = @_;
    $stomach->bgroup;
    if (my $alignment = LookupValue('Alignment')) {
      $whatsit->setProperty(alignment => $alignment);
      $alignment->setBody($whatsit);
      digestAlignmentBody($stomach, $whatsit); }
    $stomach->egroup;
    return; });

# Seems odd to need both end markers here...
DefMacroI('\lx@end@alignment', undef,
  '\lx@hidden@crcr\lx@close@alignment');
DefPrimitive('\lx@close@alignment', sub { });

# & gives an error except within the right context
# (which should redefine it!)
DefConstructorI('&', undef, sub { Error('unexpected', '&', $_[0], "Stray alignment \"&\""); });

Tag('ltx:td', afterClose => \&trimNodeWhitespace);

#----------------------------------------------------------------------
# Primitive column types;
# This is really LaTeX, but the mechanisms are used behind-the-scenes here, too.
# Presumably is save to include, even at pure TeX/plain level processing.
DefColumnType('|', sub {
    $LaTeXML::BUILD_TEMPLATE->addBetweenColumn(T_CS('\vrule'), T_CS('\relax')); return; });
DefColumnType('l', sub {
    $LaTeXML::BUILD_TEMPLATE->addColumn(after => Tokens(T_CS('\hfil'))); return; });
DefColumnType('c', sub {
    $LaTeXML::BUILD_TEMPLATE->addColumn(before => Tokens(T_CS('\hfil')),
      after => Tokens(T_CS('\hfil'))); return; });
DefColumnType('r', sub {
    $LaTeXML::BUILD_TEMPLATE->addColumn(before => Tokens(T_CS('\hfil'))); return; });

DefColumnType('p{Dimension}', sub {
    $LaTeXML::BUILD_TEMPLATE->addColumn(
      before => Tokens(T_CS('\vtop'), T_BEGIN, T_CS('\hbox'),
        T_LETTER('t'), T_LETTER('o'), $_[1]->revert, T_CS('\relax'),
        T_BEGIN),
      after   => Tokens(T_END, T_END),
      vattach => 'top',
      align   => 'justify',
    ); return; });

DefColumnType('*{Number}{}', sub {
    my ($gullet, $n, $pattern) = @_;
    map { $pattern->unlist } 1 .. $n->valueOf; });

DefColumnType('@{}', sub {
    my ($gullet, $filler) = @_;
    $LaTeXML::BUILD_TEMPLATE->disableIntercolumn;
    $LaTeXML::BUILD_TEMPLATE->addBetweenColumn($filler->unlist);
    $LaTeXML::BUILD_TEMPLATE->disableIntercolumn;
    return; });

#======================================================================
# Table Line endings
#----------------------------------------------------------------------
# \cr               c  is a visible command which ends one row in a table.
# \crcr             c  is an alternate to \cr.
# \everycr          pt holds tokens inserted after every \cr or nonredundent \crcr.
#\tabskip          pg is optional glue put between columns in a table.

DefConstructorI('\cr',   undef, "\n");
DefConstructorI('\crcr', undef, "\n");
# These are useful for reversion of higher-level macros that use alignment
# internally, but don't use explicit &,\cr in the user markup
DefConstructorI('\lx@hidden@cr',    undef, "\n", alias => '');
DefConstructorI('\lx@hidden@crcr',  undef, "\n", alias => '');
DefConstructorI('\lx@hidden@align', undef, "",   alias => '');

DefRegister('\everycr' => Tokens());
DefRegister('\tabskip' => Glue(0));

#======================================================================
# Aligment exceptions
#----------------------------------------------------------------------
# \noalign          c  inserts vertical mode material after a \cr in a table.
# \omit             c  is used in the body of a table to change an entry's template from the one in the preamble.
# \span             c  combines adjacent entries in a table into a single entry.

# Handled directly in alignments, but must be defined as non-macros
DefPrimitiveI('\noalign', undef, sub {
    $_[0]->bgroup;
    Error('unexpected', '\noalign', $_[0], "\\noalign cannot be used here");
    Let(T_ALIGN,          T_CS('\relax'));
    Let(T_CS('\noalign'), T_CS('\relax'));
    Let(T_CS('\omit'),    T_CS('\relax'));
    Let(T_CS('\span'),    T_CS('\relax'));
    return; });
DefPrimitiveI('\omit', undef, sub {
    Error('unexpected', '\omit', $_[0], "\\omit cannot be used here");
    $_[0]->bgroup;
    Let(T_ALIGN,          T_CS('\relax'));
    Let(T_CS('\noalign'), T_CS('\relax'));
    Let(T_CS('\omit'),    T_CS('\relax'));
    Let(T_CS('\span'),    T_CS('\relax'));
    return; });
DefPrimitiveI('\span', undef, sub {
    $_[0]->bgroup;
    Error('unexpected', '\span', $_[0], "\\span cannot be used here");
    Let(T_ALIGN,          T_CS('\relax'));
    Let(T_CS('\noalign'), T_CS('\relax'));
    Let(T_CS('\omit'),    T_CS('\relax'));
    Let(T_CS('\span'),    T_CS('\relax'));
    return; });

#======================================================================
# Horizontal alignments
#----------------------------------------------------------------------
# \halign           c  begins the horizontal alignment of material (i.e., makes a table containing rows).

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Now, for \halign itself
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# See \lxX@noalign for some \noalign cases
# See \lx@alignment@multicolumn for cases of \span,\omit
# See alignmentBindings for default bindings
# But also see others for different handling of (eg) open@row, etc.
# Probably we have to handle these cases by more generic default code
# and appropriate tweaks of alignment data????

# Algorithm:
#   open@alignment
#     Loop while read_column
#======================================================================
DefConstructor('\halign BoxSpecification',
  "#alignment",
  reversion => sub {
    my ($whatsit, $spec) = @_;
    my $template  = $whatsit->getProperty('template');
    my $alignment = $whatsit->getProperty('alignment');
    Tokens(T_CS('\halign'), Revert($spec), T_BEGIN, Revert($template), T_CS('\cr'),
      Revert($alignment), T_END); },
  bounded => 1,
  #  sizer       => '#1',
  sizer       => sub { $_[0]->getProperty('alignment')->getSize; },
  afterDigest => sub {
    my ($stomach, $whatsit) = @_;
    $stomach->bgroup;    # This will be closed by the \halign's closing }  (or will it?)
    my $template = parseHAlignTemplate($stomach->getGullet, $whatsit);
    my $spec     = $whatsit->getArg(1);
    alignmentBindings($template, undef,
      attributes => { width => orNull(GetKeyVal($spec, 'to')) });
    digestAlignmentBody($stomach, $whatsit);
    $stomach->egroup;
    $LaTeXML::ALIGN_STATE--;    # Balance the opening { OUTSIDE of the masking of ALIGN_STATE
    return; });

# Parse an \halign style alignment template from Gullet
sub parseHAlignTemplate {
  my ($gullet, $whatsit) = @_;
  my $t = $gullet->readNonSpace;
  Error('expected', '\bgroup', $gullet, "Missing \\halign box") unless $t->defined_as(T_BEGIN);
  my $before      = 1;                            # true if we're before a # in current column
  my @pre         = ();
  my @post        = ();
  my @cols        = ();
  my $repeated    = 0;
  my @nonreps     = ();
  my $tabskip     = LookupRegister('\tabskip');
  my $nexttabskip = $tabskip;
  my @tokens      = ();
  ## Only expand certain things; See TeX book p.238
  local $LaTeXML::ALIGN_STATE = 1000000;
  while ($t = $gullet->readToken) {
    my $cc = $t->getCatcode;
    if ($t->equals(T_CS('\tabskip'))) {    # Read the tabskip assignment
      $gullet->readKeyword('=');
      $nexttabskip = $gullet->readGlue; }
    elsif ($t->equals(T_CS('\span'))) {    # ex-span-ded next token.
      $gullet->unread($gullet->readXToken(0)); }
    elsif ($cc == CC_PARAM) {              # Found the template's column slot
      $before = 0;
      push(@tokens, $t); }
    elsif (($cc == CC_ALIGN)
      || $t->equals(T_CS('\cr')) || $t->equals(T_CS('\crcr'))) {    # End the column
      if ($before) {                                                # Leading & ?
        $repeated = 1;
        @nonreps  = @cols; @cols = (); }    # A & while we're before a column means Repeated columns
      else {                                # Finished column spec; add it
        ## How should we be handling tabskip? An attribute on the cell or spacing?
        push(@cols, {
            tabskip => $tabskip,
            before  => Tokens(beforeCellUnlist(Tokens(@pre))),
            after   => Tokens(afterCellUnlist(Tokens(@post))) });
        $tabskip = $nexttabskip;
        @pre     = @post = (); $before = 1; }
      last unless $cc == CC_ALIGN;
      push(@tokens, $t); }
    elsif ($before) {    # Other random tokens go into the column's pre-template
      push(@pre,    $t) if @pre || ($cc != CC_SPACE);
      push(@tokens, $t); }
    else {               # Or the post-template
      push(@post,   $t) if @post || ($cc != CC_SPACE);
      push(@tokens, $t); } }
  # Now create & return the template object
  my $template = LaTeXML::Core::Alignment::Template->new(
    ($repeated
      ? (columns => [@nonreps], repeated => [@cols])
      : (columns => [@cols])),
    tokens => [@tokens]);
  $whatsit->setProperty(template => $template);
  return $template; }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# And the general alignment processing.
# If the Template is appropriately constructed, either by \halign or various \begin{tabular}
# the body of the alignment is processed the same way.

sub alignmentBindings {
  my ($template, $mode, %properties) = @_;
  $mode = LookupValue('MODE') unless $mode;
  my $ismath    = $mode =~ /math$/;
  my $container = ($ismath ? 'ltx:XMArray' : 'ltx:tabular');
  my $rowtype   = ($ismath ? 'ltx:XMRow'   : 'ltx:tr');
  my $coltype   = ($ismath ? 'ltx:XMCell'  : 'ltx:td');
  my $alignment = LaTeXML::Core::Alignment->new(
    template       => $template,
    openContainer  => sub { $_[0]->openElement($container, @_[1 .. $#_]); },
    closeContainer => sub { $_[0]->closeElement($container); },
    openRow        => sub { $_[0]->openElement($rowtype, @_[1 .. $#_]); },
    closeRow       => sub { $_[0]->closeElement($rowtype); },
    openColumn     => sub { $_[0]->openElement($coltype, @_[1 .. $#_]); },
    closeColumn    => sub { $_[0]->closeElement($coltype); },
    isMath         => $ismath,
    properties     => {%properties});
  AssignValue(Alignment => $alignment);
  Debug("Halign $alignment: New " . $template->show) if $LaTeXML::DEBUG{halign};
  Let(T_MATH, ($ismath ? '\lx@dollar@in@mathmode' : '\lx@dollar@in@textmode'));
  return; }

DefMacroI('\lx@alignment@row@before',    undef, undef);
DefMacroI('\lx@alignment@row@after',     undef, undef);
DefMacroI('\lx@alignment@column@before', undef, undef);
DefMacroI('\lx@alignment@column@after',  undef, undef);

sub pRevert {
  my ($arg) = @_;
  local $LaTeXML::DUAL_BRANCH = 'presentation';
  return Revert($arg); }

sub cRevert {
  my ($arg) = @_;
  local $LaTeXML::DUAL_BRANCH = 'content';
  return Revert($arg); }

use constant T_close_alignment => T_CS('\lx@close@alignment');

sub digestAlignmentBody {
  my ($stomach, $whatsit) = @_;
  my $gullet = $stomach->getGullet;
  local $LaTeXML::ALIGN_STATE = 0;
  # Now read & digest the body.
  # Note that the body MUST end with a \cr, and that we've made Special Arrangments
  # with \alignment@cr to recognize the end of the \halign
  my $alignment = LookupValue('Alignment');
  local $LaTeXML::READING_ALIGNMENT = $alignment;
  if (!$alignment) {
    Error('missing', 'alignment', $stomach, "There is no open alignment structure here");
    return; }
  $whatsit->setProperty(alignment => $alignment);
  $alignment->setBody($whatsit);
  Debug("Halign $alignment: BODY Processing...") if $LaTeXML::DEBUG{halign};
  my $lastwascr  = undef;
  my @reversion  = ();
  my @creversion = ();
  while (1) {
    my ($cell, $next, $type, $hidden) = digestAlignmentColumn($stomach, $alignment, $lastwascr);
    Debug("Halign $alignment: BODY got CELL"
        . "[" . $alignment->currentRowNumber . "," . $alignment->currentColumnNumber . "]"
        . ToString($cell) . " ended at " . Stringify($next)) if $LaTeXML::DEBUG{halign};
    if (!$cell) {
      Debug("Halign $alignment: BODY DONE!") if $LaTeXML::DEBUG{halign};
      last; }
    if ($cell) {
      push(@reversion,  trimColumnTemplate($alignment, pRevert($cell)));
      push(@creversion, trimColumnTemplate($alignment, cRevert($cell))); }
    extractAlignmentColumn($alignment, $cell);
    $lastwascr = undef;
    if (!$type && (!$next
        || $next->defined_as(T_END)                    # End of alignment
        || $next->defined_as(T_close_alignment))) {    # End of alignment
      $alignment->endRow();
      last; }
    elsif ($type eq 'align') {
      $alignment->endColumn();
      if (!$hidden) {
        push(@reversion,  $next);                      # and record the &
        push(@creversion, $next); } }                  # and record the &
    elsif ($type eq 'insert') {
      $alignment->endColumn(); }
    elsif (($type eq 'cr') || ($type eq 'crcr')) {
      $alignment->endRow();
      if (!$hidden) {
        push(@reversion,  $next);
        push(@creversion, $next); }
      elsif ($type eq 'cr') {
        my $arg = $stomach->digest($gullet->readArg());
        push(@reversion,  pRevert($arg));
        push(@creversion, cRevert($arg)); }
      elsif ($type eq 'crcr') { }
      $lastwascr = 1; }    # Note, in case next is \crcr
    elsif ($next) {
      Error('unexpected', $next, $stomach, "Column ended with " . Stringify($next)); } }
  $alignment->endRow();
  $alignment->setReversion(Tokens(@reversion));
  $alignment->setContentReversion(Tokens(@creversion));
  Debug("Halign $alignment: BODY DONE!\n"
      . "=> " . join(',', map { Stringify($_); } @reversion)) if $LaTeXML::DEBUG{halign};
  return; }

use constant T_crcr           => T_CS('\crcr');
use constant T_hidden_crcr    => T_CS('\lx@hidden@crcr');
use constant T_omit           => T_CS('\omit');
use constant T_noalign        => T_CS('\noalign');
use constant T_hidden_noalign => T_CS('\lx@hidden@noalign');

# Read & digest an alignment column's data,
# accommodating the current template and any special cs's
# Returns the column's digested boxes, the ending token, and it's alignment type.
sub digestAlignmentColumn {
  my ($stomach, $alignment, $lastwascr) = @_;
  my $gullet = $stomach->getGullet;
  my $ismath = $STATE->lookupValue('IN_MATH');
  local @LaTeXML::LIST = ();
  # Scan for leading \omit, skipping over (& saving) \hline.
  Debug("Halign $alignment: COLUMN starting scan "
      . "(" . ($ismath ? " math" : " text") . ")") if $LaTeXML::DEBUG{halign};
  my $token;
  my $spanning = 0;
  while (1) {    # Outer loop; collects 1 column (possibly multiple spans) return from within!
    ## Scan till we get something NOT \omit, \noalign
    while ($token = $gullet->readXToken(0)) {
      if ($token->equals(T_SPACE)    # Skip leading space.
        || $token->equals(T_CS('\par'))    # Skip or blank line(?)
        || ($lastwascr &&                  # Or \crcr following a \cr
          ($token->defined_as(T_crcr) || $token->defined_as(T_hidden_crcr)))) {
      }
      elsif ($token->defined_as(T_omit)) {    # \omit removes template for this column.
        Debug("Halign $alignment: OMIT at " . Stringify($token)) if $LaTeXML::DEBUG{halign};
        $alignment->startRow() unless $$alignment{in_row};
        $alignment->omitNextColumn; }
      elsif ($token->defined_as(T_noalign)) {    # \puts something in vertical list
        Debug("Halign $alignment: noalign at " . Stringify($token)) if $LaTeXML::DEBUG{halign};
        $alignment->endRow()                                        if $$alignment{in_row};
        $alignment->startColumn(1);
        $alignment->lastColumn;
        my $r = $stomach->digest($gullet->readArg);
        $alignment->endRow();
        return ($r, T_CS('\cr'), 'cr'), undef; }    # Pretend this is a whole row???
      elsif ($token->defined_as(T_hidden_noalign)) {    # \puts something in vertical list
        Debug("Halign $alignment: COLUMN invisible noalign") if $LaTeXML::DEBUG{halign};
        push(@LaTeXML::LIST, $stomach->invokeToken($token)); }
      else {
        last; } }
    Debug("Halign $alignment: COLUMN end scan at " . Stringify($token)) if $LaTeXML::DEBUG{halign};
    if (!$token || $token->defined_as(T_END) || $token->defined_as(T_close_alignment)) {
      return (undef, $token, undef, undef); }
    # Next column, unless spanning (then combine columns)
    if ($spanning) {
      $spanning = 0;
      $alignment->nextColumn; }
    else {
      $alignment->startColumn(); }
    # Push before template,  Marker and put the token back
    Debug("Halign $alignment: COLUMN preload at "
        . Stringify(Tokens($alignment->getColumnBefore, T_MARKER('before-column'), $token)))
      if $LaTeXML::DEBUG{halign};
    $gullet->unread($alignment->getColumnBefore, T_MARKER('before-column'), $token);
    while ($token = $gullet->readXToken(0)) {
      my ($atoken, $type, $hidden) = $gullet->isColumnEnd($token);
      if ($atoken) {
        if ($type eq 'span') {    # next column, but continue accumulating
          Debug("Halign $alignment: COLUMN span") if $LaTeXML::DEBUG{halign};
          $spanning = 1;
          last; }
        else {
          Debug("Halign $alignment: COLUMN ended with " . Stringify($token) . "\n"
              . "  => " . ToString(List(@LaTeXML::LIST))) if $LaTeXML::DEBUG{halign};
          return (List(@LaTeXML::LIST, mode => ($ismath ? 'math' : 'text')),
            $token, $type, $hidden); } }
      elsif ($token->defined_as(T_hidden_noalign)) {    # \puts something in vertical list
        Debug("Halign $alignment: COLUMN invisible noalign") if $LaTeXML::DEBUG{halign};
        push(@LaTeXML::LIST, $stomach->invokeToken($token)); }
      else {    # Else, we're getting some actual content for the column
        Debug("Halign $alignment: COLUMN invoking " . Stringify($token)) if $LaTeXML::DEBUG{halign};
        push(@LaTeXML::LIST, $stomach->invokeToken($token));
        Debug("Halign $alignment: COLUMN " . Stringify($token) . " ==> " . Stringify(List(@LaTeXML::LIST)))
          if $LaTeXML::DEBUG{halign};
  } } }
  return; }

# This attempts to trim off the column template parts from contents of the full column,
# leaving only the author supplied part for a sensible reversion.
# It's not nearly clever enough, given that macros can be in the template,
# but works surprisingly well so far.
# A better alternative might be based on sneaking some Marker tokens/boxes through
# but they would likely interfere with the macros tehmselves.
sub trimColumnTemplate {
  my ($alignment, @tokens) = @_;
  return Tokens(@tokens) if $alignment->currentRow->{pseudorow};
  my @pre  = $alignment->getColumnBefore->unlist;
  my @post = $alignment->getColumnAfter->unlist;
  Debug("Halign $alignment: COLUMN Compare:\n"
      . "  Column: " . ToString(Tokens(@tokens)) . "\n"
      . "  Before: " . ToString(Tokens(@pre)) . "\n"
      . "  After : " . ToString(Tokens(@post)) . "\n") if $LaTeXML::DEBUG{halign};
  while (scalar(@pre) && scalar(@tokens)) {
    my $t = shift(@pre);
    if ($t->equals($tokens[0])) {
      shift(@tokens); } }
  while (scalar(@post) && scalar(@tokens)) {
    my $t = pop(@post);
    if ($t->equals($tokens[-1])) {
      pop(@tokens); } }
  Debug("  Trimmed: " . ToString(Tokens(@tokens))) if $LaTeXML::DEBUG{halign};
  return Tokens(@tokens); }

# Given the boxes for an alignment cell,
# extract & remove the various fills and rules from the ends to annotate the cell structure
sub extractAlignmentColumn {
  my ($alignment, $boxes) = @_;
  return () unless $alignment;    # ??
      # Note: $n0,$n1 is a VERY round-about way of tracking the column spanning!
  my $ismath  = $STATE->lookupValue('IN_MATH');
  my $n0      = (LookupValue('alignmentStartColumn') || 0) + 1;
  my $n1      = $alignment->currentColumnNumber;
  my $colspec = $alignment->getColumn($n0);
  my $align   = $$colspec{align} || 'left';
  my $border  = '';
  # Peel off any boxes from both sides until we get the "meat" of the column.
  # from this we can establish borders, alignment and emptiness.
  # But we, of course, immediately put them back...
  my @boxes     = $boxes->unlist;
  my @saveleft  = ();
  my @saveright = ();
  my (@lspaces, @rspaces);
  if (my $skip = $$colspec{tabskip}) {
    push(@lspaces, Digest(Tokens(T_CS('\hskip'), $skip->revert, T_CS('\relax')))); }
  while (@boxes) {
    if (ref $boxes[0] eq 'LaTeXML::Core::List') {
      unshift(@boxes, shift(@boxes)->unlist); }
    elsif ($boxes[0]->getProperty('isFill')) {
      $align = 'right';
      shift(@boxes);
      last; }
    elsif ($boxes[0]->getProperty('isVerticalRule')) {
      $border .= 'l';
      if (my $prev = $alignment->getColumn($n0 - 1)) {    # space before | ? move to previous column
        $$prev{rspaces} = List(($$prev{rspaces} || ()), @lspaces) if @lspaces; }
      @lspaces = ();                                      # then discard
      shift(@boxes); }
    elsif ($boxes[0]->getProperty('isSpace')) {
      push(@lspaces, shift(@boxes)); }
    elsif ($boxes[0]->getProperty('isHorizontalRule')
      || $boxes[0]->getProperty('alignmentSkippable')
      || (ref $boxes[0] eq 'LaTeXML::Core::Comment')) {
      push(@saveleft, shift(@boxes)); }
    else {
      last; } }
  while (@boxes) {
    if (ref $boxes[-1] eq 'LaTeXML::Core::List') {
      push(@boxes, pop(@boxes)->unlist); }
    elsif ($boxes[-1]->getProperty('isFill')) {
      if ($align eq 'right') { $align = 'center'; }
      pop(@boxes);
      last; }
    elsif ($boxes[-1]->getProperty('isVerticalRule')) {
      $border .= 'r';
      @rspaces = ();    # discard spacing after rule!!! (should save for next column?)
      pop(@boxes); }
    elsif ($boxes[-1]->getProperty('isSpace')) {
      unshift(@rspaces, pop(@boxes)); }
    elsif ($boxes[-1]->getProperty('isHorizontalRule')
      || $boxes[-1]->getProperty('alignmentSkippable')
      || (ref $boxes[-1] eq 'LaTeXML::Core::Comment')) {
      unshift(@saveright, pop(@boxes)); }
    else {
      last; } }
  delete $$colspec{width} unless $align eq 'justify';
  # Replacing boxes with the fil padding & vertical rules stripped off
  @boxes = (@saveleft, @boxes, @saveright);
  $boxes = List(@boxes, mode => ($boxes->isMath ? 'math' : 'text'));
  # record relevant info in the Alignment.
  $$colspec{align}   = $align;
  $$colspec{border}  = $border = ($$colspec{border} || '') . $border;
  $$colspec{boxes}   = $boxes;
  $$colspec{lspaces} = List(@lspaces) if @lspaces;
  $$colspec{rspaces} = List(@rspaces) if @rspaces;
  $$colspec{colspan} = $n1 - $n0 + 1;

  if ($$alignment{in_tabular_head} || $$alignment{in_tabular_foot}) {
    $$colspec{thead}{column} = 1; }
  for (my $i = $n0 + 1 ; $i <= $n1 ; $i++) {
    my $c = $alignment->getColumn($i);
    $$c{skipped} = 1 if $c; }
  Debug("Halign $alignment: INSTALL column " . join(',', map { $_ . "=" . ToString($$colspec{$_}); } sort keys %$colspec)) if $LaTeXML::DEBUG{halign};
  return $boxes; }

#======================================================================
# Vertical alignments
#----------------------------------------------------------------------
# \valign           c  begins the vertical alignment of material (i.e., makes a table containing columns).

# Implement ???
# DefMacro('\vrule','\relax');
DefMacro('\valign', '');

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Extra bits that are partly infrastructure, partly TeX plain, partly LaTeX !?!?!?!?!

#########
# Support for \\[dim] .... TO BE WORKED OUT!
# NOTE that this does NOT skip spaces before * or []!!!!!
#  As if: \lx@alignment@newline OptionalMatch:* [Dimension]
# Read arguments for \\, namely * and/or [Dimension]
# BUT optionally do it while skipping spaces (latex style) or not (ams style)
sub readNewlineArgs {
  my ($gullet, $skipspaces) = @_;
  my $alignment = $STATE->lookupValue('Alignment');
  local $LaTeXML::ALIGN_STATE = 1000000;
  $gullet->skipSpaces if $skipspaces;
  my $next = $gullet->readToken;
  my ($star, $optional);
  if ($next && $next->equals(T_OTHER('*'))) {
    $star = 1;
    $gullet->skipSpaces if $skipspaces;
    $next = $gullet->readToken; }
  if ($next && $next->equals(T_OTHER('['))) {
    $optional = $gullet->readUntil(T_OTHER(']'));
    $next     = undef; }
  $gullet->unread($next) if $next;
  return ($star, $optional); }

# VERY tricky (and mostly Wrong).
# The issue is for \\ to look ahead for * and [],
# Eventually we'll expand into \cr (which should be preceded by the RHS of the template)
# BUT it should NOT trigger the template if it bumps into a &
# which happens when the 1st column of an alignment is empty.
# In proper LaTeX this is inhibited by a curious construct
#   {\ifnum0='}
# and possibly by proper tracking of a Master Counter !?!?!?
# But we're not there (yet)

# This is the internal macro for \\[dim] used by LaTeX for various arrays, tabular, etc
DefMacroI('\lx@alignment@newline', undef, sub {
    my ($gullet) = @_;
    my ($star, $optional) = readNewlineArgs($gullet, 1);
    return (T_CS('\lx@hidden@cr'), T_BEGIN,
      ($optional
        ? (T_CS('\lx@alignment@newline@markertall'), T_BEGIN, $optional, T_END)
        : T_CS('\lx@alignment@newline@marker')),
      T_END); });
# However, the above will skip spaces --AND a newline! -- looking for [],
# which is kinda weird in math, since there may be a reasonable math [ in the 1st column!
# AMS kindly avoids that, by using a special version of \\
DefMacroI('\lx@alignment@newline@noskip', undef, sub {
    my ($gullet) = @_;
    my ($star, $optional) = readNewlineArgs($gullet);
    return (T_CS('\lx@hidden@cr'), T_BEGIN,
      ($optional
        ? (T_CS('\lx@alignment@newline@markertall'), T_BEGIN, $optional, T_END)
        : T_CS('\lx@alignment@newline@marker')),
      T_END); });

# These are the markers that produce \\ in the reversion,
# and (eventually will) add vertical space to the row!
DefConstructor('\lx@alignment@newline@marker', '',
  reversion => Tokens(T_CS("\\\\"), T_CR));
# AND add the spacing to the alignment!!!
DefConstructor('\lx@alignment@newline@markertall {Dimension}', '',
  afterDigest => sub {
    if (my $alignment = LookupValue('Alignment')) {
      $alignment->currentRow->{padding} = $_[1]->getArg(1); }
    return; },
  reversion => sub {
    Tokens(T_CS("\\\\"), T_OTHER('['), Revert($_[1]), T_OTHER(']'), T_CR); });

# \lx@intercol is our replacement for LaTeX's \@acol which places intercolumn space in tabular
# (but NOT used by TeX's \halign!)
DefMacro('\lx@intercol', '');
# Candidates for binding \lx@intercol for LaTeX tabular or math arrays
# These provide "padding" of half tabcolsep, since added before & after columns
# [these could be \hskip\tabcolsep, but the expansion confounds trimColumnSpec]
DefConstructor('\lx@text@intercol', sub {
    my ($document, %props) = @_;
    $document->absorb(DimensionToSpaces($props{width})); },
  reversion  => '\lx@intercol',
  properties => sub {
    my $defn;
    my $w = (($defn = $STATE->lookupDefinition(T_CS('\tabcolsep'))) && $defn->isRegister
      ? $defn->valueOf : Dimension(0));
    (width => $w, isSpace => 1); });
DefConstructor('\lx@math@intercol', "",    # mspace ???
  reversion  => '\lx@intercol',
  properties => sub {
    my $defn;
    my $w = (($defn = $STATE->lookupDefinition(T_CS('\arraycolsep'))) && $defn->isRegister
      ? $defn->valueOf : Dimension(0));
    (width => $w, isSpace => 1); });

#======================================================================
# Various decorations within alignments, rules, headers, etc

# Like \noalign, takes an arg; handled within alignment processing.
# But doesn't create a pseudo-row (??? Or does it?; is it still needed?)
DefConstructor('\lx@hidden@noalign{}', '#1',
  reversion  => '',
  properties => sub {
    # Sometimes, we're smuggling stuff that needs to be carried into the XML.
    my $preserve = grep { $_->getProperty('alignmentPreserve'); } $_[1]->unlist;
    (alignmentSkippable => 1, alignmentPreserve => $preserve); });

DefMacro('\hline', '\noalign{\@@alignment@hline}');
DefConstructorI('\@@alignment@hline', undef, '',
  afterDigest => sub {
    if (my $alignment = LookupValue('Alignment')) {
      $alignment->addLine('t'); }
    return; },
  properties => { isHorizontalRule => 1 },
  sizer      => 0, alias => '\hline');

DefMacroI('\lx@alignment@begin@heading', undef, sub {
    my $alignment = LookupValue('Alignment');
    $$alignment{in_tabular_head} = 1;
    return; });
DefMacroI('\lx@alignment@end@heading', undef, sub {
    my $alignment = LookupValue('Alignment');
    $$alignment{in_tabular_head} = 0;
    return; });

#======================================================================
# Multicolumn support
DefRegisterI('\lx@alignment@ncolumns', undef, Dimension(0),
  getter => sub {
    if (my $alignment = LookupValue('Alignment')) {
      Number(scalar($alignment->getTemplate->columns)); }
    else { Number(0); } });
DefRegisterI('\lx@alignment@column', undef, Dimension(0),
  getter => sub {
    if (my $alignment = LookupValue('Alignment')) {
      Number($alignment->currentColumnNumber); }
    else { Number(0); } });

DefMacro('\lx@alignment@multicolumn {Number}  AlignmentTemplate {}', sub {
    my ($gullet, $span, $template, $tokens) = @_;
    my $column = $template->column(1);
    $span = $span->valueOf;
    # First part, like \multispan
    (T_CS('\omit'), (map { (T_CS('\span'), T_CS('\omit')) } 1 .. $span - 1),
      # Next part, just put the template in-line, since it's only used once.
      ($column ? beforeCellUnlist($$column{before}) : ()),
      $tokens->unlist,
      ($column ? afterCellUnlist($$column{after}) : ())); });

DefConditionalI('\if@in@lx@alignment', undef, sub { LookupValue('Alignment'); });

DefPrimitive('\lx@alignment@bindings AlignmentTemplate []', sub {
    my ($stomach, $template, $mode) = @_;
    alignmentBindings($template, $mode); });

# Utility, not really TeX, but used by LaTeX, AmSTeX...
# Convert a vertical positioning, optional argument.
#  t = "top", b = "bottom"; default is "middle".
# Note that the default for vattach attribute is "baseline".
sub translateAttachment {
  my ($pos) = @_;
  $pos = ($pos ? ToString($pos) : '');
  return ($pos eq 't' ? 'top' : ($pos eq 'b' ? 'bottom' : 'middle')); }    # undef meaning 'baseline'

# This trims trailing whitespace from the current digested list,
# for use within latex tabular-style columns.
# But note that \halign does NOT remove this trailing space!
DefPrimitiveI('\lx@column@trimright', undef, sub {
    my $box;
    my @save = ();
    my $s;
    while ($box = $LaTeXML::LIST[-1]) {
      if ($box->getProperty('alignmentSkippable')
        || $box->getProperty('isFill')
        || IsEmpty($box)) {
        push(@save, pop(@LaTeXML::LIST)); }
      elsif (ref $box eq 'LaTeXML::Core::List') {    # Unwrap and continue
        pop(@LaTeXML::LIST);
        push(@LaTeXML::LIST, $box->unlist); }
      elsif ((ref $box eq 'LaTeXML::Core::Box')
        && defined($s = $box->getString) && ($s =~ /^\s*$/)) {
        pop(@LaTeXML::LIST); }                       # remove any box containing only spaces
      else {
        last; } }
    push(@LaTeXML::LIST, @save);
    return; });

use constant T_hfil => T_CS('\hfil');
# Yet more special case hacking. Sometimes the order of tokens works for
# TeX, but confuses us... In particular the order of $ and \hfil!
sub beforeCellUnlist {
  my ($tokens) = @_;
  return () unless $tokens;
  my @toks = $tokens->unlist;
  my @new  = ();
  while (my $t = shift(@toks)) {
    if ($t->defined_as(T_MATH) && @toks && $toks[0]->defined_as(T_hfil)) {
      push(@new, shift(@toks)); unshift(@toks, $t); }
    else {
      push(@new, $t); } }
  return @new; }

sub afterCellUnlist {
  my ($tokens) = @_;
  return () unless $tokens;
  my @toks = $tokens->unlist;
  my @new  = ();
  while (my $t = pop(@toks)) {
    if ($t->defined_as(T_MATH) && @toks && $toks[-1]->defined_as(T_hfil)) {
      unshift(@new, pop(@toks)); push(@toks, $t); }
    else {
      unshift(@new, $t); } }
  return @new; }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1;
