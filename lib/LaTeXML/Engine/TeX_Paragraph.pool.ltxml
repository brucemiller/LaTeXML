# -*- mode: Perl -*-
# /=====================================================================\ #
# | TeX_Paragraph                                                       | #
# | Core TeX Implementation for LaTeXML                                 | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Paragraph Family of primitive control sequences
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#======================================================================
# Spacing tweaks
#----------------------------------------------------------------------
# \ignorespaces           c  makes TeX read and expand tokens but do nothing until a nonspace token is reached.
# \noboundary             c  if present, breaks ligatures and kerns.
# \vadjust                c  inserts a vertical list between two lines in a paragraph.

DefPrimitive('\ignorespaces SkipSpaces', undef);
DefPrimitiveI('\noboundary', undef, undef);
# Note: \vadjust ignores in vertical mode...
DefPrimitive('\vadjust {}', sub { PushValue('vAdjust', $_[1]->unlist); });

#======================================================================
# Basic Paragraph
#----------------------------------------------------------------------
# \everypar               pt holds tokens added at the beginning of every paragraph.
# \indent                 c  begins a new paragraph indented by \parindent.
# \noindent               c  begins a new paragraph that is not indented.
# \par                    c  is an explicit command to end a paragraph.

DefRegister('\everypar', Tokens());
# These determine whether the _next_ paragraph gets indented!
# thus it needs \par to check whether such indentation has been set.
DefConstructorI('\indent', undef, sub {
    my ($document) = @_;
    my $node = $document->getElement;
    if    (!$node) { }
    elsif ($document->getNodeQName($node) eq 'ltx:para') {
      $node->setAttribute(class => "ltx_indent"); }
    elsif ($document->canContainSomehow($node, "ltx:para")) {
      # Used in a position where a paragraph can be started, start
      # However, perversely ignore indent on 1st para after sectioning titles
      my $prev     = $node->lastChild;
      my $noindent = $prev && ($document->getNodeQName($prev) =~ /^ltx:(?:toc)?title$/);
      $document->openElement("ltx:para", ($noindent ? () : (class => "ltx_indent"))); }
    # Otherwise ignore.
    return; });
DefConstructorI('\noindent', undef, sub {
    my ($document) = @_;
    my $node = $document->getElement;
    if    (!$node) { }
    elsif ($document->getNodeQName($node) eq 'ltx:para') {
      $node->setAttribute(class => "ltx_noindent"); }
    elsif ($document->canContainSomehow($node, "ltx:para")) {
      # Used in a position where a paragraph can be started, start
      $document->openElement("ltx:para", class => "ltx_noindent"); }
    # Otherwise ignore.
    return; });

# <ltx:para> represents a Logical Paragraph, whereas <ltx:p> is a `physical paragraph'.
# A para can contain both p and displayed equations and such.

# Remember; \par _closes_, not opens, paragraphs!
# Here, we want to close both an open p and para (if either are open).
# NOTE Also that the whole inPreamble bit is, I think, overused.
# For example, \par should be a NOOP in vertical mode, and that would generally make it
# ignored in the preamble.
DefConstructorI('\lx@normal@par', undef, sub {
    my ($document, %props) = @_;
    if ($props{inPreamble}) { }
    else {
      $document->maybeCloseElement('ltx:p');
      my $node  = $document->getElement;
      my $qname = ($node && $document->getNodeQName($node)) || '';
      if ($qname eq 'ltx:para' && !$node->getAttribute("class")) { # Only set on the para about to close, if unknown!
        if (my $c = $props{class}) {
          $document->setAttribute($node, class => $c); } }
      $document->maybeCloseElement('ltx:para'); } },
  afterDigest => sub {
    my ($stomach, $whatsit) = @_;
    if (LookupValue('inPreamble')) {
      $whatsit->setProperty(inPreamble => 1); }
    else {
      # Check if flags were set by prior \par:
      if (my $c = LookupValue("next_para_class")) {
        $whatsit->setProperty(class => $c);
        AssignValue(next_para_class => undef); }
      # Fish out flags for next ltx:para, to be used when the next \par closes:
      if (!LookupRegister('\parindent')->valueOf) {
        # respect \parindent if no overrides are given
        AssignValue(next_para_class => "ltx_noindent"); }
      # Vertical adjustments
      if (my $vadj = LookupValue('vAdjust')) {
        AssignValue(vAdjust => [], 'global');
        Digest(Tokens(@$vadj)); }
      else {
        return; } } },
  properties => { alignmentSkippable => 1 },
  alias      => '\par');

Let('\par', '\lx@normal@par');

Tag('ltx:para', autoClose => 1, autoOpen => 1, afterClose => \&pruneEmpty);

sub pruneEmpty {
  my ($document, $node) = @_;
  # In some cases we could have e.g. a \noindent followed by a {table},
  # in which case we end up with an empty ltx:para which we can prune.
  if (!scalar(element_nodes($node))) {
    my $prev = element_prev($node);
    if (!$prev || ($document->getNodeQName($prev) ne 'ltx:para')) {    # If $node WAS the 1st child
      $document->addClass($node->parentNode, 'ltx_pruned_first'); }
    $node->unlinkNode; }
  return; }

sub trimNodeWhitespace {
  my ($document, $node) = @_;
  trimNodeLeftWhitespace($document, $node);
  trimNodeRightWhitespace($document, $node);
  return; }

sub trimNodeLeftWhitespace {
  my ($document, $node) = @_;
  if (my (@children) = $node->childNodes) {
    my $child = $children[0];
    my $type  = $child->nodeType;
    if ($type == XML_TEXT_NODE) {
      my $string = $child->data;
      #      if($string =~ s/^\s+//){
      #      with some trepidation, I don't think we want to trim nbsp!
      if ($string =~ s/^ +//) {
        $child->setData($string); } }
    elsif ($type == XML_ELEMENT_NODE) {
      trimNodeLeftWhitespace($document, $child); } }
  return; }

sub trimNodeRightWhitespace {
  my ($document, $node) = @_;
  if (my (@children) = $node->childNodes) {
    my $child = $children[-1];
    my $type  = $child->nodeType;
    if ($type == XML_TEXT_NODE) {
      my $string = $child->data;
      if ($string =~ s/\s+$//) {
        $child->setData($string); } }
    elsif ($type == XML_ELEMENT_NODE) {
      trimNodeRightWhitespace($document, $child); } }
  return; }

Tag('ltx:p', autoClose => 1, autoOpen => 1, afterClose => \&trimNodeWhitespace);

#======================================================================
# Paragraph Shape
#----------------------------------------------------------------------
# \parshape               iq specifies an arbitrary paragraph shape.
# \parshape !?!??
DefPrimitive('\parshape SkipSpaces SkipMatch:= Number', sub {
    my ($stomach, $n) = @_;
    $n = $n->valueOf;
    my $gullet = $stomach->getGullet;
    for (my $i = 0 ; $i < $n ; $i++) {
      $gullet->readDimension; $gullet->readDimension; }
    # we _could_ conceivably store this somewhere for some attempt at stylistic purpose...
    return; });

#======================================================================
# Paragraph Shape
#----------------------------------------------------------------------
# \prevgraf               iq is the number of lines in the paragraph most recently completed or partially completed.
# \spacefactor            iq controls interword spacing.
# \emergencystretch       pd is glue used in the third pass made for bad paragraphs.
# \hangindent             pd is the amount of hanging indentation.
# \hsize                  pd is the width of normal lines in a paragraph.
# \lineskiplimit          pd is the cutoff used to select between \baselineskip and \lineskip.
# \parindent              pd is the width of indentation at the beginning of a paragraph.
# \baselineskip           pg is glue added between lines to keep their baselines consistently spaced.
# \leftskip               pg is glue added at the left of every line in a paragraph.
# \rightskip              pg is glue added at the right of every line in a paragraph.
# \lineskip               pg is alternate interline glue used if the \baselineskip glue is not feasible   .
# \parskip                pg is extra glue put between paragraphs.
# \parfillskip            pg is glue which finishs the last line of a paragraph.
# \spaceskip              pg is alternate interword glue.
# \xspaceskip             pg is alternate intersentence glue.
# \adjdemerits            pi holds the demerits for visually incompatible adjacent lines.
# \doublehyphendemerits   pi holds the demerits added if two consecutive lines end with discretionary breaks.
# \finalhyphendemerits    pi holds the demerits added if the penultimate line in a paragraph ends with a discretionary break.
# \hangafter              pi is the number of lines before hanging indentation changes.
# \looseness              pi tells TeX to try and increase or decrease the number of lines in a paragraph.

# \tolerance              pi is the acceptable \badness of lines after hyphenation.
# \pretolerance           pi is the acceptable \badness of lines in a paragraph before hyphenation is attempted.

DefRegister('\spacefactor'          => Number(0));
DefRegister('\prevgraf'             => Number(0));
DefRegister('\emergencystretch'     => Dimension(0));
DefRegister('\hangindent'           => Dimension(0));
DefRegister('\hsize'                => Dimension('6.5in'));
DefRegister('\lineskip'             => Glue('1pt'));
DefRegister('\lineskiplimit'        => Dimension(0));
DefRegister('\parindent'            => Dimension('20pt'));
DefRegister('\baselineskip'         => Glue('12pt'));
DefRegister('\leftskip'             => Glue(0));
DefRegister('\rightskip'            => Glue(0));
DefRegister('\parskip'              => Glue('0pt plus 1pt'));
DefRegister('\parfillskip'          => Glue('0pt plus 1fil'));
DefRegister('\spaceskip'            => Glue(0));
DefRegister('\xspaceskip'           => Glue(0));
DefRegister('\adjdemerits'          => Number(10000));
DefRegister('\doublehyphendemerits' => Number(10000));
DefRegister('\finalhyphendemerits'  => Number(5000));
DefRegister('\hangafter'            => Number(0));
DefRegister('\looseness'            => Number(0));
DefRegister('\tolerance'            => Number(200));
DefRegister('\pretolerance'         => Number(100));

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1;
