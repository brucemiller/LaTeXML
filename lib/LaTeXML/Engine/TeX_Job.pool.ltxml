# -*- mode: Perl -*-
# /=====================================================================\ #
# |  TeX_Job                                                            | #
# | Core TeX Implementation for LaTeXML                                 | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Job Family of primitive control sequences
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#======================================================================
# The current Job
#----------------------------------------------------------------------
# \jobname          c  is the underlying file name for a job.
# \time             pi holds the current time in minutes after midnight (0-1439).
# \day              pi holds the current day of the month (1-31).
# \month            pi holds the current month of the year (1-12).
# \year             pi holds the current year (e.g., 2000).
# \mag              pi holds the magnification ratio times 1000.

DefMacroI('\jobname', undef, Tokens());    # Set to the filename by initialization
DefRegister('\time'  => Number(0));
DefRegister('\day'   => Number(0));
DefRegister('\month' => Number(0));
DefRegister('\year'  => Number(0));
DefRegister('\mag'   => Number(1000));

# This may mess up Daemon state?
{ my ($sec, $min, $hour, $mday, $mon, $year) = defined $ENV{SOURCE_DATE_EPOCH} ? gmtime($ENV{SOURCE_DATE_EPOCH}) : localtime();
  AssignValue('\day'   => Number($mday),             'global');
  AssignValue('\month' => Number($mon + 1),          'global');
  AssignValue('\year'  => Number(1900 + $year),      'global');
  AssignValue('\time'  => Number(60 * $hour + $min), 'global'); }

our @MonthNames = (qw( January February March April May June
    July August September October November December));

# Return a string for today's date.
sub today {
  return $MonthNames[LookupValue('\month')->valueOf - 1]
    . " " . LookupValue('\day')->valueOf
    . ', ' . LookupValue('\year')->valueOf; }

#======================================================================
# Random Job related things
#----------------------------------------------------------------------
# \end              c  terminates the current job.
# \everyjob         pt holds tokens which are inserted at the start of every job.
# \deadcycles       iq is the number of times \output was called since the last \shipout.
# \maxdeadcycles    pi is the maximum allowed value of \deadcycles before an error is generated.

DefPrimitiveI('\end', undef, sub { $_[0]->getGullet->flush; return; });
DefRegister('\everyjob'      => Tokens());
DefRegister('\deadcycles'    => Number(0));
DefRegister('\maxdeadcycles' => Number(0));

#======================================================================
# Dumping
#----------------------------------------------------------------------
# \dump             c  outputs a format file in INITEX; otherwise it is equivalent to \end.

DefMacro('\dump', sub {
    Warn('unexpected', 'dump', $_[0], "Do not know how to \\dump yet, sorry"); });

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
####$LaTeXML::DEBUG{compiled} = 1 unless $LaTeXML::DEBUG{compiling} || $LaTeXML::DEBUG{nocompiled};
sub loadDump {
  my ($file) = @_;
  my $stage = "Loading compiled $file";
  ProgressSpinup($stage);
  $file = ToString($file);
  my ($dir, $name, $type) = pathname_split($file);
  my $path = '/tmp/' . $name . '.' . $type . '.ltxmlc';
  Debug("Loading $file from $path");
  # DDS version
  our $FREEZE = undef;
  my $istage = "reading";
  ProgressSpinup($istage);
  my $result = do($path);
  ProgressSpindown($istage);
  if (!$result) { Debug("Load failed with $@"); }
  my $nsym = 0;
  my $nlet = 0;
  Debug("Got $FREEZE");
  $istage = "installing";
  ProgressSpinup($istage);

  foreach my $table_name (sort keys %$FREEZE) {
    my $data = $$FREEZE{$table_name};
    foreach my $key (sort keys %$data) {
      # Risky? And Risky if NOT!!! (loops)
      if (defined $$STATE{$table_name}{$key}[0]) {    # SKIP if already defined (by binding?)
            #        Debug("SKIPPING latex.ltx redefinition of $key in $table_name");
        next; }
      my $value = $$data{$key};
      next if ($table_name eq 'meaning') && !ref $value;
      $nsym++;
      LaTeXML::Core::State::assign_internal($STATE, $table_name, $key, $value, 'global'); } }
  ProgressSpindown($istage);
  $istage = "\\lets";
  ProgressSpinup($istage);
  # Deferred lookup of \let symbols
  foreach my $table_name (qw(meaning)) {
    my $data = $$FREEZE{$table_name};
    foreach my $key (sort keys %$data) {
      my $value = $$data{$key};
      next if !$value || ref $value;
      $nsym++;
      $nlet++;
      my $truevalue = $STATE->lookupMeaning(T_CS($value));
      Debug("Missing binding '$key' => '$value'") unless $truevalue;
      LaTeXML::Core::State::assign_internal($STATE, $table_name, $key, $truevalue, 'global'); } }
  ProgressSpindown($istage);
  Debug("Retrieved $nsym ($nlet \\lets) from $path!");
  ProgressSpindown($stage);
  return; }

sub LOAD_LATEX {
  LoadPool('eTeX');      # unless.... ?
  LoadPool('pdfTeX');    # unless.... ?
  if (!$LaTeXML::DEBUG{compiling}
    && $LaTeXML::DEBUG{compiled}) {
    # Try this after (most) primitives & parameter types have been defined
    Let('\@@input', '\input');    # Save TeX's version.
    DefMacro('\try@load@fontshape', '', locked => 1);
    DefMacro('\define@newfont',     '', locked => 1);
    ##loadCompiled('latex.ltx');
    loadDump('latex.ltx');
    # Then restore some things (not lockable?)
    # Some are code compatibility issues, some are gratuitous test case differences
    $STATE->assignValue(font     => LaTeXML::Common::Font->textDefault(), 'global');
    $STATE->assignValue(mathfont => LaTeXML::Common::Font->mathDefault(), 'global');
    DefMacroI('\f@encoding',  undef, sub { ExplodeText(LookupValue('font')->getEncoding); });
    DefMacroI('\cf@encoding', undef, sub { ExplodeText(LookupValue('font')->getEncoding); });

    DefMacro('\hline', '\noalign{\@@alignment@hline}');
    DefMacroI('\ldots', undef, '\lx@ldots');    # for tests?

    Let('\par', '\lx@normal@par');
    #    LoadPool('LaTeX');
    return; } }
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1;
