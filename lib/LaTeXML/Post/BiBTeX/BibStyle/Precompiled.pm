# /=====================================================================\ #
# |  LaTeXML::Post::BiBTeX::BibStyle::Precompiled                       | #
# | Default, pre-compiled .bst file                                     | #
# |=====================================================================| #
# | Part of LaTeXML                                                     | #
# |---------------------------------------------------------------------| #
# | Tom Wiesing <tom.wiesing@gmail.com>                                 | #
# \=====================================================================/ #
package LaTeXML::Post::BiBTeX::BibStyle::Precompiled;
use strict;
use warnings;

use base qw(Exporter);
our @EXPORT = qw(
  &getDefault
);

# at the bottom
our $DEFAULT_BST_COMPILED;

# get gets the default precompiled bst file
sub getDefault {
  return $DEFAULT_BST_COMPILED; }

# below is the pre-compiled file.
# this was generated using './tools/bibtexmlc plain.bst'
$DEFAULT_BST_COMPILED = <<'__END_COMPILED__';
sub { 
  # code automatically generated by BiBTeXML 
  use LaTeXML::Post::BiBTeX::Runtime; 
  my ($context, $config) = @_; 
  $config->setName('plain.bst'); 
  defineEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 12, 4, 12, 11)])); 
  defineEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 13, 4, 13, 10)])); 
  defineEntryField($context, $config, 'booktitle', StyString('LITERAL', 'booktitle', [('plain.bst', 14, 4, 14, 13)])); 
  defineEntryField($context, $config, 'chapter', StyString('LITERAL', 'chapter', [('plain.bst', 15, 4, 15, 11)])); 
  defineEntryField($context, $config, 'edition', StyString('LITERAL', 'edition', [('plain.bst', 16, 4, 16, 11)])); 
  defineEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 17, 4, 17, 10)])); 
  defineEntryField($context, $config, 'howpublished', StyString('LITERAL', 'howpublished', [('plain.bst', 18, 4, 18, 16)])); 
  defineEntryField($context, $config, 'institution', StyString('LITERAL', 'institution', [('plain.bst', 19, 4, 19, 15)])); 
  defineEntryField($context, $config, 'journal', StyString('LITERAL', 'journal', [('plain.bst', 20, 4, 20, 11)])); 
  defineEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 21, 4, 21, 7)])); 
  defineEntryField($context, $config, 'month', StyString('LITERAL', 'month', [('plain.bst', 22, 4, 22, 9)])); 
  defineEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 23, 4, 23, 8)])); 
  defineEntryField($context, $config, 'number', StyString('LITERAL', 'number', [('plain.bst', 24, 4, 24, 10)])); 
  defineEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 25, 4, 25, 16)])); 
  defineEntryField($context, $config, 'pages', StyString('LITERAL', 'pages', [('plain.bst', 26, 4, 26, 9)])); 
  defineEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 27, 4, 27, 13)])); 
  defineEntryField($context, $config, 'school', StyString('LITERAL', 'school', [('plain.bst', 28, 4, 28, 10)])); 
  defineEntryField($context, $config, 'series', StyString('LITERAL', 'series', [('plain.bst', 29, 4, 29, 10)])); 
  defineEntryField($context, $config, 'title', StyString('LITERAL', 'title', [('plain.bst', 30, 4, 30, 9)])); 
  defineEntryField($context, $config, 'type', StyString('LITERAL', 'type', [('plain.bst', 31, 4, 31, 8)])); 
  defineEntryField($context, $config, 'volume', StyString('LITERAL', 'volume', [('plain.bst', 32, 4, 32, 10)])); 
  defineEntryField($context, $config, 'year', StyString('LITERAL', 'year', [('plain.bst', 33, 4, 33, 8)])); 
  defineEntryString($context, $config, 'label', StyString('LITERAL', 'label', [('plain.bst', 36, 4, 36, 9)])); 
  defineGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 38, 11, 38, 23)])); 
  defineGlobalInteger($context, $config, 'before.all', StyString('LITERAL', 'before.all', [('plain.bst', 38, 24, 38, 34)])); 
  defineGlobalInteger($context, $config, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [('plain.bst', 38, 35, 38, 47)])); 
  defineGlobalInteger($context, $config, 'after.sentence', StyString('LITERAL', 'after.sentence', [('plain.bst', 38, 48, 38, 62)])); 
  defineGlobalInteger($context, $config, 'after.block', StyString('LITERAL', 'after.block', [('plain.bst', 38, 63, 38, 74)])); 
  my $bst__initZostateZoconsts = sub { 
    my ($context, $config) = @_; 
    pushInteger($context, $config, 0, StyString('NUMBER', 0, [('plain.bst', 41, 2, 41, 4)])); 
    pushGlobalInteger($context, $config, 'before.all', StyString('REFERENCE', 'before.all', [('plain.bst', 41, 5, 41, 16)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 41, 17, 41, 19)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 42, 2, 42, 4)])); 
    pushGlobalInteger($context, $config, 'mid.sentence', StyString('REFERENCE', 'mid.sentence', [('plain.bst', 42, 5, 42, 18)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 42, 19, 42, 21)])); 
    pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 43, 2, 43, 4)])); 
    pushGlobalInteger($context, $config, 'after.sentence', StyString('REFERENCE', 'after.sentence', [('plain.bst', 43, 5, 43, 20)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 43, 21, 43, 23)])); 
    pushInteger($context, $config, 3, StyString('NUMBER', 3, [('plain.bst', 44, 2, 44, 4)])); 
    pushGlobalInteger($context, $config, 'after.block', StyString('REFERENCE', 'after.block', [('plain.bst', 44, 5, 44, 17)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 44, 18, 44, 20)])); 
  }; 
  registerFunctionDefinition($context, $config, 'init.state.consts', $bst__initZostateZoconsts, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 39, 1, 40, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'init.state.consts', [('plain.bst', 40, 10, 40, 27)]))], [('plain.bst', 40, 9, 40, 28)]), StyString('BLOCK', [(StyString('NUMBER', 0, [('plain.bst', 41, 2, 41, 4)]), StyString('REFERENCE', 'before.all', [('plain.bst', 41, 5, 41, 16)]), StyString('LITERAL', ':=', [('plain.bst', 41, 17, 41, 19)]), StyString('NUMBER', 1, [('plain.bst', 42, 2, 42, 4)]), StyString('REFERENCE', 'mid.sentence', [('plain.bst', 42, 5, 42, 18)]), StyString('LITERAL', ':=', [('plain.bst', 42, 19, 42, 21)]), StyString('NUMBER', 2, [('plain.bst', 43, 2, 43, 4)]), StyString('REFERENCE', 'after.sentence', [('plain.bst', 43, 5, 43, 20)]), StyString('LITERAL', ':=', [('plain.bst', 43, 21, 43, 23)]), StyString('NUMBER', 3, [('plain.bst', 44, 2, 44, 4)]), StyString('REFERENCE', 'after.block', [('plain.bst', 44, 5, 44, 17)]), StyString('LITERAL', ':=', [('plain.bst', 44, 18, 44, 20)]))], [('plain.bst', 40, 29, 45, 2)]))], [('plain.bst', 39, 1, 45, 2)])); ; 
  defineGlobalString($context, $config, 's', StyString('LITERAL', 's', [('plain.bst', 47, 10, 47, 11)])); 
  defineGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 47, 12, 47, 13)])); 
  my $bst__outputZononnull = sub { 
    my ($context, $config) = @_; 
    pushGlobalString($context, $config, 's', StyString('REFERENCE', 's', [('plain.bst', 50, 2, 50, 4)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 50, 5, 50, 7)])); 
    lookupGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 51, 2, 51, 14)])); 
    lookupGlobalInteger($context, $config, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [('plain.bst', 51, 15, 51, 27)])); 
    builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 51, 28, 51, 29)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, ', ', StyString('QUOTE', ', ', [('plain.bst', 52, 6, 52, 10)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 52, 11, 52, 12)])); 
      builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 52, 13, 52, 19)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 52, 6, 52, 10)]), StyString('LITERAL', '*', [('plain.bst', 52, 11, 52, 12)]), StyString('LITERAL', 'write$', [('plain.bst', 52, 13, 52, 19)]))], [('plain.bst', 52, 4, 52, 21)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 53, 6, 53, 18)])); 
      lookupGlobalInteger($context, $config, 'after.block', StyString('LITERAL', 'after.block', [('plain.bst', 53, 19, 53, 30)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 53, 31, 53, 32)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        builtinAddPeriod($context, $config, StyString('LITERAL', 'add.period$', [('plain.bst', 54, 10, 54, 21)])); 
        builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 54, 22, 54, 28)])); 
        builtinNewline($context, $config, StyString('LITERAL', 'newline$', [('plain.bst', 55, 10, 55, 18)])); 
        pushString($context, $config, '\\newblock ', StyString('QUOTE', '\\newblock ', [('plain.bst', 56, 10, 56, 22)])); 
        builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 56, 23, 56, 29)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [('plain.bst', 54, 10, 54, 21)]), StyString('LITERAL', 'write$', [('plain.bst', 54, 22, 54, 28)]), StyString('LITERAL', 'newline$', [('plain.bst', 55, 10, 55, 18)]), StyString('QUOTE', '\\newblock ', [('plain.bst', 56, 10, 56, 22)]), StyString('LITERAL', 'write$', [('plain.bst', 56, 23, 56, 29)]))], [('plain.bst', 54, 8, 57, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 58, 10, 58, 22)])); 
        lookupGlobalInteger($context, $config, 'before.all', StyString('LITERAL', 'before.all', [('plain.bst', 58, 23, 58, 33)])); 
        builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 58, 34, 58, 35)])); 
        pushFunction($context, $config, \&builtinWrite, StyString('REFERENCE', 'write$', [('plain.bst', 59, 12, 59, 19)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          builtinAddPeriod($context, $config, StyString('LITERAL', 'add.period$', [('plain.bst', 60, 14, 60, 25)])); 
          pushString($context, $config, ' ', StyString('QUOTE', ' ', [('plain.bst', 60, 26, 60, 29)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 60, 30, 60, 31)])); 
          builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 60, 32, 60, 38)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [('plain.bst', 60, 14, 60, 25)]), StyString('QUOTE', ' ', [('plain.bst', 60, 26, 60, 29)]), StyString('LITERAL', '*', [('plain.bst', 60, 30, 60, 31)]), StyString('LITERAL', 'write$', [('plain.bst', 60, 32, 60, 38)]))], [('plain.bst', 60, 12, 60, 40)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 61, 10, 61, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 58, 10, 58, 22)]), StyString('LITERAL', 'before.all', [('plain.bst', 58, 23, 58, 33)]), StyString('LITERAL', '=', [('plain.bst', 58, 34, 58, 35)]), StyString('REFERENCE', 'write$', [('plain.bst', 59, 12, 59, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [('plain.bst', 60, 14, 60, 25)]), StyString('QUOTE', ' ', [('plain.bst', 60, 26, 60, 29)]), StyString('LITERAL', '*', [('plain.bst', 60, 30, 60, 31)]), StyString('LITERAL', 'write$', [('plain.bst', 60, 32, 60, 38)]))], [('plain.bst', 60, 12, 60, 40)]), StyString('LITERAL', 'if$', [('plain.bst', 61, 10, 61, 13)]))], [('plain.bst', 58, 8, 62, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 63, 6, 63, 9)])); 
      lookupGlobalInteger($context, $config, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [('plain.bst', 64, 6, 64, 18)])); 
      pushGlobalInteger($context, $config, 'output.state', StyString('REFERENCE', 'output.state', [('plain.bst', 64, 19, 64, 32)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 64, 33, 64, 35)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 53, 6, 53, 18)]), StyString('LITERAL', 'after.block', [('plain.bst', 53, 19, 53, 30)]), StyString('LITERAL', '=', [('plain.bst', 53, 31, 53, 32)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [('plain.bst', 54, 10, 54, 21)]), StyString('LITERAL', 'write$', [('plain.bst', 54, 22, 54, 28)]), StyString('LITERAL', 'newline$', [('plain.bst', 55, 10, 55, 18)]), StyString('QUOTE', '\\newblock ', [('plain.bst', 56, 10, 56, 22)]), StyString('LITERAL', 'write$', [('plain.bst', 56, 23, 56, 29)]))], [('plain.bst', 54, 8, 57, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 58, 10, 58, 22)]), StyString('LITERAL', 'before.all', [('plain.bst', 58, 23, 58, 33)]), StyString('LITERAL', '=', [('plain.bst', 58, 34, 58, 35)]), StyString('REFERENCE', 'write$', [('plain.bst', 59, 12, 59, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [('plain.bst', 60, 14, 60, 25)]), StyString('QUOTE', ' ', [('plain.bst', 60, 26, 60, 29)]), StyString('LITERAL', '*', [('plain.bst', 60, 30, 60, 31)]), StyString('LITERAL', 'write$', [('plain.bst', 60, 32, 60, 38)]))], [('plain.bst', 60, 12, 60, 40)]), StyString('LITERAL', 'if$', [('plain.bst', 61, 10, 61, 13)]))], [('plain.bst', 58, 8, 62, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 63, 6, 63, 9)]), StyString('LITERAL', 'mid.sentence', [('plain.bst', 64, 6, 64, 18)]), StyString('REFERENCE', 'output.state', [('plain.bst', 64, 19, 64, 32)]), StyString('LITERAL', ':=', [('plain.bst', 64, 33, 64, 35)]))], [('plain.bst', 53, 4, 65, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 66, 2, 66, 5)])); 
    lookupGlobalString($context, $config, 's', StyString('LITERAL', 's', [('plain.bst', 67, 2, 67, 3)])); 
  }; 
  registerFunctionDefinition($context, $config, 'output.nonnull', $bst__outputZononnull, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 48, 1, 49, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'output.nonnull', [('plain.bst', 49, 10, 49, 24)]))], [('plain.bst', 49, 9, 49, 25)]), StyString('BLOCK', [(StyString('REFERENCE', 's', [('plain.bst', 50, 2, 50, 4)]), StyString('LITERAL', ':=', [('plain.bst', 50, 5, 50, 7)]), StyString('LITERAL', 'output.state', [('plain.bst', 51, 2, 51, 14)]), StyString('LITERAL', 'mid.sentence', [('plain.bst', 51, 15, 51, 27)]), StyString('LITERAL', '=', [('plain.bst', 51, 28, 51, 29)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 52, 6, 52, 10)]), StyString('LITERAL', '*', [('plain.bst', 52, 11, 52, 12)]), StyString('LITERAL', 'write$', [('plain.bst', 52, 13, 52, 19)]))], [('plain.bst', 52, 4, 52, 21)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 53, 6, 53, 18)]), StyString('LITERAL', 'after.block', [('plain.bst', 53, 19, 53, 30)]), StyString('LITERAL', '=', [('plain.bst', 53, 31, 53, 32)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [('plain.bst', 54, 10, 54, 21)]), StyString('LITERAL', 'write$', [('plain.bst', 54, 22, 54, 28)]), StyString('LITERAL', 'newline$', [('plain.bst', 55, 10, 55, 18)]), StyString('QUOTE', '\\newblock ', [('plain.bst', 56, 10, 56, 22)]), StyString('LITERAL', 'write$', [('plain.bst', 56, 23, 56, 29)]))], [('plain.bst', 54, 8, 57, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 58, 10, 58, 22)]), StyString('LITERAL', 'before.all', [('plain.bst', 58, 23, 58, 33)]), StyString('LITERAL', '=', [('plain.bst', 58, 34, 58, 35)]), StyString('REFERENCE', 'write$', [('plain.bst', 59, 12, 59, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [('plain.bst', 60, 14, 60, 25)]), StyString('QUOTE', ' ', [('plain.bst', 60, 26, 60, 29)]), StyString('LITERAL', '*', [('plain.bst', 60, 30, 60, 31)]), StyString('LITERAL', 'write$', [('plain.bst', 60, 32, 60, 38)]))], [('plain.bst', 60, 12, 60, 40)]), StyString('LITERAL', 'if$', [('plain.bst', 61, 10, 61, 13)]))], [('plain.bst', 58, 8, 62, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 63, 6, 63, 9)]), StyString('LITERAL', 'mid.sentence', [('plain.bst', 64, 6, 64, 18)]), StyString('REFERENCE', 'output.state', [('plain.bst', 64, 19, 64, 32)]), StyString('LITERAL', ':=', [('plain.bst', 64, 33, 64, 35)]))], [('plain.bst', 53, 4, 65, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 66, 2, 66, 5)]), StyString('LITERAL', 's', [('plain.bst', 67, 2, 67, 3)]))], [('plain.bst', 49, 26, 68, 2)]))], [('plain.bst', 48, 1, 68, 2)])); ; 
  my $bst__output = sub { 
    my ($context, $config) = @_; 
    builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 71, 2, 71, 12)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 71, 13, 71, 19)])); 
    pushFunction($context, $config, \&builtinPop, StyString('REFERENCE', 'pop$', [('plain.bst', 72, 4, 72, 9)])); 
    pushFunction($context, $config, $bst__outputZononnull, StyString('REFERENCE', 'output.nonnull', [('plain.bst', 73, 4, 73, 19)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 74, 2, 74, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'output', $bst__output, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 69, 1, 70, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'output', [('plain.bst', 70, 10, 70, 16)]))], [('plain.bst', 70, 9, 70, 17)]), StyString('BLOCK', [(StyString('LITERAL', 'duplicate$', [('plain.bst', 71, 2, 71, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 71, 13, 71, 19)]), StyString('REFERENCE', 'pop$', [('plain.bst', 72, 4, 72, 9)]), StyString('REFERENCE', 'output.nonnull', [('plain.bst', 73, 4, 73, 19)]), StyString('LITERAL', 'if$', [('plain.bst', 74, 2, 74, 5)]))], [('plain.bst', 70, 18, 75, 2)]))], [('plain.bst', 69, 1, 75, 2)])); ; 
  my $bst__outputZocheck = sub { 
    my ($context, $config) = @_; 
    pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 78, 2, 78, 4)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 78, 5, 78, 7)])); 
    builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 79, 2, 79, 12)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 79, 13, 79, 19)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinPop($context, $config, StyString('LITERAL', 'pop$', [('plain.bst', 80, 6, 80, 10)])); 
      pushString($context, $config, 'empty ', StyString('QUOTE', 'empty ', [('plain.bst', 80, 11, 80, 19)])); 
      lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 80, 20, 80, 21)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 80, 22, 80, 23)])); 
      pushString($context, $config, ' in ', StyString('QUOTE', ' in ', [('plain.bst', 80, 24, 80, 30)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 80, 31, 80, 32)])); 
      builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 80, 33, 80, 38)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 80, 39, 80, 40)])); 
      builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 80, 41, 80, 49)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 80, 6, 80, 10)]), StyString('QUOTE', 'empty ', [('plain.bst', 80, 11, 80, 19)]), StyString('LITERAL', 't', [('plain.bst', 80, 20, 80, 21)]), StyString('LITERAL', '*', [('plain.bst', 80, 22, 80, 23)]), StyString('QUOTE', ' in ', [('plain.bst', 80, 24, 80, 30)]), StyString('LITERAL', '*', [('plain.bst', 80, 31, 80, 32)]), StyString('LITERAL', 'cite$', [('plain.bst', 80, 33, 80, 38)]), StyString('LITERAL', '*', [('plain.bst', 80, 39, 80, 40)]), StyString('LITERAL', 'warning$', [('plain.bst', 80, 41, 80, 49)]))], [('plain.bst', 80, 4, 80, 51)])); 
    pushFunction($context, $config, $bst__outputZononnull, StyString('REFERENCE', 'output.nonnull', [('plain.bst', 81, 4, 81, 19)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 82, 2, 82, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'output.check', $bst__outputZocheck, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 76, 1, 77, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'output.check', [('plain.bst', 77, 10, 77, 22)]))], [('plain.bst', 77, 9, 77, 23)]), StyString('BLOCK', [(StyString('REFERENCE', 't', [('plain.bst', 78, 2, 78, 4)]), StyString('LITERAL', ':=', [('plain.bst', 78, 5, 78, 7)]), StyString('LITERAL', 'duplicate$', [('plain.bst', 79, 2, 79, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 79, 13, 79, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 80, 6, 80, 10)]), StyString('QUOTE', 'empty ', [('plain.bst', 80, 11, 80, 19)]), StyString('LITERAL', 't', [('plain.bst', 80, 20, 80, 21)]), StyString('LITERAL', '*', [('plain.bst', 80, 22, 80, 23)]), StyString('QUOTE', ' in ', [('plain.bst', 80, 24, 80, 30)]), StyString('LITERAL', '*', [('plain.bst', 80, 31, 80, 32)]), StyString('LITERAL', 'cite$', [('plain.bst', 80, 33, 80, 38)]), StyString('LITERAL', '*', [('plain.bst', 80, 39, 80, 40)]), StyString('LITERAL', 'warning$', [('plain.bst', 80, 41, 80, 49)]))], [('plain.bst', 80, 4, 80, 51)]), StyString('REFERENCE', 'output.nonnull', [('plain.bst', 81, 4, 81, 19)]), StyString('LITERAL', 'if$', [('plain.bst', 82, 2, 82, 5)]))], [('plain.bst', 77, 24, 83, 2)]))], [('plain.bst', 76, 1, 83, 2)])); ; 
  my $bst__outputZobibitem = sub { 
    my ($context, $config) = @_; 
    builtinNewline($context, $config, StyString('LITERAL', 'newline$', [('plain.bst', 86, 2, 86, 10)])); 
    pushString($context, $config, '\\bibitem{', StyString('QUOTE', '\\bibitem{', [('plain.bst', 87, 2, 87, 13)])); 
    builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 87, 14, 87, 20)])); 
    builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 88, 2, 88, 7)])); 
    builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 88, 8, 88, 14)])); 
    pushString($context, $config, '}', StyString('QUOTE', '}', [('plain.bst', 89, 2, 89, 5)])); 
    builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 89, 6, 89, 12)])); 
    builtinNewline($context, $config, StyString('LITERAL', 'newline$', [('plain.bst', 90, 2, 90, 10)])); 
    pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 91, 2, 91, 4)])); 
    lookupGlobalInteger($context, $config, 'before.all', StyString('LITERAL', 'before.all', [('plain.bst', 92, 2, 92, 12)])); 
    pushGlobalInteger($context, $config, 'output.state', StyString('REFERENCE', 'output.state', [('plain.bst', 92, 13, 92, 26)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 92, 27, 92, 29)])); 
  }; 
  registerFunctionDefinition($context, $config, 'output.bibitem', $bst__outputZobibitem, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 84, 1, 85, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 85, 10, 85, 24)]))], [('plain.bst', 85, 9, 85, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'newline$', [('plain.bst', 86, 2, 86, 10)]), StyString('QUOTE', '\\bibitem{', [('plain.bst', 87, 2, 87, 13)]), StyString('LITERAL', 'write$', [('plain.bst', 87, 14, 87, 20)]), StyString('LITERAL', 'cite$', [('plain.bst', 88, 2, 88, 7)]), StyString('LITERAL', 'write$', [('plain.bst', 88, 8, 88, 14)]), StyString('QUOTE', '}', [('plain.bst', 89, 2, 89, 5)]), StyString('LITERAL', 'write$', [('plain.bst', 89, 6, 89, 12)]), StyString('LITERAL', 'newline$', [('plain.bst', 90, 2, 90, 10)]), StyString('QUOTE', '', [('plain.bst', 91, 2, 91, 4)]), StyString('LITERAL', 'before.all', [('plain.bst', 92, 2, 92, 12)]), StyString('REFERENCE', 'output.state', [('plain.bst', 92, 13, 92, 26)]), StyString('LITERAL', ':=', [('plain.bst', 92, 27, 92, 29)]))], [('plain.bst', 85, 26, 93, 2)]))], [('plain.bst', 84, 1, 93, 2)])); ; 
  my $bst__finZoentry = sub { 
    my ($context, $config) = @_; 
    builtinAddPeriod($context, $config, StyString('LITERAL', 'add.period$', [('plain.bst', 96, 2, 96, 13)])); 
    builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 97, 2, 97, 8)])); 
    builtinNewline($context, $config, StyString('LITERAL', 'newline$', [('plain.bst', 98, 2, 98, 10)])); 
  }; 
  registerFunctionDefinition($context, $config, 'fin.entry', $bst__finZoentry, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 94, 1, 95, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'fin.entry', [('plain.bst', 95, 10, 95, 19)]))], [('plain.bst', 95, 9, 95, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [('plain.bst', 96, 2, 96, 13)]), StyString('LITERAL', 'write$', [('plain.bst', 97, 2, 97, 8)]), StyString('LITERAL', 'newline$', [('plain.bst', 98, 2, 98, 10)]))], [('plain.bst', 95, 21, 99, 2)]))], [('plain.bst', 94, 1, 99, 2)])); ; 
  my $bst__newZoblock = sub { 
    my ($context, $config) = @_; 
    lookupGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 102, 2, 102, 14)])); 
    lookupGlobalInteger($context, $config, 'before.all', StyString('LITERAL', 'before.all', [('plain.bst', 102, 15, 102, 25)])); 
    builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 102, 26, 102, 27)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 103, 4, 103, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalInteger($context, $config, 'after.block', StyString('LITERAL', 'after.block', [('plain.bst', 104, 6, 104, 17)])); 
      pushGlobalInteger($context, $config, 'output.state', StyString('REFERENCE', 'output.state', [('plain.bst', 104, 18, 104, 31)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 104, 32, 104, 34)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'after.block', [('plain.bst', 104, 6, 104, 17)]), StyString('REFERENCE', 'output.state', [('plain.bst', 104, 18, 104, 31)]), StyString('LITERAL', ':=', [('plain.bst', 104, 32, 104, 34)]))], [('plain.bst', 104, 4, 104, 36)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 105, 2, 105, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'new.block', $bst__newZoblock, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 100, 1, 101, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'new.block', [('plain.bst', 101, 10, 101, 19)]))], [('plain.bst', 101, 9, 101, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 102, 2, 102, 14)]), StyString('LITERAL', 'before.all', [('plain.bst', 102, 15, 102, 25)]), StyString('LITERAL', '=', [('plain.bst', 102, 26, 102, 27)]), StyString('REFERENCE', 'skip$', [('plain.bst', 103, 4, 103, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'after.block', [('plain.bst', 104, 6, 104, 17)]), StyString('REFERENCE', 'output.state', [('plain.bst', 104, 18, 104, 31)]), StyString('LITERAL', ':=', [('plain.bst', 104, 32, 104, 34)]))], [('plain.bst', 104, 4, 104, 36)]), StyString('LITERAL', 'if$', [('plain.bst', 105, 2, 105, 5)]))], [('plain.bst', 101, 21, 106, 2)]))], [('plain.bst', 100, 1, 106, 2)])); ; 
  my $bst__newZosentence = sub { 
    my ($context, $config) = @_; 
    lookupGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 109, 2, 109, 14)])); 
    lookupGlobalInteger($context, $config, 'after.block', StyString('LITERAL', 'after.block', [('plain.bst', 109, 15, 109, 26)])); 
    builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 109, 27, 109, 28)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 110, 4, 110, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 111, 6, 111, 18)])); 
      lookupGlobalInteger($context, $config, 'before.all', StyString('LITERAL', 'before.all', [('plain.bst', 111, 19, 111, 29)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 111, 30, 111, 31)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 112, 8, 112, 14)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupGlobalInteger($context, $config, 'after.sentence', StyString('LITERAL', 'after.sentence', [('plain.bst', 113, 10, 113, 24)])); 
        pushGlobalInteger($context, $config, 'output.state', StyString('REFERENCE', 'output.state', [('plain.bst', 113, 25, 113, 38)])); 
        builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 113, 39, 113, 41)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'after.sentence', [('plain.bst', 113, 10, 113, 24)]), StyString('REFERENCE', 'output.state', [('plain.bst', 113, 25, 113, 38)]), StyString('LITERAL', ':=', [('plain.bst', 113, 39, 113, 41)]))], [('plain.bst', 113, 8, 113, 43)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 114, 6, 114, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 111, 6, 111, 18)]), StyString('LITERAL', 'before.all', [('plain.bst', 111, 19, 111, 29)]), StyString('LITERAL', '=', [('plain.bst', 111, 30, 111, 31)]), StyString('REFERENCE', 'skip$', [('plain.bst', 112, 8, 112, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'after.sentence', [('plain.bst', 113, 10, 113, 24)]), StyString('REFERENCE', 'output.state', [('plain.bst', 113, 25, 113, 38)]), StyString('LITERAL', ':=', [('plain.bst', 113, 39, 113, 41)]))], [('plain.bst', 113, 8, 113, 43)]), StyString('LITERAL', 'if$', [('plain.bst', 114, 6, 114, 9)]))], [('plain.bst', 111, 4, 115, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 116, 2, 116, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'new.sentence', $bst__newZosentence, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 107, 1, 108, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'new.sentence', [('plain.bst', 108, 10, 108, 22)]))], [('plain.bst', 108, 9, 108, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 109, 2, 109, 14)]), StyString('LITERAL', 'after.block', [('plain.bst', 109, 15, 109, 26)]), StyString('LITERAL', '=', [('plain.bst', 109, 27, 109, 28)]), StyString('REFERENCE', 'skip$', [('plain.bst', 110, 4, 110, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 111, 6, 111, 18)]), StyString('LITERAL', 'before.all', [('plain.bst', 111, 19, 111, 29)]), StyString('LITERAL', '=', [('plain.bst', 111, 30, 111, 31)]), StyString('REFERENCE', 'skip$', [('plain.bst', 112, 8, 112, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'after.sentence', [('plain.bst', 113, 10, 113, 24)]), StyString('REFERENCE', 'output.state', [('plain.bst', 113, 25, 113, 38)]), StyString('LITERAL', ':=', [('plain.bst', 113, 39, 113, 41)]))], [('plain.bst', 113, 8, 113, 43)]), StyString('LITERAL', 'if$', [('plain.bst', 114, 6, 114, 9)]))], [('plain.bst', 111, 4, 115, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 116, 2, 116, 5)]))], [('plain.bst', 108, 24, 117, 2)]))], [('plain.bst', 107, 1, 117, 2)])); ; 
  my $bst__not = sub { 
    my ($context, $config) = @_; 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushInteger($context, $config, 0, StyString('NUMBER', 0, [('plain.bst', 120, 6, 120, 8)])); 
    }, StyString('BLOCK', [(StyString('NUMBER', 0, [('plain.bst', 120, 6, 120, 8)]))], [('plain.bst', 120, 4, 120, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 121, 6, 121, 8)])); 
    }, StyString('BLOCK', [(StyString('NUMBER', 1, [('plain.bst', 121, 6, 121, 8)]))], [('plain.bst', 121, 4, 121, 10)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 122, 2, 122, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'not', $bst__not, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 118, 1, 119, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'not', [('plain.bst', 119, 10, 119, 13)]))], [('plain.bst', 119, 9, 119, 14)]), StyString('BLOCK', [(StyString('BLOCK', [(StyString('NUMBER', 0, [('plain.bst', 120, 6, 120, 8)]))], [('plain.bst', 120, 4, 120, 10)]), StyString('BLOCK', [(StyString('NUMBER', 1, [('plain.bst', 121, 6, 121, 8)]))], [('plain.bst', 121, 4, 121, 10)]), StyString('LITERAL', 'if$', [('plain.bst', 122, 2, 122, 5)]))], [('plain.bst', 119, 15, 123, 2)]))], [('plain.bst', 118, 1, 123, 2)])); ; 
  my $bst__and = sub { 
    my ($context, $config) = @_; 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 126, 4, 126, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinPop($context, $config, StyString('LITERAL', 'pop$', [('plain.bst', 127, 6, 127, 10)])); 
      pushInteger($context, $config, 0, StyString('NUMBER', 0, [('plain.bst', 127, 11, 127, 13)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 127, 6, 127, 10)]), StyString('NUMBER', 0, [('plain.bst', 127, 11, 127, 13)]))], [('plain.bst', 127, 4, 127, 15)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 128, 2, 128, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'and', $bst__and, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 124, 1, 125, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'and', [('plain.bst', 125, 10, 125, 13)]))], [('plain.bst', 125, 9, 125, 14)]), StyString('BLOCK', [(StyString('REFERENCE', 'skip$', [('plain.bst', 126, 4, 126, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 127, 6, 127, 10)]), StyString('NUMBER', 0, [('plain.bst', 127, 11, 127, 13)]))], [('plain.bst', 127, 4, 127, 15)]), StyString('LITERAL', 'if$', [('plain.bst', 128, 2, 128, 5)]))], [('plain.bst', 125, 15, 129, 2)]))], [('plain.bst', 124, 1, 129, 2)])); ; 
  my $bst__or = sub { 
    my ($context, $config) = @_; 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinPop($context, $config, StyString('LITERAL', 'pop$', [('plain.bst', 132, 6, 132, 10)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 132, 11, 132, 13)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 132, 6, 132, 10)]), StyString('NUMBER', 1, [('plain.bst', 132, 11, 132, 13)]))], [('plain.bst', 132, 4, 132, 15)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 133, 4, 133, 10)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 134, 2, 134, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'or', $bst__or, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 130, 1, 131, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'or', [('plain.bst', 131, 10, 131, 12)]))], [('plain.bst', 131, 9, 131, 13)]), StyString('BLOCK', [(StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 132, 6, 132, 10)]), StyString('NUMBER', 1, [('plain.bst', 132, 11, 132, 13)]))], [('plain.bst', 132, 4, 132, 15)]), StyString('REFERENCE', 'skip$', [('plain.bst', 133, 4, 133, 10)]), StyString('LITERAL', 'if$', [('plain.bst', 134, 2, 134, 5)]))], [('plain.bst', 131, 14, 135, 2)]))], [('plain.bst', 130, 1, 135, 2)])); ; 
  my $bst__newZoblockZochecka = sub { 
    my ($context, $config) = @_; 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 138, 2, 138, 8)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 139, 4, 139, 10)])); 
    pushFunction($context, $config, $bst__newZoblock, StyString('REFERENCE', 'new.block', [('plain.bst', 140, 4, 140, 14)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 141, 2, 141, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'new.block.checka', $bst__newZoblockZochecka, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 136, 1, 137, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'new.block.checka', [('plain.bst', 137, 10, 137, 26)]))], [('plain.bst', 137, 9, 137, 27)]), StyString('BLOCK', [(StyString('LITERAL', 'empty$', [('plain.bst', 138, 2, 138, 8)]), StyString('REFERENCE', 'skip$', [('plain.bst', 139, 4, 139, 10)]), StyString('REFERENCE', 'new.block', [('plain.bst', 140, 4, 140, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 141, 2, 141, 5)]))], [('plain.bst', 137, 28, 142, 2)]))], [('plain.bst', 136, 1, 142, 2)])); ; 
  my $bst__newZoblockZocheckb = sub { 
    my ($context, $config) = @_; 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 145, 2, 145, 8)])); 
    builtinSwap($context, $config, StyString('LITERAL', 'swap$', [('plain.bst', 146, 2, 146, 7)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 146, 8, 146, 14)])); 
    $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 147, 2, 147, 5)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 148, 4, 148, 10)])); 
    pushFunction($context, $config, $bst__newZoblock, StyString('REFERENCE', 'new.block', [('plain.bst', 149, 4, 149, 14)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 150, 2, 150, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'new.block.checkb', $bst__newZoblockZocheckb, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 143, 1, 144, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'new.block.checkb', [('plain.bst', 144, 10, 144, 26)]))], [('plain.bst', 144, 9, 144, 27)]), StyString('BLOCK', [(StyString('LITERAL', 'empty$', [('plain.bst', 145, 2, 145, 8)]), StyString('LITERAL', 'swap$', [('plain.bst', 146, 2, 146, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 146, 8, 146, 14)]), StyString('LITERAL', 'and', [('plain.bst', 147, 2, 147, 5)]), StyString('REFERENCE', 'skip$', [('plain.bst', 148, 4, 148, 10)]), StyString('REFERENCE', 'new.block', [('plain.bst', 149, 4, 149, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 150, 2, 150, 5)]))], [('plain.bst', 144, 28, 151, 2)]))], [('plain.bst', 143, 1, 151, 2)])); ; 
  my $bst__newZosentenceZochecka = sub { 
    my ($context, $config) = @_; 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 154, 2, 154, 8)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 155, 4, 155, 10)])); 
    pushFunction($context, $config, $bst__newZosentence, StyString('REFERENCE', 'new.sentence', [('plain.bst', 156, 4, 156, 17)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 157, 2, 157, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'new.sentence.checka', $bst__newZosentenceZochecka, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 152, 1, 153, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'new.sentence.checka', [('plain.bst', 153, 10, 153, 29)]))], [('plain.bst', 153, 9, 153, 30)]), StyString('BLOCK', [(StyString('LITERAL', 'empty$', [('plain.bst', 154, 2, 154, 8)]), StyString('REFERENCE', 'skip$', [('plain.bst', 155, 4, 155, 10)]), StyString('REFERENCE', 'new.sentence', [('plain.bst', 156, 4, 156, 17)]), StyString('LITERAL', 'if$', [('plain.bst', 157, 2, 157, 5)]))], [('plain.bst', 153, 31, 158, 2)]))], [('plain.bst', 152, 1, 158, 2)])); ; 
  my $bst__newZosentenceZocheckb = sub { 
    my ($context, $config) = @_; 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 161, 2, 161, 8)])); 
    builtinSwap($context, $config, StyString('LITERAL', 'swap$', [('plain.bst', 162, 2, 162, 7)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 162, 8, 162, 14)])); 
    $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 163, 2, 163, 5)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 164, 4, 164, 10)])); 
    pushFunction($context, $config, $bst__newZosentence, StyString('REFERENCE', 'new.sentence', [('plain.bst', 165, 4, 165, 17)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 166, 2, 166, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'new.sentence.checkb', $bst__newZosentenceZocheckb, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 159, 1, 160, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 160, 10, 160, 29)]))], [('plain.bst', 160, 9, 160, 30)]), StyString('BLOCK', [(StyString('LITERAL', 'empty$', [('plain.bst', 161, 2, 161, 8)]), StyString('LITERAL', 'swap$', [('plain.bst', 162, 2, 162, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 162, 8, 162, 14)]), StyString('LITERAL', 'and', [('plain.bst', 163, 2, 163, 5)]), StyString('REFERENCE', 'skip$', [('plain.bst', 164, 4, 164, 10)]), StyString('REFERENCE', 'new.sentence', [('plain.bst', 165, 4, 165, 17)]), StyString('LITERAL', 'if$', [('plain.bst', 166, 2, 166, 5)]))], [('plain.bst', 160, 31, 167, 2)]))], [('plain.bst', 159, 1, 167, 2)])); ; 
  my $bst__fieldZoorZonull = sub { 
    my ($context, $config) = @_; 
    builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 170, 2, 170, 12)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 170, 13, 170, 19)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinPop($context, $config, StyString('LITERAL', 'pop$', [('plain.bst', 171, 6, 171, 10)])); 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 171, 11, 171, 13)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 171, 6, 171, 10)]), StyString('QUOTE', '', [('plain.bst', 171, 11, 171, 13)]))], [('plain.bst', 171, 4, 171, 15)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 172, 4, 172, 10)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 173, 2, 173, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'field.or.null', $bst__fieldZoorZonull, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 168, 1, 169, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'field.or.null', [('plain.bst', 169, 10, 169, 23)]))], [('plain.bst', 169, 9, 169, 24)]), StyString('BLOCK', [(StyString('LITERAL', 'duplicate$', [('plain.bst', 170, 2, 170, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 170, 13, 170, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 171, 6, 171, 10)]), StyString('QUOTE', '', [('plain.bst', 171, 11, 171, 13)]))], [('plain.bst', 171, 4, 171, 15)]), StyString('REFERENCE', 'skip$', [('plain.bst', 172, 4, 172, 10)]), StyString('LITERAL', 'if$', [('plain.bst', 173, 2, 173, 5)]))], [('plain.bst', 169, 25, 174, 2)]))], [('plain.bst', 168, 1, 174, 2)])); ; 
  my $bst__emphasizze = sub { 
    my ($context, $config) = @_; 
    builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 177, 2, 177, 12)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 177, 13, 177, 19)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinPop($context, $config, StyString('LITERAL', 'pop$', [('plain.bst', 178, 6, 178, 10)])); 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 178, 11, 178, 13)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 178, 6, 178, 10)]), StyString('QUOTE', '', [('plain.bst', 178, 11, 178, 13)]))], [('plain.bst', 178, 4, 178, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '{\\em ', StyString('QUOTE', '{\\em ', [('plain.bst', 179, 6, 179, 13)])); 
      builtinSwap($context, $config, StyString('LITERAL', 'swap$', [('plain.bst', 179, 14, 179, 19)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 179, 20, 179, 21)])); 
      pushString($context, $config, '}', StyString('QUOTE', '}', [('plain.bst', 179, 22, 179, 25)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 179, 26, 179, 27)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [('plain.bst', 179, 6, 179, 13)]), StyString('LITERAL', 'swap$', [('plain.bst', 179, 14, 179, 19)]), StyString('LITERAL', '*', [('plain.bst', 179, 20, 179, 21)]), StyString('QUOTE', '}', [('plain.bst', 179, 22, 179, 25)]), StyString('LITERAL', '*', [('plain.bst', 179, 26, 179, 27)]))], [('plain.bst', 179, 4, 179, 29)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 180, 2, 180, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'emphasize', $bst__emphasizze, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 175, 1, 176, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'emphasize', [('plain.bst', 176, 10, 176, 19)]))], [('plain.bst', 176, 9, 176, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'duplicate$', [('plain.bst', 177, 2, 177, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 177, 13, 177, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 178, 6, 178, 10)]), StyString('QUOTE', '', [('plain.bst', 178, 11, 178, 13)]))], [('plain.bst', 178, 4, 178, 15)]), StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [('plain.bst', 179, 6, 179, 13)]), StyString('LITERAL', 'swap$', [('plain.bst', 179, 14, 179, 19)]), StyString('LITERAL', '*', [('plain.bst', 179, 20, 179, 21)]), StyString('QUOTE', '}', [('plain.bst', 179, 22, 179, 25)]), StyString('LITERAL', '*', [('plain.bst', 179, 26, 179, 27)]))], [('plain.bst', 179, 4, 179, 29)]), StyString('LITERAL', 'if$', [('plain.bst', 180, 2, 180, 5)]))], [('plain.bst', 176, 21, 181, 2)]))], [('plain.bst', 175, 1, 181, 2)])); ; 
  defineGlobalInteger($context, $config, 'nameptr', StyString('LITERAL', 'nameptr', [('plain.bst', 183, 11, 183, 18)])); 
  defineGlobalInteger($context, $config, 'namesleft', StyString('LITERAL', 'namesleft', [('plain.bst', 183, 19, 183, 28)])); 
  defineGlobalInteger($context, $config, 'numnames', StyString('LITERAL', 'numnames', [('plain.bst', 183, 29, 183, 37)])); 
  my $bst__formatZonames = sub { 
    my ($context, $config) = @_; 
    pushGlobalString($context, $config, 's', StyString('REFERENCE', 's', [('plain.bst', 186, 2, 186, 4)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 186, 5, 186, 7)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 187, 2, 187, 4)])); 
    pushGlobalInteger($context, $config, 'nameptr', StyString('REFERENCE', 'nameptr', [('plain.bst', 187, 5, 187, 13)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 187, 14, 187, 16)])); 
    lookupGlobalString($context, $config, 's', StyString('LITERAL', 's', [('plain.bst', 188, 2, 188, 3)])); 
    builtinNumNames($context, $config, StyString('LITERAL', 'num.names$', [('plain.bst', 188, 4, 188, 14)])); 
    pushGlobalInteger($context, $config, 'numnames', StyString('REFERENCE', 'numnames', [('plain.bst', 188, 15, 188, 24)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 188, 25, 188, 27)])); 
    lookupGlobalInteger($context, $config, 'numnames', StyString('LITERAL', 'numnames', [('plain.bst', 189, 2, 189, 10)])); 
    pushGlobalInteger($context, $config, 'namesleft', StyString('REFERENCE', 'namesleft', [('plain.bst', 189, 11, 189, 21)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 189, 22, 189, 24)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalInteger($context, $config, 'namesleft', StyString('LITERAL', 'namesleft', [('plain.bst', 190, 6, 190, 15)])); 
      pushInteger($context, $config, 0, StyString('NUMBER', 0, [('plain.bst', 190, 16, 190, 18)])); 
      builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 190, 19, 190, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [('plain.bst', 190, 6, 190, 15)]), StyString('NUMBER', 0, [('plain.bst', 190, 16, 190, 18)]), StyString('LITERAL', '>', [('plain.bst', 190, 19, 190, 20)]))], [('plain.bst', 190, 4, 190, 22)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalString($context, $config, 's', StyString('LITERAL', 's', [('plain.bst', 191, 6, 191, 7)])); 
      lookupGlobalInteger($context, $config, 'nameptr', StyString('LITERAL', 'nameptr', [('plain.bst', 191, 8, 191, 15)])); 
      pushString($context, $config, '{ff~}{vv~}{ll}{, jj}', StyString('QUOTE', '{ff~}{vv~}{ll}{, jj}', [('plain.bst', 191, 16, 191, 38)])); 
      builtinFormatName($context, $config, StyString('LITERAL', 'format.name$', [('plain.bst', 191, 39, 191, 51)])); 
      pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 191, 52, 191, 54)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 191, 55, 191, 57)])); 
      lookupGlobalInteger($context, $config, 'nameptr', StyString('LITERAL', 'nameptr', [('plain.bst', 192, 6, 192, 13)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 192, 14, 192, 16)])); 
      builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 192, 17, 192, 18)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupGlobalInteger($context, $config, 'namesleft', StyString('LITERAL', 'namesleft', [('plain.bst', 193, 10, 193, 19)])); 
        pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 193, 20, 193, 22)])); 
        builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 193, 23, 193, 24)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, ', ', StyString('QUOTE', ', ', [('plain.bst', 194, 14, 194, 18)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 194, 19, 194, 20)])); 
          lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 194, 21, 194, 22)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 194, 23, 194, 24)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 194, 14, 194, 18)]), StyString('LITERAL', '*', [('plain.bst', 194, 19, 194, 20)]), StyString('LITERAL', 't', [('plain.bst', 194, 21, 194, 22)]), StyString('LITERAL', '*', [('plain.bst', 194, 23, 194, 24)]))], [('plain.bst', 194, 12, 194, 26)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          lookupGlobalInteger($context, $config, 'numnames', StyString('LITERAL', 'numnames', [('plain.bst', 195, 14, 195, 22)])); 
          pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 195, 23, 195, 25)])); 
          builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 195, 26, 195, 27)])); 
          pushFunction($context, $config, sub { 
            my ($context, $config) = @_; 
            pushString($context, $config, ',', StyString('QUOTE', ',', [('plain.bst', 196, 18, 196, 21)])); 
            builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 196, 22, 196, 23)])); 
          }, StyString('BLOCK', [(StyString('QUOTE', ',', [('plain.bst', 196, 18, 196, 21)]), StyString('LITERAL', '*', [('plain.bst', 196, 22, 196, 23)]))], [('plain.bst', 196, 16, 196, 25)])); 
          pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 197, 16, 197, 22)])); 
          builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 198, 14, 198, 17)])); 
          lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 199, 14, 199, 15)])); 
          pushString($context, $config, 'others', StyString('QUOTE', 'others', [('plain.bst', 199, 16, 199, 24)])); 
          builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 199, 25, 199, 26)])); 
          pushFunction($context, $config, sub { 
            my ($context, $config) = @_; 
            pushString($context, $config, ' et~al.', StyString('QUOTE', ' et~al.', [('plain.bst', 200, 18, 200, 27)])); 
            builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 200, 28, 200, 29)])); 
          }, StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 200, 18, 200, 27)]), StyString('LITERAL', '*', [('plain.bst', 200, 28, 200, 29)]))], [('plain.bst', 200, 16, 200, 31)])); 
          pushFunction($context, $config, sub { 
            my ($context, $config) = @_; 
            pushString($context, $config, ' and ', StyString('QUOTE', ' and ', [('plain.bst', 201, 18, 201, 25)])); 
            builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 201, 26, 201, 27)])); 
            lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 201, 28, 201, 29)])); 
            builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 201, 30, 201, 31)])); 
          }, StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 201, 18, 201, 25)]), StyString('LITERAL', '*', [('plain.bst', 201, 26, 201, 27)]), StyString('LITERAL', 't', [('plain.bst', 201, 28, 201, 29)]), StyString('LITERAL', '*', [('plain.bst', 201, 30, 201, 31)]))], [('plain.bst', 201, 16, 201, 33)])); 
          builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 202, 14, 202, 17)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'numnames', [('plain.bst', 195, 14, 195, 22)]), StyString('NUMBER', 2, [('plain.bst', 195, 23, 195, 25)]), StyString('LITERAL', '>', [('plain.bst', 195, 26, 195, 27)]), StyString('BLOCK', [(StyString('QUOTE', ',', [('plain.bst', 196, 18, 196, 21)]), StyString('LITERAL', '*', [('plain.bst', 196, 22, 196, 23)]))], [('plain.bst', 196, 16, 196, 25)]), StyString('REFERENCE', 'skip$', [('plain.bst', 197, 16, 197, 22)]), StyString('LITERAL', 'if$', [('plain.bst', 198, 14, 198, 17)]), StyString('LITERAL', 't', [('plain.bst', 199, 14, 199, 15)]), StyString('QUOTE', 'others', [('plain.bst', 199, 16, 199, 24)]), StyString('LITERAL', '=', [('plain.bst', 199, 25, 199, 26)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 200, 18, 200, 27)]), StyString('LITERAL', '*', [('plain.bst', 200, 28, 200, 29)]))], [('plain.bst', 200, 16, 200, 31)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 201, 18, 201, 25)]), StyString('LITERAL', '*', [('plain.bst', 201, 26, 201, 27)]), StyString('LITERAL', 't', [('plain.bst', 201, 28, 201, 29)]), StyString('LITERAL', '*', [('plain.bst', 201, 30, 201, 31)]))], [('plain.bst', 201, 16, 201, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 202, 14, 202, 17)]))], [('plain.bst', 195, 12, 203, 13)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 204, 10, 204, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [('plain.bst', 193, 10, 193, 19)]), StyString('NUMBER', 1, [('plain.bst', 193, 20, 193, 22)]), StyString('LITERAL', '>', [('plain.bst', 193, 23, 193, 24)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 194, 14, 194, 18)]), StyString('LITERAL', '*', [('plain.bst', 194, 19, 194, 20)]), StyString('LITERAL', 't', [('plain.bst', 194, 21, 194, 22)]), StyString('LITERAL', '*', [('plain.bst', 194, 23, 194, 24)]))], [('plain.bst', 194, 12, 194, 26)]), StyString('BLOCK', [(StyString('LITERAL', 'numnames', [('plain.bst', 195, 14, 195, 22)]), StyString('NUMBER', 2, [('plain.bst', 195, 23, 195, 25)]), StyString('LITERAL', '>', [('plain.bst', 195, 26, 195, 27)]), StyString('BLOCK', [(StyString('QUOTE', ',', [('plain.bst', 196, 18, 196, 21)]), StyString('LITERAL', '*', [('plain.bst', 196, 22, 196, 23)]))], [('plain.bst', 196, 16, 196, 25)]), StyString('REFERENCE', 'skip$', [('plain.bst', 197, 16, 197, 22)]), StyString('LITERAL', 'if$', [('plain.bst', 198, 14, 198, 17)]), StyString('LITERAL', 't', [('plain.bst', 199, 14, 199, 15)]), StyString('QUOTE', 'others', [('plain.bst', 199, 16, 199, 24)]), StyString('LITERAL', '=', [('plain.bst', 199, 25, 199, 26)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 200, 18, 200, 27)]), StyString('LITERAL', '*', [('plain.bst', 200, 28, 200, 29)]))], [('plain.bst', 200, 16, 200, 31)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 201, 18, 201, 25)]), StyString('LITERAL', '*', [('plain.bst', 201, 26, 201, 27)]), StyString('LITERAL', 't', [('plain.bst', 201, 28, 201, 29)]), StyString('LITERAL', '*', [('plain.bst', 201, 30, 201, 31)]))], [('plain.bst', 201, 16, 201, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 202, 14, 202, 17)]))], [('plain.bst', 195, 12, 203, 13)]), StyString('LITERAL', 'if$', [('plain.bst', 204, 10, 204, 13)]))], [('plain.bst', 193, 8, 205, 9)])); 
      pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 206, 8, 206, 10)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 207, 6, 207, 9)])); 
      lookupGlobalInteger($context, $config, 'nameptr', StyString('LITERAL', 'nameptr', [('plain.bst', 208, 6, 208, 13)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 208, 14, 208, 16)])); 
      builtinZp($context, $config, StyString('LITERAL', '+', [('plain.bst', 208, 17, 208, 18)])); 
      pushGlobalInteger($context, $config, 'nameptr', StyString('REFERENCE', 'nameptr', [('plain.bst', 208, 19, 208, 27)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 208, 28, 208, 30)])); 
      lookupGlobalInteger($context, $config, 'namesleft', StyString('LITERAL', 'namesleft', [('plain.bst', 209, 6, 209, 15)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 209, 16, 209, 18)])); 
      builtinZm($context, $config, StyString('LITERAL', '-', [('plain.bst', 209, 19, 209, 20)])); 
      pushGlobalInteger($context, $config, 'namesleft', StyString('REFERENCE', 'namesleft', [('plain.bst', 209, 21, 209, 31)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 209, 32, 209, 34)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 's', [('plain.bst', 191, 6, 191, 7)]), StyString('LITERAL', 'nameptr', [('plain.bst', 191, 8, 191, 15)]), StyString('QUOTE', '{ff~}{vv~}{ll}{, jj}', [('plain.bst', 191, 16, 191, 38)]), StyString('LITERAL', 'format.name$', [('plain.bst', 191, 39, 191, 51)]), StyString('REFERENCE', 't', [('plain.bst', 191, 52, 191, 54)]), StyString('LITERAL', ':=', [('plain.bst', 191, 55, 191, 57)]), StyString('LITERAL', 'nameptr', [('plain.bst', 192, 6, 192, 13)]), StyString('NUMBER', 1, [('plain.bst', 192, 14, 192, 16)]), StyString('LITERAL', '>', [('plain.bst', 192, 17, 192, 18)]), StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [('plain.bst', 193, 10, 193, 19)]), StyString('NUMBER', 1, [('plain.bst', 193, 20, 193, 22)]), StyString('LITERAL', '>', [('plain.bst', 193, 23, 193, 24)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 194, 14, 194, 18)]), StyString('LITERAL', '*', [('plain.bst', 194, 19, 194, 20)]), StyString('LITERAL', 't', [('plain.bst', 194, 21, 194, 22)]), StyString('LITERAL', '*', [('plain.bst', 194, 23, 194, 24)]))], [('plain.bst', 194, 12, 194, 26)]), StyString('BLOCK', [(StyString('LITERAL', 'numnames', [('plain.bst', 195, 14, 195, 22)]), StyString('NUMBER', 2, [('plain.bst', 195, 23, 195, 25)]), StyString('LITERAL', '>', [('plain.bst', 195, 26, 195, 27)]), StyString('BLOCK', [(StyString('QUOTE', ',', [('plain.bst', 196, 18, 196, 21)]), StyString('LITERAL', '*', [('plain.bst', 196, 22, 196, 23)]))], [('plain.bst', 196, 16, 196, 25)]), StyString('REFERENCE', 'skip$', [('plain.bst', 197, 16, 197, 22)]), StyString('LITERAL', 'if$', [('plain.bst', 198, 14, 198, 17)]), StyString('LITERAL', 't', [('plain.bst', 199, 14, 199, 15)]), StyString('QUOTE', 'others', [('plain.bst', 199, 16, 199, 24)]), StyString('LITERAL', '=', [('plain.bst', 199, 25, 199, 26)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 200, 18, 200, 27)]), StyString('LITERAL', '*', [('plain.bst', 200, 28, 200, 29)]))], [('plain.bst', 200, 16, 200, 31)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 201, 18, 201, 25)]), StyString('LITERAL', '*', [('plain.bst', 201, 26, 201, 27)]), StyString('LITERAL', 't', [('plain.bst', 201, 28, 201, 29)]), StyString('LITERAL', '*', [('plain.bst', 201, 30, 201, 31)]))], [('plain.bst', 201, 16, 201, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 202, 14, 202, 17)]))], [('plain.bst', 195, 12, 203, 13)]), StyString('LITERAL', 'if$', [('plain.bst', 204, 10, 204, 13)]))], [('plain.bst', 193, 8, 205, 9)]), StyString('REFERENCE', 't', [('plain.bst', 206, 8, 206, 10)]), StyString('LITERAL', 'if$', [('plain.bst', 207, 6, 207, 9)]), StyString('LITERAL', 'nameptr', [('plain.bst', 208, 6, 208, 13)]), StyString('NUMBER', 1, [('plain.bst', 208, 14, 208, 16)]), StyString('LITERAL', '+', [('plain.bst', 208, 17, 208, 18)]), StyString('REFERENCE', 'nameptr', [('plain.bst', 208, 19, 208, 27)]), StyString('LITERAL', ':=', [('plain.bst', 208, 28, 208, 30)]), StyString('LITERAL', 'namesleft', [('plain.bst', 209, 6, 209, 15)]), StyString('NUMBER', 1, [('plain.bst', 209, 16, 209, 18)]), StyString('LITERAL', '-', [('plain.bst', 209, 19, 209, 20)]), StyString('REFERENCE', 'namesleft', [('plain.bst', 209, 21, 209, 31)]), StyString('LITERAL', ':=', [('plain.bst', 209, 32, 209, 34)]))], [('plain.bst', 191, 4, 210, 5)])); 
    builtinWhile($context, $config, StyString('LITERAL', 'while$', [('plain.bst', 211, 2, 211, 8)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.names', $bst__formatZonames, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 184, 1, 185, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.names', [('plain.bst', 185, 10, 185, 22)]))], [('plain.bst', 185, 9, 185, 23)]), StyString('BLOCK', [(StyString('REFERENCE', 's', [('plain.bst', 186, 2, 186, 4)]), StyString('LITERAL', ':=', [('plain.bst', 186, 5, 186, 7)]), StyString('NUMBER', 1, [('plain.bst', 187, 2, 187, 4)]), StyString('REFERENCE', 'nameptr', [('plain.bst', 187, 5, 187, 13)]), StyString('LITERAL', ':=', [('plain.bst', 187, 14, 187, 16)]), StyString('LITERAL', 's', [('plain.bst', 188, 2, 188, 3)]), StyString('LITERAL', 'num.names$', [('plain.bst', 188, 4, 188, 14)]), StyString('REFERENCE', 'numnames', [('plain.bst', 188, 15, 188, 24)]), StyString('LITERAL', ':=', [('plain.bst', 188, 25, 188, 27)]), StyString('LITERAL', 'numnames', [('plain.bst', 189, 2, 189, 10)]), StyString('REFERENCE', 'namesleft', [('plain.bst', 189, 11, 189, 21)]), StyString('LITERAL', ':=', [('plain.bst', 189, 22, 189, 24)]), StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [('plain.bst', 190, 6, 190, 15)]), StyString('NUMBER', 0, [('plain.bst', 190, 16, 190, 18)]), StyString('LITERAL', '>', [('plain.bst', 190, 19, 190, 20)]))], [('plain.bst', 190, 4, 190, 22)]), StyString('BLOCK', [(StyString('LITERAL', 's', [('plain.bst', 191, 6, 191, 7)]), StyString('LITERAL', 'nameptr', [('plain.bst', 191, 8, 191, 15)]), StyString('QUOTE', '{ff~}{vv~}{ll}{, jj}', [('plain.bst', 191, 16, 191, 38)]), StyString('LITERAL', 'format.name$', [('plain.bst', 191, 39, 191, 51)]), StyString('REFERENCE', 't', [('plain.bst', 191, 52, 191, 54)]), StyString('LITERAL', ':=', [('plain.bst', 191, 55, 191, 57)]), StyString('LITERAL', 'nameptr', [('plain.bst', 192, 6, 192, 13)]), StyString('NUMBER', 1, [('plain.bst', 192, 14, 192, 16)]), StyString('LITERAL', '>', [('plain.bst', 192, 17, 192, 18)]), StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [('plain.bst', 193, 10, 193, 19)]), StyString('NUMBER', 1, [('plain.bst', 193, 20, 193, 22)]), StyString('LITERAL', '>', [('plain.bst', 193, 23, 193, 24)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 194, 14, 194, 18)]), StyString('LITERAL', '*', [('plain.bst', 194, 19, 194, 20)]), StyString('LITERAL', 't', [('plain.bst', 194, 21, 194, 22)]), StyString('LITERAL', '*', [('plain.bst', 194, 23, 194, 24)]))], [('plain.bst', 194, 12, 194, 26)]), StyString('BLOCK', [(StyString('LITERAL', 'numnames', [('plain.bst', 195, 14, 195, 22)]), StyString('NUMBER', 2, [('plain.bst', 195, 23, 195, 25)]), StyString('LITERAL', '>', [('plain.bst', 195, 26, 195, 27)]), StyString('BLOCK', [(StyString('QUOTE', ',', [('plain.bst', 196, 18, 196, 21)]), StyString('LITERAL', '*', [('plain.bst', 196, 22, 196, 23)]))], [('plain.bst', 196, 16, 196, 25)]), StyString('REFERENCE', 'skip$', [('plain.bst', 197, 16, 197, 22)]), StyString('LITERAL', 'if$', [('plain.bst', 198, 14, 198, 17)]), StyString('LITERAL', 't', [('plain.bst', 199, 14, 199, 15)]), StyString('QUOTE', 'others', [('plain.bst', 199, 16, 199, 24)]), StyString('LITERAL', '=', [('plain.bst', 199, 25, 199, 26)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 200, 18, 200, 27)]), StyString('LITERAL', '*', [('plain.bst', 200, 28, 200, 29)]))], [('plain.bst', 200, 16, 200, 31)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 201, 18, 201, 25)]), StyString('LITERAL', '*', [('plain.bst', 201, 26, 201, 27)]), StyString('LITERAL', 't', [('plain.bst', 201, 28, 201, 29)]), StyString('LITERAL', '*', [('plain.bst', 201, 30, 201, 31)]))], [('plain.bst', 201, 16, 201, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 202, 14, 202, 17)]))], [('plain.bst', 195, 12, 203, 13)]), StyString('LITERAL', 'if$', [('plain.bst', 204, 10, 204, 13)]))], [('plain.bst', 193, 8, 205, 9)]), StyString('REFERENCE', 't', [('plain.bst', 206, 8, 206, 10)]), StyString('LITERAL', 'if$', [('plain.bst', 207, 6, 207, 9)]), StyString('LITERAL', 'nameptr', [('plain.bst', 208, 6, 208, 13)]), StyString('NUMBER', 1, [('plain.bst', 208, 14, 208, 16)]), StyString('LITERAL', '+', [('plain.bst', 208, 17, 208, 18)]), StyString('REFERENCE', 'nameptr', [('plain.bst', 208, 19, 208, 27)]), StyString('LITERAL', ':=', [('plain.bst', 208, 28, 208, 30)]), StyString('LITERAL', 'namesleft', [('plain.bst', 209, 6, 209, 15)]), StyString('NUMBER', 1, [('plain.bst', 209, 16, 209, 18)]), StyString('LITERAL', '-', [('plain.bst', 209, 19, 209, 20)]), StyString('REFERENCE', 'namesleft', [('plain.bst', 209, 21, 209, 31)]), StyString('LITERAL', ':=', [('plain.bst', 209, 32, 209, 34)]))], [('plain.bst', 191, 4, 210, 5)]), StyString('LITERAL', 'while$', [('plain.bst', 211, 2, 211, 8)]))], [('plain.bst', 185, 24, 212, 2)]))], [('plain.bst', 184, 1, 212, 2)])); ; 
  my $bst__formatZoauthors = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 215, 2, 215, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 215, 9, 215, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 216, 6, 216, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 216, 6, 216, 8)]))], [('plain.bst', 216, 4, 216, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 217, 6, 217, 12)])); 
      $bst__formatZonames->($context, $config, StyString('LITERAL', 'format.names', [('plain.bst', 217, 13, 217, 25)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 217, 6, 217, 12)]), StyString('LITERAL', 'format.names', [('plain.bst', 217, 13, 217, 25)]))], [('plain.bst', 217, 4, 217, 27)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 218, 2, 218, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.authors', $bst__formatZoauthors, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 213, 1, 214, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [('plain.bst', 214, 10, 214, 24)]))], [('plain.bst', 214, 9, 214, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 215, 2, 215, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 215, 9, 215, 15)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 216, 6, 216, 8)]))], [('plain.bst', 216, 4, 216, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 217, 6, 217, 12)]), StyString('LITERAL', 'format.names', [('plain.bst', 217, 13, 217, 25)]))], [('plain.bst', 217, 4, 217, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 218, 2, 218, 5)]))], [('plain.bst', 214, 26, 219, 2)]))], [('plain.bst', 213, 1, 219, 2)])); ; 
  my $bst__formatZoeditors = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 222, 2, 222, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 222, 9, 222, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 223, 6, 223, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 223, 6, 223, 8)]))], [('plain.bst', 223, 4, 223, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 224, 6, 224, 12)])); 
      $bst__formatZonames->($context, $config, StyString('LITERAL', 'format.names', [('plain.bst', 224, 13, 224, 25)])); 
      lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 225, 6, 225, 12)])); 
      builtinNumNames($context, $config, StyString('LITERAL', 'num.names$', [('plain.bst', 225, 13, 225, 23)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 225, 24, 225, 26)])); 
      builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 225, 27, 225, 28)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, ', editors', StyString('QUOTE', ', editors', [('plain.bst', 226, 10, 226, 21)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 226, 22, 226, 23)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ', editors', [('plain.bst', 226, 10, 226, 21)]), StyString('LITERAL', '*', [('plain.bst', 226, 22, 226, 23)]))], [('plain.bst', 226, 8, 226, 25)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, ', editor', StyString('QUOTE', ', editor', [('plain.bst', 227, 10, 227, 20)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 227, 21, 227, 22)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ', editor', [('plain.bst', 227, 10, 227, 20)]), StyString('LITERAL', '*', [('plain.bst', 227, 21, 227, 22)]))], [('plain.bst', 227, 8, 227, 24)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 228, 6, 228, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 224, 6, 224, 12)]), StyString('LITERAL', 'format.names', [('plain.bst', 224, 13, 224, 25)]), StyString('LITERAL', 'editor', [('plain.bst', 225, 6, 225, 12)]), StyString('LITERAL', 'num.names$', [('plain.bst', 225, 13, 225, 23)]), StyString('NUMBER', 1, [('plain.bst', 225, 24, 225, 26)]), StyString('LITERAL', '>', [('plain.bst', 225, 27, 225, 28)]), StyString('BLOCK', [(StyString('QUOTE', ', editors', [('plain.bst', 226, 10, 226, 21)]), StyString('LITERAL', '*', [('plain.bst', 226, 22, 226, 23)]))], [('plain.bst', 226, 8, 226, 25)]), StyString('BLOCK', [(StyString('QUOTE', ', editor', [('plain.bst', 227, 10, 227, 20)]), StyString('LITERAL', '*', [('plain.bst', 227, 21, 227, 22)]))], [('plain.bst', 227, 8, 227, 24)]), StyString('LITERAL', 'if$', [('plain.bst', 228, 6, 228, 9)]))], [('plain.bst', 224, 4, 229, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 230, 2, 230, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.editors', $bst__formatZoeditors, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 220, 1, 221, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [('plain.bst', 221, 10, 221, 24)]))], [('plain.bst', 221, 9, 221, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 222, 2, 222, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 222, 9, 222, 15)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 223, 6, 223, 8)]))], [('plain.bst', 223, 4, 223, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 224, 6, 224, 12)]), StyString('LITERAL', 'format.names', [('plain.bst', 224, 13, 224, 25)]), StyString('LITERAL', 'editor', [('plain.bst', 225, 6, 225, 12)]), StyString('LITERAL', 'num.names$', [('plain.bst', 225, 13, 225, 23)]), StyString('NUMBER', 1, [('plain.bst', 225, 24, 225, 26)]), StyString('LITERAL', '>', [('plain.bst', 225, 27, 225, 28)]), StyString('BLOCK', [(StyString('QUOTE', ', editors', [('plain.bst', 226, 10, 226, 21)]), StyString('LITERAL', '*', [('plain.bst', 226, 22, 226, 23)]))], [('plain.bst', 226, 8, 226, 25)]), StyString('BLOCK', [(StyString('QUOTE', ', editor', [('plain.bst', 227, 10, 227, 20)]), StyString('LITERAL', '*', [('plain.bst', 227, 21, 227, 22)]))], [('plain.bst', 227, 8, 227, 24)]), StyString('LITERAL', 'if$', [('plain.bst', 228, 6, 228, 9)]))], [('plain.bst', 224, 4, 229, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 230, 2, 230, 5)]))], [('plain.bst', 221, 26, 231, 2)]))], [('plain.bst', 220, 1, 231, 2)])); ; 
  my $bst__formatZotitle = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'title', StyString('LITERAL', 'title', [('plain.bst', 234, 2, 234, 7)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 234, 8, 234, 14)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 235, 6, 235, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 235, 6, 235, 8)]))], [('plain.bst', 235, 4, 235, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'title', StyString('LITERAL', 'title', [('plain.bst', 236, 6, 236, 11)])); 
      pushString($context, $config, 't', StyString('QUOTE', 't', [('plain.bst', 236, 12, 236, 15)])); 
      builtinChangeCase($context, $config, StyString('LITERAL', 'change.case$', [('plain.bst', 236, 16, 236, 28)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'title', [('plain.bst', 236, 6, 236, 11)]), StyString('QUOTE', 't', [('plain.bst', 236, 12, 236, 15)]), StyString('LITERAL', 'change.case$', [('plain.bst', 236, 16, 236, 28)]))], [('plain.bst', 236, 4, 236, 30)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 237, 2, 237, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.title', $bst__formatZotitle, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 232, 1, 233, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.title', [('plain.bst', 233, 10, 233, 22)]))], [('plain.bst', 233, 9, 233, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'title', [('plain.bst', 234, 2, 234, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 234, 8, 234, 14)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 235, 6, 235, 8)]))], [('plain.bst', 235, 4, 235, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'title', [('plain.bst', 236, 6, 236, 11)]), StyString('QUOTE', 't', [('plain.bst', 236, 12, 236, 15)]), StyString('LITERAL', 'change.case$', [('plain.bst', 236, 16, 236, 28)]))], [('plain.bst', 236, 4, 236, 30)]), StyString('LITERAL', 'if$', [('plain.bst', 237, 2, 237, 5)]))], [('plain.bst', 233, 24, 238, 2)]))], [('plain.bst', 232, 1, 238, 2)])); ; 
  my $bst__nZodashify = sub { 
    my ($context, $config) = @_; 
    pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 241, 2, 241, 4)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 241, 5, 241, 7)])); 
    pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 242, 2, 242, 4)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 243, 6, 243, 7)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 243, 8, 243, 14)])); 
      $bst__not->($context, $config, StyString('LITERAL', 'not', [('plain.bst', 243, 15, 243, 18)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 243, 6, 243, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 243, 8, 243, 14)]), StyString('LITERAL', 'not', [('plain.bst', 243, 15, 243, 18)]))], [('plain.bst', 243, 4, 243, 20)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 244, 6, 244, 7)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 244, 8, 244, 10)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 244, 11, 244, 13)])); 
      builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 244, 14, 244, 24)])); 
      pushString($context, $config, '-', StyString('QUOTE', '-', [('plain.bst', 244, 25, 244, 28)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 244, 29, 244, 30)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 245, 10, 245, 11)])); 
        pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 245, 12, 245, 14)])); 
        pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 245, 15, 245, 17)])); 
        builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 245, 18, 245, 28)])); 
        pushString($context, $config, '--', StyString('QUOTE', '--', [('plain.bst', 245, 29, 245, 33)])); 
        builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 245, 34, 245, 35)])); 
        $bst__not->($context, $config, StyString('LITERAL', 'not', [('plain.bst', 245, 36, 245, 39)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, '--', StyString('QUOTE', '--', [('plain.bst', 246, 14, 246, 18)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 246, 19, 246, 20)])); 
          lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 247, 14, 247, 15)])); 
          pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 247, 16, 247, 18)])); 
          lookupGlobalInteger($context, $config, 'global.max$', StyString('LITERAL', 'global.max$', [('plain.bst', 247, 19, 247, 30)])); 
          builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 247, 31, 247, 41)])); 
          pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 247, 42, 247, 44)])); 
          builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 247, 45, 247, 47)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', '--', [('plain.bst', 246, 14, 246, 18)]), StyString('LITERAL', '*', [('plain.bst', 246, 19, 246, 20)]), StyString('LITERAL', 't', [('plain.bst', 247, 14, 247, 15)]), StyString('NUMBER', 2, [('plain.bst', 247, 16, 247, 18)]), StyString('LITERAL', 'global.max$', [('plain.bst', 247, 19, 247, 30)]), StyString('LITERAL', 'substring$', [('plain.bst', 247, 31, 247, 41)]), StyString('REFERENCE', 't', [('plain.bst', 247, 42, 247, 44)]), StyString('LITERAL', ':=', [('plain.bst', 247, 45, 247, 47)]))], [('plain.bst', 246, 12, 248, 13)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushFunction($context, $config, sub { 
            my ($context, $config) = @_; 
            lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 249, 18, 249, 19)])); 
            pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 249, 20, 249, 22)])); 
            pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 249, 23, 249, 25)])); 
            builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 249, 26, 249, 36)])); 
            pushString($context, $config, '-', StyString('QUOTE', '-', [('plain.bst', 249, 37, 249, 40)])); 
            builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 249, 41, 249, 42)])); 
          }, StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 249, 18, 249, 19)]), StyString('NUMBER', 1, [('plain.bst', 249, 20, 249, 22)]), StyString('NUMBER', 1, [('plain.bst', 249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [('plain.bst', 249, 26, 249, 36)]), StyString('QUOTE', '-', [('plain.bst', 249, 37, 249, 40)]), StyString('LITERAL', '=', [('plain.bst', 249, 41, 249, 42)]))], [('plain.bst', 249, 16, 249, 44)])); 
          pushFunction($context, $config, sub { 
            my ($context, $config) = @_; 
            pushString($context, $config, '-', StyString('QUOTE', '-', [('plain.bst', 250, 18, 250, 21)])); 
            builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 250, 22, 250, 23)])); 
            lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 251, 18, 251, 19)])); 
            pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 251, 20, 251, 22)])); 
            lookupGlobalInteger($context, $config, 'global.max$', StyString('LITERAL', 'global.max$', [('plain.bst', 251, 23, 251, 34)])); 
            builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 251, 35, 251, 45)])); 
            pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 251, 46, 251, 48)])); 
            builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 251, 49, 251, 51)])); 
          }, StyString('BLOCK', [(StyString('QUOTE', '-', [('plain.bst', 250, 18, 250, 21)]), StyString('LITERAL', '*', [('plain.bst', 250, 22, 250, 23)]), StyString('LITERAL', 't', [('plain.bst', 251, 18, 251, 19)]), StyString('NUMBER', 2, [('plain.bst', 251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [('plain.bst', 251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [('plain.bst', 251, 35, 251, 45)]), StyString('REFERENCE', 't', [('plain.bst', 251, 46, 251, 48)]), StyString('LITERAL', ':=', [('plain.bst', 251, 49, 251, 51)]))], [('plain.bst', 250, 16, 252, 17)])); 
          builtinWhile($context, $config, StyString('LITERAL', 'while$', [('plain.bst', 253, 14, 253, 20)])); 
        }, StyString('BLOCK', [(StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 249, 18, 249, 19)]), StyString('NUMBER', 1, [('plain.bst', 249, 20, 249, 22)]), StyString('NUMBER', 1, [('plain.bst', 249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [('plain.bst', 249, 26, 249, 36)]), StyString('QUOTE', '-', [('plain.bst', 249, 37, 249, 40)]), StyString('LITERAL', '=', [('plain.bst', 249, 41, 249, 42)]))], [('plain.bst', 249, 16, 249, 44)]), StyString('BLOCK', [(StyString('QUOTE', '-', [('plain.bst', 250, 18, 250, 21)]), StyString('LITERAL', '*', [('plain.bst', 250, 22, 250, 23)]), StyString('LITERAL', 't', [('plain.bst', 251, 18, 251, 19)]), StyString('NUMBER', 2, [('plain.bst', 251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [('plain.bst', 251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [('plain.bst', 251, 35, 251, 45)]), StyString('REFERENCE', 't', [('plain.bst', 251, 46, 251, 48)]), StyString('LITERAL', ':=', [('plain.bst', 251, 49, 251, 51)]))], [('plain.bst', 250, 16, 252, 17)]), StyString('LITERAL', 'while$', [('plain.bst', 253, 14, 253, 20)]))], [('plain.bst', 249, 12, 254, 13)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 255, 10, 255, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 245, 10, 245, 11)]), StyString('NUMBER', 1, [('plain.bst', 245, 12, 245, 14)]), StyString('NUMBER', 2, [('plain.bst', 245, 15, 245, 17)]), StyString('LITERAL', 'substring$', [('plain.bst', 245, 18, 245, 28)]), StyString('QUOTE', '--', [('plain.bst', 245, 29, 245, 33)]), StyString('LITERAL', '=', [('plain.bst', 245, 34, 245, 35)]), StyString('LITERAL', 'not', [('plain.bst', 245, 36, 245, 39)]), StyString('BLOCK', [(StyString('QUOTE', '--', [('plain.bst', 246, 14, 246, 18)]), StyString('LITERAL', '*', [('plain.bst', 246, 19, 246, 20)]), StyString('LITERAL', 't', [('plain.bst', 247, 14, 247, 15)]), StyString('NUMBER', 2, [('plain.bst', 247, 16, 247, 18)]), StyString('LITERAL', 'global.max$', [('plain.bst', 247, 19, 247, 30)]), StyString('LITERAL', 'substring$', [('plain.bst', 247, 31, 247, 41)]), StyString('REFERENCE', 't', [('plain.bst', 247, 42, 247, 44)]), StyString('LITERAL', ':=', [('plain.bst', 247, 45, 247, 47)]))], [('plain.bst', 246, 12, 248, 13)]), StyString('BLOCK', [(StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 249, 18, 249, 19)]), StyString('NUMBER', 1, [('plain.bst', 249, 20, 249, 22)]), StyString('NUMBER', 1, [('plain.bst', 249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [('plain.bst', 249, 26, 249, 36)]), StyString('QUOTE', '-', [('plain.bst', 249, 37, 249, 40)]), StyString('LITERAL', '=', [('plain.bst', 249, 41, 249, 42)]))], [('plain.bst', 249, 16, 249, 44)]), StyString('BLOCK', [(StyString('QUOTE', '-', [('plain.bst', 250, 18, 250, 21)]), StyString('LITERAL', '*', [('plain.bst', 250, 22, 250, 23)]), StyString('LITERAL', 't', [('plain.bst', 251, 18, 251, 19)]), StyString('NUMBER', 2, [('plain.bst', 251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [('plain.bst', 251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [('plain.bst', 251, 35, 251, 45)]), StyString('REFERENCE', 't', [('plain.bst', 251, 46, 251, 48)]), StyString('LITERAL', ':=', [('plain.bst', 251, 49, 251, 51)]))], [('plain.bst', 250, 16, 252, 17)]), StyString('LITERAL', 'while$', [('plain.bst', 253, 14, 253, 20)]))], [('plain.bst', 249, 12, 254, 13)]), StyString('LITERAL', 'if$', [('plain.bst', 255, 10, 255, 13)]))], [('plain.bst', 245, 8, 256, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 257, 10, 257, 11)])); 
        pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 257, 12, 257, 14)])); 
        pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 257, 15, 257, 17)])); 
        builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 257, 18, 257, 28)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 257, 29, 257, 30)])); 
        lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 258, 10, 258, 11)])); 
        pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 258, 12, 258, 14)])); 
        lookupGlobalInteger($context, $config, 'global.max$', StyString('LITERAL', 'global.max$', [('plain.bst', 258, 15, 258, 26)])); 
        builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 258, 27, 258, 37)])); 
        pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 258, 38, 258, 40)])); 
        builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 258, 41, 258, 43)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 257, 10, 257, 11)]), StyString('NUMBER', 1, [('plain.bst', 257, 12, 257, 14)]), StyString('NUMBER', 1, [('plain.bst', 257, 15, 257, 17)]), StyString('LITERAL', 'substring$', [('plain.bst', 257, 18, 257, 28)]), StyString('LITERAL', '*', [('plain.bst', 257, 29, 257, 30)]), StyString('LITERAL', 't', [('plain.bst', 258, 10, 258, 11)]), StyString('NUMBER', 2, [('plain.bst', 258, 12, 258, 14)]), StyString('LITERAL', 'global.max$', [('plain.bst', 258, 15, 258, 26)]), StyString('LITERAL', 'substring$', [('plain.bst', 258, 27, 258, 37)]), StyString('REFERENCE', 't', [('plain.bst', 258, 38, 258, 40)]), StyString('LITERAL', ':=', [('plain.bst', 258, 41, 258, 43)]))], [('plain.bst', 257, 8, 259, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 260, 6, 260, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 244, 6, 244, 7)]), StyString('NUMBER', 1, [('plain.bst', 244, 8, 244, 10)]), StyString('NUMBER', 1, [('plain.bst', 244, 11, 244, 13)]), StyString('LITERAL', 'substring$', [('plain.bst', 244, 14, 244, 24)]), StyString('QUOTE', '-', [('plain.bst', 244, 25, 244, 28)]), StyString('LITERAL', '=', [('plain.bst', 244, 29, 244, 30)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 245, 10, 245, 11)]), StyString('NUMBER', 1, [('plain.bst', 245, 12, 245, 14)]), StyString('NUMBER', 2, [('plain.bst', 245, 15, 245, 17)]), StyString('LITERAL', 'substring$', [('plain.bst', 245, 18, 245, 28)]), StyString('QUOTE', '--', [('plain.bst', 245, 29, 245, 33)]), StyString('LITERAL', '=', [('plain.bst', 245, 34, 245, 35)]), StyString('LITERAL', 'not', [('plain.bst', 245, 36, 245, 39)]), StyString('BLOCK', [(StyString('QUOTE', '--', [('plain.bst', 246, 14, 246, 18)]), StyString('LITERAL', '*', [('plain.bst', 246, 19, 246, 20)]), StyString('LITERAL', 't', [('plain.bst', 247, 14, 247, 15)]), StyString('NUMBER', 2, [('plain.bst', 247, 16, 247, 18)]), StyString('LITERAL', 'global.max$', [('plain.bst', 247, 19, 247, 30)]), StyString('LITERAL', 'substring$', [('plain.bst', 247, 31, 247, 41)]), StyString('REFERENCE', 't', [('plain.bst', 247, 42, 247, 44)]), StyString('LITERAL', ':=', [('plain.bst', 247, 45, 247, 47)]))], [('plain.bst', 246, 12, 248, 13)]), StyString('BLOCK', [(StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 249, 18, 249, 19)]), StyString('NUMBER', 1, [('plain.bst', 249, 20, 249, 22)]), StyString('NUMBER', 1, [('plain.bst', 249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [('plain.bst', 249, 26, 249, 36)]), StyString('QUOTE', '-', [('plain.bst', 249, 37, 249, 40)]), StyString('LITERAL', '=', [('plain.bst', 249, 41, 249, 42)]))], [('plain.bst', 249, 16, 249, 44)]), StyString('BLOCK', [(StyString('QUOTE', '-', [('plain.bst', 250, 18, 250, 21)]), StyString('LITERAL', '*', [('plain.bst', 250, 22, 250, 23)]), StyString('LITERAL', 't', [('plain.bst', 251, 18, 251, 19)]), StyString('NUMBER', 2, [('plain.bst', 251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [('plain.bst', 251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [('plain.bst', 251, 35, 251, 45)]), StyString('REFERENCE', 't', [('plain.bst', 251, 46, 251, 48)]), StyString('LITERAL', ':=', [('plain.bst', 251, 49, 251, 51)]))], [('plain.bst', 250, 16, 252, 17)]), StyString('LITERAL', 'while$', [('plain.bst', 253, 14, 253, 20)]))], [('plain.bst', 249, 12, 254, 13)]), StyString('LITERAL', 'if$', [('plain.bst', 255, 10, 255, 13)]))], [('plain.bst', 245, 8, 256, 9)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 257, 10, 257, 11)]), StyString('NUMBER', 1, [('plain.bst', 257, 12, 257, 14)]), StyString('NUMBER', 1, [('plain.bst', 257, 15, 257, 17)]), StyString('LITERAL', 'substring$', [('plain.bst', 257, 18, 257, 28)]), StyString('LITERAL', '*', [('plain.bst', 257, 29, 257, 30)]), StyString('LITERAL', 't', [('plain.bst', 258, 10, 258, 11)]), StyString('NUMBER', 2, [('plain.bst', 258, 12, 258, 14)]), StyString('LITERAL', 'global.max$', [('plain.bst', 258, 15, 258, 26)]), StyString('LITERAL', 'substring$', [('plain.bst', 258, 27, 258, 37)]), StyString('REFERENCE', 't', [('plain.bst', 258, 38, 258, 40)]), StyString('LITERAL', ':=', [('plain.bst', 258, 41, 258, 43)]))], [('plain.bst', 257, 8, 259, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 260, 6, 260, 9)]))], [('plain.bst', 244, 4, 261, 5)])); 
    builtinWhile($context, $config, StyString('LITERAL', 'while$', [('plain.bst', 262, 2, 262, 8)])); 
  }; 
  registerFunctionDefinition($context, $config, 'n.dashify', $bst__nZodashify, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 239, 1, 240, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'n.dashify', [('plain.bst', 240, 10, 240, 19)]))], [('plain.bst', 240, 9, 240, 20)]), StyString('BLOCK', [(StyString('REFERENCE', 't', [('plain.bst', 241, 2, 241, 4)]), StyString('LITERAL', ':=', [('plain.bst', 241, 5, 241, 7)]), StyString('QUOTE', '', [('plain.bst', 242, 2, 242, 4)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 243, 6, 243, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 243, 8, 243, 14)]), StyString('LITERAL', 'not', [('plain.bst', 243, 15, 243, 18)]))], [('plain.bst', 243, 4, 243, 20)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 244, 6, 244, 7)]), StyString('NUMBER', 1, [('plain.bst', 244, 8, 244, 10)]), StyString('NUMBER', 1, [('plain.bst', 244, 11, 244, 13)]), StyString('LITERAL', 'substring$', [('plain.bst', 244, 14, 244, 24)]), StyString('QUOTE', '-', [('plain.bst', 244, 25, 244, 28)]), StyString('LITERAL', '=', [('plain.bst', 244, 29, 244, 30)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 245, 10, 245, 11)]), StyString('NUMBER', 1, [('plain.bst', 245, 12, 245, 14)]), StyString('NUMBER', 2, [('plain.bst', 245, 15, 245, 17)]), StyString('LITERAL', 'substring$', [('plain.bst', 245, 18, 245, 28)]), StyString('QUOTE', '--', [('plain.bst', 245, 29, 245, 33)]), StyString('LITERAL', '=', [('plain.bst', 245, 34, 245, 35)]), StyString('LITERAL', 'not', [('plain.bst', 245, 36, 245, 39)]), StyString('BLOCK', [(StyString('QUOTE', '--', [('plain.bst', 246, 14, 246, 18)]), StyString('LITERAL', '*', [('plain.bst', 246, 19, 246, 20)]), StyString('LITERAL', 't', [('plain.bst', 247, 14, 247, 15)]), StyString('NUMBER', 2, [('plain.bst', 247, 16, 247, 18)]), StyString('LITERAL', 'global.max$', [('plain.bst', 247, 19, 247, 30)]), StyString('LITERAL', 'substring$', [('plain.bst', 247, 31, 247, 41)]), StyString('REFERENCE', 't', [('plain.bst', 247, 42, 247, 44)]), StyString('LITERAL', ':=', [('plain.bst', 247, 45, 247, 47)]))], [('plain.bst', 246, 12, 248, 13)]), StyString('BLOCK', [(StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 249, 18, 249, 19)]), StyString('NUMBER', 1, [('plain.bst', 249, 20, 249, 22)]), StyString('NUMBER', 1, [('plain.bst', 249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [('plain.bst', 249, 26, 249, 36)]), StyString('QUOTE', '-', [('plain.bst', 249, 37, 249, 40)]), StyString('LITERAL', '=', [('plain.bst', 249, 41, 249, 42)]))], [('plain.bst', 249, 16, 249, 44)]), StyString('BLOCK', [(StyString('QUOTE', '-', [('plain.bst', 250, 18, 250, 21)]), StyString('LITERAL', '*', [('plain.bst', 250, 22, 250, 23)]), StyString('LITERAL', 't', [('plain.bst', 251, 18, 251, 19)]), StyString('NUMBER', 2, [('plain.bst', 251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [('plain.bst', 251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [('plain.bst', 251, 35, 251, 45)]), StyString('REFERENCE', 't', [('plain.bst', 251, 46, 251, 48)]), StyString('LITERAL', ':=', [('plain.bst', 251, 49, 251, 51)]))], [('plain.bst', 250, 16, 252, 17)]), StyString('LITERAL', 'while$', [('plain.bst', 253, 14, 253, 20)]))], [('plain.bst', 249, 12, 254, 13)]), StyString('LITERAL', 'if$', [('plain.bst', 255, 10, 255, 13)]))], [('plain.bst', 245, 8, 256, 9)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 257, 10, 257, 11)]), StyString('NUMBER', 1, [('plain.bst', 257, 12, 257, 14)]), StyString('NUMBER', 1, [('plain.bst', 257, 15, 257, 17)]), StyString('LITERAL', 'substring$', [('plain.bst', 257, 18, 257, 28)]), StyString('LITERAL', '*', [('plain.bst', 257, 29, 257, 30)]), StyString('LITERAL', 't', [('plain.bst', 258, 10, 258, 11)]), StyString('NUMBER', 2, [('plain.bst', 258, 12, 258, 14)]), StyString('LITERAL', 'global.max$', [('plain.bst', 258, 15, 258, 26)]), StyString('LITERAL', 'substring$', [('plain.bst', 258, 27, 258, 37)]), StyString('REFERENCE', 't', [('plain.bst', 258, 38, 258, 40)]), StyString('LITERAL', ':=', [('plain.bst', 258, 41, 258, 43)]))], [('plain.bst', 257, 8, 259, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 260, 6, 260, 9)]))], [('plain.bst', 244, 4, 261, 5)]), StyString('LITERAL', 'while$', [('plain.bst', 262, 2, 262, 8)]))], [('plain.bst', 240, 21, 263, 2)]))], [('plain.bst', 239, 1, 263, 2)])); ; 
  my $bst__formatZodate = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'year', StyString('LITERAL', 'year', [('plain.bst', 266, 2, 266, 6)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 266, 7, 266, 13)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'month', StyString('LITERAL', 'month', [('plain.bst', 267, 6, 267, 11)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 267, 12, 267, 18)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 268, 10, 268, 12)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 268, 10, 268, 12)]))], [('plain.bst', 268, 8, 268, 14)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'there\'s a month but no year in ', StyString('QUOTE', 'there\'s a month but no year in ', [('plain.bst', 269, 10, 269, 43)])); 
        builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 269, 44, 269, 49)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 269, 50, 269, 51)])); 
        builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 269, 52, 269, 60)])); 
        lookupEntryField($context, $config, 'month', StyString('LITERAL', 'month', [('plain.bst', 270, 10, 270, 15)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'there\'s a month but no year in ', [('plain.bst', 269, 10, 269, 43)]), StyString('LITERAL', 'cite$', [('plain.bst', 269, 44, 269, 49)]), StyString('LITERAL', '*', [('plain.bst', 269, 50, 269, 51)]), StyString('LITERAL', 'warning$', [('plain.bst', 269, 52, 269, 60)]), StyString('LITERAL', 'month', [('plain.bst', 270, 10, 270, 15)]))], [('plain.bst', 269, 8, 271, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 272, 6, 272, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'month', [('plain.bst', 267, 6, 267, 11)]), StyString('LITERAL', 'empty$', [('plain.bst', 267, 12, 267, 18)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 268, 10, 268, 12)]))], [('plain.bst', 268, 8, 268, 14)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a month but no year in ', [('plain.bst', 269, 10, 269, 43)]), StyString('LITERAL', 'cite$', [('plain.bst', 269, 44, 269, 49)]), StyString('LITERAL', '*', [('plain.bst', 269, 50, 269, 51)]), StyString('LITERAL', 'warning$', [('plain.bst', 269, 52, 269, 60)]), StyString('LITERAL', 'month', [('plain.bst', 270, 10, 270, 15)]))], [('plain.bst', 269, 8, 271, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 272, 6, 272, 9)]))], [('plain.bst', 267, 4, 273, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'month', StyString('LITERAL', 'month', [('plain.bst', 274, 6, 274, 11)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 274, 12, 274, 18)])); 
      pushEntryField($context, $config, 'year', StyString('REFERENCE', 'year', [('plain.bst', 275, 8, 275, 13)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'month', StyString('LITERAL', 'month', [('plain.bst', 276, 10, 276, 15)])); 
        pushString($context, $config, ' ', StyString('QUOTE', ' ', [('plain.bst', 276, 16, 276, 19)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 276, 20, 276, 21)])); 
        lookupEntryField($context, $config, 'year', StyString('LITERAL', 'year', [('plain.bst', 276, 22, 276, 26)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 276, 27, 276, 28)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'month', [('plain.bst', 276, 10, 276, 15)]), StyString('QUOTE', ' ', [('plain.bst', 276, 16, 276, 19)]), StyString('LITERAL', '*', [('plain.bst', 276, 20, 276, 21)]), StyString('LITERAL', 'year', [('plain.bst', 276, 22, 276, 26)]), StyString('LITERAL', '*', [('plain.bst', 276, 27, 276, 28)]))], [('plain.bst', 276, 8, 276, 30)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 277, 6, 277, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'month', [('plain.bst', 274, 6, 274, 11)]), StyString('LITERAL', 'empty$', [('plain.bst', 274, 12, 274, 18)]), StyString('REFERENCE', 'year', [('plain.bst', 275, 8, 275, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'month', [('plain.bst', 276, 10, 276, 15)]), StyString('QUOTE', ' ', [('plain.bst', 276, 16, 276, 19)]), StyString('LITERAL', '*', [('plain.bst', 276, 20, 276, 21)]), StyString('LITERAL', 'year', [('plain.bst', 276, 22, 276, 26)]), StyString('LITERAL', '*', [('plain.bst', 276, 27, 276, 28)]))], [('plain.bst', 276, 8, 276, 30)]), StyString('LITERAL', 'if$', [('plain.bst', 277, 6, 277, 9)]))], [('plain.bst', 274, 4, 278, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 279, 2, 279, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.date', $bst__formatZodate, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 264, 1, 265, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.date', [('plain.bst', 265, 10, 265, 21)]))], [('plain.bst', 265, 9, 265, 22)]), StyString('BLOCK', [(StyString('LITERAL', 'year', [('plain.bst', 266, 2, 266, 6)]), StyString('LITERAL', 'empty$', [('plain.bst', 266, 7, 266, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'month', [('plain.bst', 267, 6, 267, 11)]), StyString('LITERAL', 'empty$', [('plain.bst', 267, 12, 267, 18)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 268, 10, 268, 12)]))], [('plain.bst', 268, 8, 268, 14)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a month but no year in ', [('plain.bst', 269, 10, 269, 43)]), StyString('LITERAL', 'cite$', [('plain.bst', 269, 44, 269, 49)]), StyString('LITERAL', '*', [('plain.bst', 269, 50, 269, 51)]), StyString('LITERAL', 'warning$', [('plain.bst', 269, 52, 269, 60)]), StyString('LITERAL', 'month', [('plain.bst', 270, 10, 270, 15)]))], [('plain.bst', 269, 8, 271, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 272, 6, 272, 9)]))], [('plain.bst', 267, 4, 273, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'month', [('plain.bst', 274, 6, 274, 11)]), StyString('LITERAL', 'empty$', [('plain.bst', 274, 12, 274, 18)]), StyString('REFERENCE', 'year', [('plain.bst', 275, 8, 275, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'month', [('plain.bst', 276, 10, 276, 15)]), StyString('QUOTE', ' ', [('plain.bst', 276, 16, 276, 19)]), StyString('LITERAL', '*', [('plain.bst', 276, 20, 276, 21)]), StyString('LITERAL', 'year', [('plain.bst', 276, 22, 276, 26)]), StyString('LITERAL', '*', [('plain.bst', 276, 27, 276, 28)]))], [('plain.bst', 276, 8, 276, 30)]), StyString('LITERAL', 'if$', [('plain.bst', 277, 6, 277, 9)]))], [('plain.bst', 274, 4, 278, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 279, 2, 279, 5)]))], [('plain.bst', 265, 23, 280, 2)]))], [('plain.bst', 264, 1, 280, 2)])); ; 
  my $bst__formatZobtitle = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'title', StyString('LITERAL', 'title', [('plain.bst', 283, 2, 283, 7)])); 
    $bst__emphasizze->($context, $config, StyString('LITERAL', 'emphasize', [('plain.bst', 283, 8, 283, 17)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.btitle', $bst__formatZobtitle, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 281, 1, 282, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.btitle', [('plain.bst', 282, 10, 282, 23)]))], [('plain.bst', 282, 9, 282, 24)]), StyString('BLOCK', [(StyString('LITERAL', 'title', [('plain.bst', 283, 2, 283, 7)]), StyString('LITERAL', 'emphasize', [('plain.bst', 283, 8, 283, 17)]))], [('plain.bst', 282, 25, 284, 2)]))], [('plain.bst', 281, 1, 284, 2)])); ; 
  my $bst__tieZoorZospaceZoconnect = sub { 
    my ($context, $config) = @_; 
    builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 287, 2, 287, 12)])); 
    builtinTextLength($context, $config, StyString('LITERAL', 'text.length$', [('plain.bst', 287, 13, 287, 25)])); 
    pushInteger($context, $config, 3, StyString('NUMBER', 3, [('plain.bst', 287, 26, 287, 28)])); 
    builtinZl($context, $config, StyString('LITERAL', '<', [('plain.bst', 287, 29, 287, 30)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '~', StyString('QUOTE', '~', [('plain.bst', 288, 6, 288, 9)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '~', [('plain.bst', 288, 6, 288, 9)]))], [('plain.bst', 288, 4, 288, 11)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, ' ', StyString('QUOTE', ' ', [('plain.bst', 289, 6, 289, 9)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', ' ', [('plain.bst', 289, 6, 289, 9)]))], [('plain.bst', 289, 4, 289, 11)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 290, 2, 290, 5)])); 
    builtinSwap($context, $config, StyString('LITERAL', 'swap$', [('plain.bst', 291, 2, 291, 7)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 291, 8, 291, 9)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 291, 10, 291, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'tie.or.space.connect', $bst__tieZoorZospaceZoconnect, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 285, 1, 286, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 286, 10, 286, 30)]))], [('plain.bst', 286, 9, 286, 31)]), StyString('BLOCK', [(StyString('LITERAL', 'duplicate$', [('plain.bst', 287, 2, 287, 12)]), StyString('LITERAL', 'text.length$', [('plain.bst', 287, 13, 287, 25)]), StyString('NUMBER', 3, [('plain.bst', 287, 26, 287, 28)]), StyString('LITERAL', '<', [('plain.bst', 287, 29, 287, 30)]), StyString('BLOCK', [(StyString('QUOTE', '~', [('plain.bst', 288, 6, 288, 9)]))], [('plain.bst', 288, 4, 288, 11)]), StyString('BLOCK', [(StyString('QUOTE', ' ', [('plain.bst', 289, 6, 289, 9)]))], [('plain.bst', 289, 4, 289, 11)]), StyString('LITERAL', 'if$', [('plain.bst', 290, 2, 290, 5)]), StyString('LITERAL', 'swap$', [('plain.bst', 291, 2, 291, 7)]), StyString('LITERAL', '*', [('plain.bst', 291, 8, 291, 9)]), StyString('LITERAL', '*', [('plain.bst', 291, 10, 291, 11)]))], [('plain.bst', 286, 32, 292, 2)]))], [('plain.bst', 285, 1, 292, 2)])); ; 
  my $bst__eitherZoorZocheck = sub { 
    my ($context, $config) = @_; 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 295, 2, 295, 8)])); 
    pushFunction($context, $config, \&builtinPop, StyString('REFERENCE', 'pop$', [('plain.bst', 296, 4, 296, 9)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 'can\'t use both ', StyString('QUOTE', 'can\'t use both ', [('plain.bst', 297, 6, 297, 23)])); 
      builtinSwap($context, $config, StyString('LITERAL', 'swap$', [('plain.bst', 297, 24, 297, 29)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 297, 30, 297, 31)])); 
      pushString($context, $config, ' fields in ', StyString('QUOTE', ' fields in ', [('plain.bst', 297, 32, 297, 45)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 297, 46, 297, 47)])); 
      builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 297, 48, 297, 53)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 297, 54, 297, 55)])); 
      builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 297, 56, 297, 64)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'can\'t use both ', [('plain.bst', 297, 6, 297, 23)]), StyString('LITERAL', 'swap$', [('plain.bst', 297, 24, 297, 29)]), StyString('LITERAL', '*', [('plain.bst', 297, 30, 297, 31)]), StyString('QUOTE', ' fields in ', [('plain.bst', 297, 32, 297, 45)]), StyString('LITERAL', '*', [('plain.bst', 297, 46, 297, 47)]), StyString('LITERAL', 'cite$', [('plain.bst', 297, 48, 297, 53)]), StyString('LITERAL', '*', [('plain.bst', 297, 54, 297, 55)]), StyString('LITERAL', 'warning$', [('plain.bst', 297, 56, 297, 64)]))], [('plain.bst', 297, 4, 297, 66)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 298, 2, 298, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'either.or.check', $bst__eitherZoorZocheck, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 293, 1, 294, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'either.or.check', [('plain.bst', 294, 10, 294, 25)]))], [('plain.bst', 294, 9, 294, 26)]), StyString('BLOCK', [(StyString('LITERAL', 'empty$', [('plain.bst', 295, 2, 295, 8)]), StyString('REFERENCE', 'pop$', [('plain.bst', 296, 4, 296, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'can\'t use both ', [('plain.bst', 297, 6, 297, 23)]), StyString('LITERAL', 'swap$', [('plain.bst', 297, 24, 297, 29)]), StyString('LITERAL', '*', [('plain.bst', 297, 30, 297, 31)]), StyString('QUOTE', ' fields in ', [('plain.bst', 297, 32, 297, 45)]), StyString('LITERAL', '*', [('plain.bst', 297, 46, 297, 47)]), StyString('LITERAL', 'cite$', [('plain.bst', 297, 48, 297, 53)]), StyString('LITERAL', '*', [('plain.bst', 297, 54, 297, 55)]), StyString('LITERAL', 'warning$', [('plain.bst', 297, 56, 297, 64)]))], [('plain.bst', 297, 4, 297, 66)]), StyString('LITERAL', 'if$', [('plain.bst', 298, 2, 298, 5)]))], [('plain.bst', 294, 27, 299, 2)]))], [('plain.bst', 293, 1, 299, 2)])); ; 
  my $bst__formatZobvolume = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'volume', StyString('LITERAL', 'volume', [('plain.bst', 302, 2, 302, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 302, 9, 302, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 303, 6, 303, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 303, 6, 303, 8)]))], [('plain.bst', 303, 4, 303, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 'volume', StyString('QUOTE', 'volume', [('plain.bst', 304, 6, 304, 14)])); 
      lookupEntryField($context, $config, 'volume', StyString('LITERAL', 'volume', [('plain.bst', 304, 15, 304, 21)])); 
      $bst__tieZoorZospaceZoconnect->($context, $config, StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 304, 22, 304, 42)])); 
      lookupEntryField($context, $config, 'series', StyString('LITERAL', 'series', [('plain.bst', 305, 6, 305, 12)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 305, 13, 305, 19)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 306, 8, 306, 14)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, ' of ', StyString('QUOTE', ' of ', [('plain.bst', 307, 10, 307, 16)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 307, 17, 307, 18)])); 
        lookupEntryField($context, $config, 'series', StyString('LITERAL', 'series', [('plain.bst', 307, 19, 307, 25)])); 
        $bst__emphasizze->($context, $config, StyString('LITERAL', 'emphasize', [('plain.bst', 307, 26, 307, 35)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 307, 36, 307, 37)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ' of ', [('plain.bst', 307, 10, 307, 16)]), StyString('LITERAL', '*', [('plain.bst', 307, 17, 307, 18)]), StyString('LITERAL', 'series', [('plain.bst', 307, 19, 307, 25)]), StyString('LITERAL', 'emphasize', [('plain.bst', 307, 26, 307, 35)]), StyString('LITERAL', '*', [('plain.bst', 307, 36, 307, 37)]))], [('plain.bst', 307, 8, 307, 39)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 308, 6, 308, 9)])); 
      pushString($context, $config, 'volume and number', StyString('QUOTE', 'volume and number', [('plain.bst', 309, 6, 309, 25)])); 
      lookupEntryField($context, $config, 'number', StyString('LITERAL', 'number', [('plain.bst', 309, 26, 309, 32)])); 
      $bst__eitherZoorZocheck->($context, $config, StyString('LITERAL', 'either.or.check', [('plain.bst', 309, 33, 309, 48)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'volume', [('plain.bst', 304, 6, 304, 14)]), StyString('LITERAL', 'volume', [('plain.bst', 304, 15, 304, 21)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 304, 22, 304, 42)]), StyString('LITERAL', 'series', [('plain.bst', 305, 6, 305, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 305, 13, 305, 19)]), StyString('REFERENCE', 'skip$', [('plain.bst', 306, 8, 306, 14)]), StyString('BLOCK', [(StyString('QUOTE', ' of ', [('plain.bst', 307, 10, 307, 16)]), StyString('LITERAL', '*', [('plain.bst', 307, 17, 307, 18)]), StyString('LITERAL', 'series', [('plain.bst', 307, 19, 307, 25)]), StyString('LITERAL', 'emphasize', [('plain.bst', 307, 26, 307, 35)]), StyString('LITERAL', '*', [('plain.bst', 307, 36, 307, 37)]))], [('plain.bst', 307, 8, 307, 39)]), StyString('LITERAL', 'if$', [('plain.bst', 308, 6, 308, 9)]), StyString('QUOTE', 'volume and number', [('plain.bst', 309, 6, 309, 25)]), StyString('LITERAL', 'number', [('plain.bst', 309, 26, 309, 32)]), StyString('LITERAL', 'either.or.check', [('plain.bst', 309, 33, 309, 48)]))], [('plain.bst', 304, 4, 310, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 311, 2, 311, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.bvolume', $bst__formatZobvolume, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 300, 1, 301, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.bvolume', [('plain.bst', 301, 10, 301, 24)]))], [('plain.bst', 301, 9, 301, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'volume', [('plain.bst', 302, 2, 302, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 302, 9, 302, 15)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 303, 6, 303, 8)]))], [('plain.bst', 303, 4, 303, 10)]), StyString('BLOCK', [(StyString('QUOTE', 'volume', [('plain.bst', 304, 6, 304, 14)]), StyString('LITERAL', 'volume', [('plain.bst', 304, 15, 304, 21)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 304, 22, 304, 42)]), StyString('LITERAL', 'series', [('plain.bst', 305, 6, 305, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 305, 13, 305, 19)]), StyString('REFERENCE', 'skip$', [('plain.bst', 306, 8, 306, 14)]), StyString('BLOCK', [(StyString('QUOTE', ' of ', [('plain.bst', 307, 10, 307, 16)]), StyString('LITERAL', '*', [('plain.bst', 307, 17, 307, 18)]), StyString('LITERAL', 'series', [('plain.bst', 307, 19, 307, 25)]), StyString('LITERAL', 'emphasize', [('plain.bst', 307, 26, 307, 35)]), StyString('LITERAL', '*', [('plain.bst', 307, 36, 307, 37)]))], [('plain.bst', 307, 8, 307, 39)]), StyString('LITERAL', 'if$', [('plain.bst', 308, 6, 308, 9)]), StyString('QUOTE', 'volume and number', [('plain.bst', 309, 6, 309, 25)]), StyString('LITERAL', 'number', [('plain.bst', 309, 26, 309, 32)]), StyString('LITERAL', 'either.or.check', [('plain.bst', 309, 33, 309, 48)]))], [('plain.bst', 304, 4, 310, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 311, 2, 311, 5)]))], [('plain.bst', 301, 26, 312, 2)]))], [('plain.bst', 300, 1, 312, 2)])); ; 
  my $bst__formatZonumberZoseries = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'volume', StyString('LITERAL', 'volume', [('plain.bst', 315, 2, 315, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 315, 9, 315, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'number', StyString('LITERAL', 'number', [('plain.bst', 316, 6, 316, 12)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 316, 13, 316, 19)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'series', StyString('LITERAL', 'series', [('plain.bst', 317, 10, 317, 16)])); 
        $bst__fieldZoorZonull->($context, $config, StyString('LITERAL', 'field.or.null', [('plain.bst', 317, 17, 317, 30)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'series', [('plain.bst', 317, 10, 317, 16)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 317, 17, 317, 30)]))], [('plain.bst', 317, 8, 317, 32)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 318, 10, 318, 22)])); 
        lookupGlobalInteger($context, $config, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [('plain.bst', 318, 23, 318, 35)])); 
        builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 318, 36, 318, 37)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'number', StyString('QUOTE', 'number', [('plain.bst', 319, 14, 319, 22)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'number', [('plain.bst', 319, 14, 319, 22)]))], [('plain.bst', 319, 12, 319, 24)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'Number', StyString('QUOTE', 'Number', [('plain.bst', 320, 14, 320, 22)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'Number', [('plain.bst', 320, 14, 320, 22)]))], [('plain.bst', 320, 12, 320, 24)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 321, 10, 321, 13)])); 
        lookupEntryField($context, $config, 'number', StyString('LITERAL', 'number', [('plain.bst', 322, 10, 322, 16)])); 
        $bst__tieZoorZospaceZoconnect->($context, $config, StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 322, 17, 322, 37)])); 
        lookupEntryField($context, $config, 'series', StyString('LITERAL', 'series', [('plain.bst', 323, 10, 323, 16)])); 
        builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 323, 17, 323, 23)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'there\'s a number but no series in ', StyString('QUOTE', 'there\'s a number but no series in ', [('plain.bst', 324, 14, 324, 50)])); 
          builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 324, 51, 324, 56)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 324, 57, 324, 58)])); 
          builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 324, 59, 324, 67)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no series in ', [('plain.bst', 324, 14, 324, 50)]), StyString('LITERAL', 'cite$', [('plain.bst', 324, 51, 324, 56)]), StyString('LITERAL', '*', [('plain.bst', 324, 57, 324, 58)]), StyString('LITERAL', 'warning$', [('plain.bst', 324, 59, 324, 67)]))], [('plain.bst', 324, 12, 324, 69)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, ' in ', StyString('QUOTE', ' in ', [('plain.bst', 325, 14, 325, 20)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 325, 21, 325, 22)])); 
          lookupEntryField($context, $config, 'series', StyString('LITERAL', 'series', [('plain.bst', 325, 23, 325, 29)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 325, 30, 325, 31)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', ' in ', [('plain.bst', 325, 14, 325, 20)]), StyString('LITERAL', '*', [('plain.bst', 325, 21, 325, 22)]), StyString('LITERAL', 'series', [('plain.bst', 325, 23, 325, 29)]), StyString('LITERAL', '*', [('plain.bst', 325, 30, 325, 31)]))], [('plain.bst', 325, 12, 325, 33)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 326, 10, 326, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 318, 10, 318, 22)]), StyString('LITERAL', 'mid.sentence', [('plain.bst', 318, 23, 318, 35)]), StyString('LITERAL', '=', [('plain.bst', 318, 36, 318, 37)]), StyString('BLOCK', [(StyString('QUOTE', 'number', [('plain.bst', 319, 14, 319, 22)]))], [('plain.bst', 319, 12, 319, 24)]), StyString('BLOCK', [(StyString('QUOTE', 'Number', [('plain.bst', 320, 14, 320, 22)]))], [('plain.bst', 320, 12, 320, 24)]), StyString('LITERAL', 'if$', [('plain.bst', 321, 10, 321, 13)]), StyString('LITERAL', 'number', [('plain.bst', 322, 10, 322, 16)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 322, 17, 322, 37)]), StyString('LITERAL', 'series', [('plain.bst', 323, 10, 323, 16)]), StyString('LITERAL', 'empty$', [('plain.bst', 323, 17, 323, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no series in ', [('plain.bst', 324, 14, 324, 50)]), StyString('LITERAL', 'cite$', [('plain.bst', 324, 51, 324, 56)]), StyString('LITERAL', '*', [('plain.bst', 324, 57, 324, 58)]), StyString('LITERAL', 'warning$', [('plain.bst', 324, 59, 324, 67)]))], [('plain.bst', 324, 12, 324, 69)]), StyString('BLOCK', [(StyString('QUOTE', ' in ', [('plain.bst', 325, 14, 325, 20)]), StyString('LITERAL', '*', [('plain.bst', 325, 21, 325, 22)]), StyString('LITERAL', 'series', [('plain.bst', 325, 23, 325, 29)]), StyString('LITERAL', '*', [('plain.bst', 325, 30, 325, 31)]))], [('plain.bst', 325, 12, 325, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 326, 10, 326, 13)]))], [('plain.bst', 318, 8, 327, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 328, 6, 328, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'number', [('plain.bst', 316, 6, 316, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 316, 13, 316, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'series', [('plain.bst', 317, 10, 317, 16)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 317, 17, 317, 30)]))], [('plain.bst', 317, 8, 317, 32)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 318, 10, 318, 22)]), StyString('LITERAL', 'mid.sentence', [('plain.bst', 318, 23, 318, 35)]), StyString('LITERAL', '=', [('plain.bst', 318, 36, 318, 37)]), StyString('BLOCK', [(StyString('QUOTE', 'number', [('plain.bst', 319, 14, 319, 22)]))], [('plain.bst', 319, 12, 319, 24)]), StyString('BLOCK', [(StyString('QUOTE', 'Number', [('plain.bst', 320, 14, 320, 22)]))], [('plain.bst', 320, 12, 320, 24)]), StyString('LITERAL', 'if$', [('plain.bst', 321, 10, 321, 13)]), StyString('LITERAL', 'number', [('plain.bst', 322, 10, 322, 16)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 322, 17, 322, 37)]), StyString('LITERAL', 'series', [('plain.bst', 323, 10, 323, 16)]), StyString('LITERAL', 'empty$', [('plain.bst', 323, 17, 323, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no series in ', [('plain.bst', 324, 14, 324, 50)]), StyString('LITERAL', 'cite$', [('plain.bst', 324, 51, 324, 56)]), StyString('LITERAL', '*', [('plain.bst', 324, 57, 324, 58)]), StyString('LITERAL', 'warning$', [('plain.bst', 324, 59, 324, 67)]))], [('plain.bst', 324, 12, 324, 69)]), StyString('BLOCK', [(StyString('QUOTE', ' in ', [('plain.bst', 325, 14, 325, 20)]), StyString('LITERAL', '*', [('plain.bst', 325, 21, 325, 22)]), StyString('LITERAL', 'series', [('plain.bst', 325, 23, 325, 29)]), StyString('LITERAL', '*', [('plain.bst', 325, 30, 325, 31)]))], [('plain.bst', 325, 12, 325, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 326, 10, 326, 13)]))], [('plain.bst', 318, 8, 327, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 328, 6, 328, 9)]))], [('plain.bst', 316, 4, 329, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 330, 6, 330, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 330, 6, 330, 8)]))], [('plain.bst', 330, 4, 330, 10)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 331, 2, 331, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.number.series', $bst__formatZonumberZoseries, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 313, 1, 314, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.number.series', [('plain.bst', 314, 10, 314, 30)]))], [('plain.bst', 314, 9, 314, 31)]), StyString('BLOCK', [(StyString('LITERAL', 'volume', [('plain.bst', 315, 2, 315, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 315, 9, 315, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'number', [('plain.bst', 316, 6, 316, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 316, 13, 316, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'series', [('plain.bst', 317, 10, 317, 16)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 317, 17, 317, 30)]))], [('plain.bst', 317, 8, 317, 32)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 318, 10, 318, 22)]), StyString('LITERAL', 'mid.sentence', [('plain.bst', 318, 23, 318, 35)]), StyString('LITERAL', '=', [('plain.bst', 318, 36, 318, 37)]), StyString('BLOCK', [(StyString('QUOTE', 'number', [('plain.bst', 319, 14, 319, 22)]))], [('plain.bst', 319, 12, 319, 24)]), StyString('BLOCK', [(StyString('QUOTE', 'Number', [('plain.bst', 320, 14, 320, 22)]))], [('plain.bst', 320, 12, 320, 24)]), StyString('LITERAL', 'if$', [('plain.bst', 321, 10, 321, 13)]), StyString('LITERAL', 'number', [('plain.bst', 322, 10, 322, 16)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 322, 17, 322, 37)]), StyString('LITERAL', 'series', [('plain.bst', 323, 10, 323, 16)]), StyString('LITERAL', 'empty$', [('plain.bst', 323, 17, 323, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no series in ', [('plain.bst', 324, 14, 324, 50)]), StyString('LITERAL', 'cite$', [('plain.bst', 324, 51, 324, 56)]), StyString('LITERAL', '*', [('plain.bst', 324, 57, 324, 58)]), StyString('LITERAL', 'warning$', [('plain.bst', 324, 59, 324, 67)]))], [('plain.bst', 324, 12, 324, 69)]), StyString('BLOCK', [(StyString('QUOTE', ' in ', [('plain.bst', 325, 14, 325, 20)]), StyString('LITERAL', '*', [('plain.bst', 325, 21, 325, 22)]), StyString('LITERAL', 'series', [('plain.bst', 325, 23, 325, 29)]), StyString('LITERAL', '*', [('plain.bst', 325, 30, 325, 31)]))], [('plain.bst', 325, 12, 325, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 326, 10, 326, 13)]))], [('plain.bst', 318, 8, 327, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 328, 6, 328, 9)]))], [('plain.bst', 316, 4, 329, 5)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 330, 6, 330, 8)]))], [('plain.bst', 330, 4, 330, 10)]), StyString('LITERAL', 'if$', [('plain.bst', 331, 2, 331, 5)]))], [('plain.bst', 314, 32, 332, 2)]))], [('plain.bst', 313, 1, 332, 2)])); ; 
  my $bst__formatZoedition = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'edition', StyString('LITERAL', 'edition', [('plain.bst', 335, 2, 335, 9)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 335, 10, 335, 16)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 336, 6, 336, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 336, 6, 336, 8)]))], [('plain.bst', 336, 4, 336, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalInteger($context, $config, 'output.state', StyString('LITERAL', 'output.state', [('plain.bst', 337, 6, 337, 18)])); 
      lookupGlobalInteger($context, $config, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [('plain.bst', 337, 19, 337, 31)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 337, 32, 337, 33)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'edition', StyString('LITERAL', 'edition', [('plain.bst', 338, 10, 338, 17)])); 
        pushString($context, $config, 'l', StyString('QUOTE', 'l', [('plain.bst', 338, 18, 338, 21)])); 
        builtinChangeCase($context, $config, StyString('LITERAL', 'change.case$', [('plain.bst', 338, 22, 338, 34)])); 
        pushString($context, $config, ' edition', StyString('QUOTE', ' edition', [('plain.bst', 338, 35, 338, 45)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 338, 46, 338, 47)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'edition', [('plain.bst', 338, 10, 338, 17)]), StyString('QUOTE', 'l', [('plain.bst', 338, 18, 338, 21)]), StyString('LITERAL', 'change.case$', [('plain.bst', 338, 22, 338, 34)]), StyString('QUOTE', ' edition', [('plain.bst', 338, 35, 338, 45)]), StyString('LITERAL', '*', [('plain.bst', 338, 46, 338, 47)]))], [('plain.bst', 338, 8, 338, 49)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'edition', StyString('LITERAL', 'edition', [('plain.bst', 339, 10, 339, 17)])); 
        pushString($context, $config, 't', StyString('QUOTE', 't', [('plain.bst', 339, 18, 339, 21)])); 
        builtinChangeCase($context, $config, StyString('LITERAL', 'change.case$', [('plain.bst', 339, 22, 339, 34)])); 
        pushString($context, $config, ' edition', StyString('QUOTE', ' edition', [('plain.bst', 339, 35, 339, 45)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 339, 46, 339, 47)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'edition', [('plain.bst', 339, 10, 339, 17)]), StyString('QUOTE', 't', [('plain.bst', 339, 18, 339, 21)]), StyString('LITERAL', 'change.case$', [('plain.bst', 339, 22, 339, 34)]), StyString('QUOTE', ' edition', [('plain.bst', 339, 35, 339, 45)]), StyString('LITERAL', '*', [('plain.bst', 339, 46, 339, 47)]))], [('plain.bst', 339, 8, 339, 49)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 340, 6, 340, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 337, 6, 337, 18)]), StyString('LITERAL', 'mid.sentence', [('plain.bst', 337, 19, 337, 31)]), StyString('LITERAL', '=', [('plain.bst', 337, 32, 337, 33)]), StyString('BLOCK', [(StyString('LITERAL', 'edition', [('plain.bst', 338, 10, 338, 17)]), StyString('QUOTE', 'l', [('plain.bst', 338, 18, 338, 21)]), StyString('LITERAL', 'change.case$', [('plain.bst', 338, 22, 338, 34)]), StyString('QUOTE', ' edition', [('plain.bst', 338, 35, 338, 45)]), StyString('LITERAL', '*', [('plain.bst', 338, 46, 338, 47)]))], [('plain.bst', 338, 8, 338, 49)]), StyString('BLOCK', [(StyString('LITERAL', 'edition', [('plain.bst', 339, 10, 339, 17)]), StyString('QUOTE', 't', [('plain.bst', 339, 18, 339, 21)]), StyString('LITERAL', 'change.case$', [('plain.bst', 339, 22, 339, 34)]), StyString('QUOTE', ' edition', [('plain.bst', 339, 35, 339, 45)]), StyString('LITERAL', '*', [('plain.bst', 339, 46, 339, 47)]))], [('plain.bst', 339, 8, 339, 49)]), StyString('LITERAL', 'if$', [('plain.bst', 340, 6, 340, 9)]))], [('plain.bst', 337, 4, 341, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 342, 2, 342, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.edition', $bst__formatZoedition, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 333, 1, 334, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.edition', [('plain.bst', 334, 10, 334, 24)]))], [('plain.bst', 334, 9, 334, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'edition', [('plain.bst', 335, 2, 335, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 335, 10, 335, 16)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 336, 6, 336, 8)]))], [('plain.bst', 336, 4, 336, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [('plain.bst', 337, 6, 337, 18)]), StyString('LITERAL', 'mid.sentence', [('plain.bst', 337, 19, 337, 31)]), StyString('LITERAL', '=', [('plain.bst', 337, 32, 337, 33)]), StyString('BLOCK', [(StyString('LITERAL', 'edition', [('plain.bst', 338, 10, 338, 17)]), StyString('QUOTE', 'l', [('plain.bst', 338, 18, 338, 21)]), StyString('LITERAL', 'change.case$', [('plain.bst', 338, 22, 338, 34)]), StyString('QUOTE', ' edition', [('plain.bst', 338, 35, 338, 45)]), StyString('LITERAL', '*', [('plain.bst', 338, 46, 338, 47)]))], [('plain.bst', 338, 8, 338, 49)]), StyString('BLOCK', [(StyString('LITERAL', 'edition', [('plain.bst', 339, 10, 339, 17)]), StyString('QUOTE', 't', [('plain.bst', 339, 18, 339, 21)]), StyString('LITERAL', 'change.case$', [('plain.bst', 339, 22, 339, 34)]), StyString('QUOTE', ' edition', [('plain.bst', 339, 35, 339, 45)]), StyString('LITERAL', '*', [('plain.bst', 339, 46, 339, 47)]))], [('plain.bst', 339, 8, 339, 49)]), StyString('LITERAL', 'if$', [('plain.bst', 340, 6, 340, 9)]))], [('plain.bst', 337, 4, 341, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 342, 2, 342, 5)]))], [('plain.bst', 334, 26, 343, 2)]))], [('plain.bst', 333, 1, 343, 2)])); ; 
  defineGlobalInteger($context, $config, 'multiresult', StyString('LITERAL', 'multiresult', [('plain.bst', 345, 11, 345, 22)])); 
  my $bst__multiZopageZocheck = sub { 
    my ($context, $config) = @_; 
    pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 348, 2, 348, 4)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 348, 5, 348, 7)])); 
    pushInteger($context, $config, 0, StyString('NUMBER', 0, [('plain.bst', 349, 2, 349, 4)])); 
    pushGlobalInteger($context, $config, 'multiresult', StyString('REFERENCE', 'multiresult', [('plain.bst', 349, 5, 349, 17)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 349, 18, 349, 20)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalInteger($context, $config, 'multiresult', StyString('LITERAL', 'multiresult', [('plain.bst', 350, 6, 350, 17)])); 
      $bst__not->($context, $config, StyString('LITERAL', 'not', [('plain.bst', 350, 18, 350, 21)])); 
      lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 351, 6, 351, 7)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 351, 8, 351, 14)])); 
      $bst__not->($context, $config, StyString('LITERAL', 'not', [('plain.bst', 351, 15, 351, 18)])); 
      $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 352, 6, 352, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'multiresult', [('plain.bst', 350, 6, 350, 17)]), StyString('LITERAL', 'not', [('plain.bst', 350, 18, 350, 21)]), StyString('LITERAL', 't', [('plain.bst', 351, 6, 351, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 351, 8, 351, 14)]), StyString('LITERAL', 'not', [('plain.bst', 351, 15, 351, 18)]), StyString('LITERAL', 'and', [('plain.bst', 352, 6, 352, 9)]))], [('plain.bst', 350, 4, 353, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 354, 6, 354, 7)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 354, 8, 354, 10)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 354, 11, 354, 13)])); 
      builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 354, 14, 354, 24)])); 
      builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 355, 6, 355, 16)])); 
      pushString($context, $config, '-', StyString('QUOTE', '-', [('plain.bst', 355, 17, 355, 20)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 355, 21, 355, 22)])); 
      builtinSwap($context, $config, StyString('LITERAL', 'swap$', [('plain.bst', 356, 6, 356, 11)])); 
      builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 356, 12, 356, 22)])); 
      pushString($context, $config, ',', StyString('QUOTE', ',', [('plain.bst', 356, 23, 356, 26)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 356, 27, 356, 28)])); 
      builtinSwap($context, $config, StyString('LITERAL', 'swap$', [('plain.bst', 357, 6, 357, 11)])); 
      pushString($context, $config, '+', StyString('QUOTE', '+', [('plain.bst', 357, 12, 357, 15)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 357, 16, 357, 17)])); 
      $bst__or->($context, $config, StyString('LITERAL', 'or', [('plain.bst', 358, 6, 358, 8)])); 
      $bst__or->($context, $config, StyString('LITERAL', 'or', [('plain.bst', 358, 9, 358, 11)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 359, 10, 359, 12)])); 
        pushGlobalInteger($context, $config, 'multiresult', StyString('REFERENCE', 'multiresult', [('plain.bst', 359, 13, 359, 25)])); 
        builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 359, 26, 359, 28)])); 
      }, StyString('BLOCK', [(StyString('NUMBER', 1, [('plain.bst', 359, 10, 359, 12)]), StyString('REFERENCE', 'multiresult', [('plain.bst', 359, 13, 359, 25)]), StyString('LITERAL', ':=', [('plain.bst', 359, 26, 359, 28)]))], [('plain.bst', 359, 8, 359, 30)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 360, 10, 360, 11)])); 
        pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 360, 12, 360, 14)])); 
        lookupGlobalInteger($context, $config, 'global.max$', StyString('LITERAL', 'global.max$', [('plain.bst', 360, 15, 360, 26)])); 
        builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 360, 27, 360, 37)])); 
        pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 360, 38, 360, 40)])); 
        builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 360, 41, 360, 43)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 360, 10, 360, 11)]), StyString('NUMBER', 2, [('plain.bst', 360, 12, 360, 14)]), StyString('LITERAL', 'global.max$', [('plain.bst', 360, 15, 360, 26)]), StyString('LITERAL', 'substring$', [('plain.bst', 360, 27, 360, 37)]), StyString('REFERENCE', 't', [('plain.bst', 360, 38, 360, 40)]), StyString('LITERAL', ':=', [('plain.bst', 360, 41, 360, 43)]))], [('plain.bst', 360, 8, 360, 45)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 361, 6, 361, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 354, 6, 354, 7)]), StyString('NUMBER', 1, [('plain.bst', 354, 8, 354, 10)]), StyString('NUMBER', 1, [('plain.bst', 354, 11, 354, 13)]), StyString('LITERAL', 'substring$', [('plain.bst', 354, 14, 354, 24)]), StyString('LITERAL', 'duplicate$', [('plain.bst', 355, 6, 355, 16)]), StyString('QUOTE', '-', [('plain.bst', 355, 17, 355, 20)]), StyString('LITERAL', '=', [('plain.bst', 355, 21, 355, 22)]), StyString('LITERAL', 'swap$', [('plain.bst', 356, 6, 356, 11)]), StyString('LITERAL', 'duplicate$', [('plain.bst', 356, 12, 356, 22)]), StyString('QUOTE', ',', [('plain.bst', 356, 23, 356, 26)]), StyString('LITERAL', '=', [('plain.bst', 356, 27, 356, 28)]), StyString('LITERAL', 'swap$', [('plain.bst', 357, 6, 357, 11)]), StyString('QUOTE', '+', [('plain.bst', 357, 12, 357, 15)]), StyString('LITERAL', '=', [('plain.bst', 357, 16, 357, 17)]), StyString('LITERAL', 'or', [('plain.bst', 358, 6, 358, 8)]), StyString('LITERAL', 'or', [('plain.bst', 358, 9, 358, 11)]), StyString('BLOCK', [(StyString('NUMBER', 1, [('plain.bst', 359, 10, 359, 12)]), StyString('REFERENCE', 'multiresult', [('plain.bst', 359, 13, 359, 25)]), StyString('LITERAL', ':=', [('plain.bst', 359, 26, 359, 28)]))], [('plain.bst', 359, 8, 359, 30)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 360, 10, 360, 11)]), StyString('NUMBER', 2, [('plain.bst', 360, 12, 360, 14)]), StyString('LITERAL', 'global.max$', [('plain.bst', 360, 15, 360, 26)]), StyString('LITERAL', 'substring$', [('plain.bst', 360, 27, 360, 37)]), StyString('REFERENCE', 't', [('plain.bst', 360, 38, 360, 40)]), StyString('LITERAL', ':=', [('plain.bst', 360, 41, 360, 43)]))], [('plain.bst', 360, 8, 360, 45)]), StyString('LITERAL', 'if$', [('plain.bst', 361, 6, 361, 9)]))], [('plain.bst', 354, 4, 362, 5)])); 
    builtinWhile($context, $config, StyString('LITERAL', 'while$', [('plain.bst', 363, 2, 363, 8)])); 
    lookupGlobalInteger($context, $config, 'multiresult', StyString('LITERAL', 'multiresult', [('plain.bst', 364, 2, 364, 13)])); 
  }; 
  registerFunctionDefinition($context, $config, 'multi.page.check', $bst__multiZopageZocheck, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 346, 1, 347, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'multi.page.check', [('plain.bst', 347, 10, 347, 26)]))], [('plain.bst', 347, 9, 347, 27)]), StyString('BLOCK', [(StyString('REFERENCE', 't', [('plain.bst', 348, 2, 348, 4)]), StyString('LITERAL', ':=', [('plain.bst', 348, 5, 348, 7)]), StyString('NUMBER', 0, [('plain.bst', 349, 2, 349, 4)]), StyString('REFERENCE', 'multiresult', [('plain.bst', 349, 5, 349, 17)]), StyString('LITERAL', ':=', [('plain.bst', 349, 18, 349, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'multiresult', [('plain.bst', 350, 6, 350, 17)]), StyString('LITERAL', 'not', [('plain.bst', 350, 18, 350, 21)]), StyString('LITERAL', 't', [('plain.bst', 351, 6, 351, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 351, 8, 351, 14)]), StyString('LITERAL', 'not', [('plain.bst', 351, 15, 351, 18)]), StyString('LITERAL', 'and', [('plain.bst', 352, 6, 352, 9)]))], [('plain.bst', 350, 4, 353, 5)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 354, 6, 354, 7)]), StyString('NUMBER', 1, [('plain.bst', 354, 8, 354, 10)]), StyString('NUMBER', 1, [('plain.bst', 354, 11, 354, 13)]), StyString('LITERAL', 'substring$', [('plain.bst', 354, 14, 354, 24)]), StyString('LITERAL', 'duplicate$', [('plain.bst', 355, 6, 355, 16)]), StyString('QUOTE', '-', [('plain.bst', 355, 17, 355, 20)]), StyString('LITERAL', '=', [('plain.bst', 355, 21, 355, 22)]), StyString('LITERAL', 'swap$', [('plain.bst', 356, 6, 356, 11)]), StyString('LITERAL', 'duplicate$', [('plain.bst', 356, 12, 356, 22)]), StyString('QUOTE', ',', [('plain.bst', 356, 23, 356, 26)]), StyString('LITERAL', '=', [('plain.bst', 356, 27, 356, 28)]), StyString('LITERAL', 'swap$', [('plain.bst', 357, 6, 357, 11)]), StyString('QUOTE', '+', [('plain.bst', 357, 12, 357, 15)]), StyString('LITERAL', '=', [('plain.bst', 357, 16, 357, 17)]), StyString('LITERAL', 'or', [('plain.bst', 358, 6, 358, 8)]), StyString('LITERAL', 'or', [('plain.bst', 358, 9, 358, 11)]), StyString('BLOCK', [(StyString('NUMBER', 1, [('plain.bst', 359, 10, 359, 12)]), StyString('REFERENCE', 'multiresult', [('plain.bst', 359, 13, 359, 25)]), StyString('LITERAL', ':=', [('plain.bst', 359, 26, 359, 28)]))], [('plain.bst', 359, 8, 359, 30)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 360, 10, 360, 11)]), StyString('NUMBER', 2, [('plain.bst', 360, 12, 360, 14)]), StyString('LITERAL', 'global.max$', [('plain.bst', 360, 15, 360, 26)]), StyString('LITERAL', 'substring$', [('plain.bst', 360, 27, 360, 37)]), StyString('REFERENCE', 't', [('plain.bst', 360, 38, 360, 40)]), StyString('LITERAL', ':=', [('plain.bst', 360, 41, 360, 43)]))], [('plain.bst', 360, 8, 360, 45)]), StyString('LITERAL', 'if$', [('plain.bst', 361, 6, 361, 9)]))], [('plain.bst', 354, 4, 362, 5)]), StyString('LITERAL', 'while$', [('plain.bst', 363, 2, 363, 8)]), StyString('LITERAL', 'multiresult', [('plain.bst', 364, 2, 364, 13)]))], [('plain.bst', 347, 28, 365, 2)]))], [('plain.bst', 346, 1, 365, 2)])); ; 
  my $bst__formatZopages = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'pages', StyString('LITERAL', 'pages', [('plain.bst', 368, 2, 368, 7)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 368, 8, 368, 14)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 369, 6, 369, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 369, 6, 369, 8)]))], [('plain.bst', 369, 4, 369, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'pages', StyString('LITERAL', 'pages', [('plain.bst', 370, 6, 370, 11)])); 
      $bst__multiZopageZocheck->($context, $config, StyString('LITERAL', 'multi.page.check', [('plain.bst', 370, 12, 370, 28)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'pages', StyString('QUOTE', 'pages', [('plain.bst', 371, 10, 371, 17)])); 
        lookupEntryField($context, $config, 'pages', StyString('LITERAL', 'pages', [('plain.bst', 371, 18, 371, 23)])); 
        $bst__nZodashify->($context, $config, StyString('LITERAL', 'n.dashify', [('plain.bst', 371, 24, 371, 33)])); 
        $bst__tieZoorZospaceZoconnect->($context, $config, StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 371, 34, 371, 54)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'pages', [('plain.bst', 371, 10, 371, 17)]), StyString('LITERAL', 'pages', [('plain.bst', 371, 18, 371, 23)]), StyString('LITERAL', 'n.dashify', [('plain.bst', 371, 24, 371, 33)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 371, 34, 371, 54)]))], [('plain.bst', 371, 8, 371, 56)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'page', StyString('QUOTE', 'page', [('plain.bst', 372, 10, 372, 16)])); 
        lookupEntryField($context, $config, 'pages', StyString('LITERAL', 'pages', [('plain.bst', 372, 17, 372, 22)])); 
        $bst__tieZoorZospaceZoconnect->($context, $config, StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 372, 23, 372, 43)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'page', [('plain.bst', 372, 10, 372, 16)]), StyString('LITERAL', 'pages', [('plain.bst', 372, 17, 372, 22)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 372, 23, 372, 43)]))], [('plain.bst', 372, 8, 372, 45)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 373, 6, 373, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pages', [('plain.bst', 370, 6, 370, 11)]), StyString('LITERAL', 'multi.page.check', [('plain.bst', 370, 12, 370, 28)]), StyString('BLOCK', [(StyString('QUOTE', 'pages', [('plain.bst', 371, 10, 371, 17)]), StyString('LITERAL', 'pages', [('plain.bst', 371, 18, 371, 23)]), StyString('LITERAL', 'n.dashify', [('plain.bst', 371, 24, 371, 33)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 371, 34, 371, 54)]))], [('plain.bst', 371, 8, 371, 56)]), StyString('BLOCK', [(StyString('QUOTE', 'page', [('plain.bst', 372, 10, 372, 16)]), StyString('LITERAL', 'pages', [('plain.bst', 372, 17, 372, 22)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 372, 23, 372, 43)]))], [('plain.bst', 372, 8, 372, 45)]), StyString('LITERAL', 'if$', [('plain.bst', 373, 6, 373, 9)]))], [('plain.bst', 370, 4, 374, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 375, 2, 375, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.pages', $bst__formatZopages, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 366, 1, 367, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.pages', [('plain.bst', 367, 10, 367, 22)]))], [('plain.bst', 367, 9, 367, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'pages', [('plain.bst', 368, 2, 368, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 368, 8, 368, 14)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 369, 6, 369, 8)]))], [('plain.bst', 369, 4, 369, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'pages', [('plain.bst', 370, 6, 370, 11)]), StyString('LITERAL', 'multi.page.check', [('plain.bst', 370, 12, 370, 28)]), StyString('BLOCK', [(StyString('QUOTE', 'pages', [('plain.bst', 371, 10, 371, 17)]), StyString('LITERAL', 'pages', [('plain.bst', 371, 18, 371, 23)]), StyString('LITERAL', 'n.dashify', [('plain.bst', 371, 24, 371, 33)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 371, 34, 371, 54)]))], [('plain.bst', 371, 8, 371, 56)]), StyString('BLOCK', [(StyString('QUOTE', 'page', [('plain.bst', 372, 10, 372, 16)]), StyString('LITERAL', 'pages', [('plain.bst', 372, 17, 372, 22)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 372, 23, 372, 43)]))], [('plain.bst', 372, 8, 372, 45)]), StyString('LITERAL', 'if$', [('plain.bst', 373, 6, 373, 9)]))], [('plain.bst', 370, 4, 374, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 375, 2, 375, 5)]))], [('plain.bst', 367, 24, 376, 2)]))], [('plain.bst', 366, 1, 376, 2)])); ; 
  my $bst__formatZovolZonumZopages = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'volume', StyString('LITERAL', 'volume', [('plain.bst', 379, 2, 379, 8)])); 
    $bst__fieldZoorZonull->($context, $config, StyString('LITERAL', 'field.or.null', [('plain.bst', 379, 9, 379, 22)])); 
    lookupEntryField($context, $config, 'number', StyString('LITERAL', 'number', [('plain.bst', 380, 2, 380, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 380, 9, 380, 15)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 381, 4, 381, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '(', StyString('QUOTE', '(', [('plain.bst', 382, 6, 382, 9)])); 
      lookupEntryField($context, $config, 'number', StyString('LITERAL', 'number', [('plain.bst', 382, 10, 382, 16)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 382, 17, 382, 18)])); 
      pushString($context, $config, ')', StyString('QUOTE', ')', [('plain.bst', 382, 19, 382, 22)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 382, 23, 382, 24)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 382, 25, 382, 26)])); 
      lookupEntryField($context, $config, 'volume', StyString('LITERAL', 'volume', [('plain.bst', 383, 6, 383, 12)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 383, 13, 383, 19)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'there\'s a number but no volume in ', StyString('QUOTE', 'there\'s a number but no volume in ', [('plain.bst', 384, 10, 384, 46)])); 
        builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 384, 47, 384, 52)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 384, 53, 384, 54)])); 
        builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 384, 55, 384, 63)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no volume in ', [('plain.bst', 384, 10, 384, 46)]), StyString('LITERAL', 'cite$', [('plain.bst', 384, 47, 384, 52)]), StyString('LITERAL', '*', [('plain.bst', 384, 53, 384, 54)]), StyString('LITERAL', 'warning$', [('plain.bst', 384, 55, 384, 63)]))], [('plain.bst', 384, 8, 384, 65)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 385, 8, 385, 14)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 386, 6, 386, 9)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '(', [('plain.bst', 382, 6, 382, 9)]), StyString('LITERAL', 'number', [('plain.bst', 382, 10, 382, 16)]), StyString('LITERAL', '*', [('plain.bst', 382, 17, 382, 18)]), StyString('QUOTE', ')', [('plain.bst', 382, 19, 382, 22)]), StyString('LITERAL', '*', [('plain.bst', 382, 23, 382, 24)]), StyString('LITERAL', '*', [('plain.bst', 382, 25, 382, 26)]), StyString('LITERAL', 'volume', [('plain.bst', 383, 6, 383, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 383, 13, 383, 19)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no volume in ', [('plain.bst', 384, 10, 384, 46)]), StyString('LITERAL', 'cite$', [('plain.bst', 384, 47, 384, 52)]), StyString('LITERAL', '*', [('plain.bst', 384, 53, 384, 54)]), StyString('LITERAL', 'warning$', [('plain.bst', 384, 55, 384, 63)]))], [('plain.bst', 384, 8, 384, 65)]), StyString('REFERENCE', 'skip$', [('plain.bst', 385, 8, 385, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 386, 6, 386, 9)]))], [('plain.bst', 382, 4, 387, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 388, 2, 388, 5)])); 
    lookupEntryField($context, $config, 'pages', StyString('LITERAL', 'pages', [('plain.bst', 389, 2, 389, 7)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 389, 8, 389, 14)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 390, 4, 390, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 391, 6, 391, 16)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 391, 17, 391, 23)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        builtinPop($context, $config, StyString('LITERAL', 'pop$', [('plain.bst', 392, 10, 392, 14)])); 
        $bst__formatZopages->($context, $config, StyString('LITERAL', 'format.pages', [('plain.bst', 392, 15, 392, 27)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 392, 10, 392, 14)]), StyString('LITERAL', 'format.pages', [('plain.bst', 392, 15, 392, 27)]))], [('plain.bst', 392, 8, 392, 29)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, ':', StyString('QUOTE', ':', [('plain.bst', 393, 10, 393, 13)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 393, 14, 393, 15)])); 
        lookupEntryField($context, $config, 'pages', StyString('LITERAL', 'pages', [('plain.bst', 393, 16, 393, 21)])); 
        $bst__nZodashify->($context, $config, StyString('LITERAL', 'n.dashify', [('plain.bst', 393, 22, 393, 31)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 393, 32, 393, 33)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ':', [('plain.bst', 393, 10, 393, 13)]), StyString('LITERAL', '*', [('plain.bst', 393, 14, 393, 15)]), StyString('LITERAL', 'pages', [('plain.bst', 393, 16, 393, 21)]), StyString('LITERAL', 'n.dashify', [('plain.bst', 393, 22, 393, 31)]), StyString('LITERAL', '*', [('plain.bst', 393, 32, 393, 33)]))], [('plain.bst', 393, 8, 393, 35)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 394, 6, 394, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'duplicate$', [('plain.bst', 391, 6, 391, 16)]), StyString('LITERAL', 'empty$', [('plain.bst', 391, 17, 391, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 392, 10, 392, 14)]), StyString('LITERAL', 'format.pages', [('plain.bst', 392, 15, 392, 27)]))], [('plain.bst', 392, 8, 392, 29)]), StyString('BLOCK', [(StyString('QUOTE', ':', [('plain.bst', 393, 10, 393, 13)]), StyString('LITERAL', '*', [('plain.bst', 393, 14, 393, 15)]), StyString('LITERAL', 'pages', [('plain.bst', 393, 16, 393, 21)]), StyString('LITERAL', 'n.dashify', [('plain.bst', 393, 22, 393, 31)]), StyString('LITERAL', '*', [('plain.bst', 393, 32, 393, 33)]))], [('plain.bst', 393, 8, 393, 35)]), StyString('LITERAL', 'if$', [('plain.bst', 394, 6, 394, 9)]))], [('plain.bst', 391, 4, 395, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 396, 2, 396, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.vol.num.pages', $bst__formatZovolZonumZopages, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 377, 1, 378, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.vol.num.pages', [('plain.bst', 378, 10, 378, 30)]))], [('plain.bst', 378, 9, 378, 31)]), StyString('BLOCK', [(StyString('LITERAL', 'volume', [('plain.bst', 379, 2, 379, 8)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 379, 9, 379, 22)]), StyString('LITERAL', 'number', [('plain.bst', 380, 2, 380, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 380, 9, 380, 15)]), StyString('REFERENCE', 'skip$', [('plain.bst', 381, 4, 381, 10)]), StyString('BLOCK', [(StyString('QUOTE', '(', [('plain.bst', 382, 6, 382, 9)]), StyString('LITERAL', 'number', [('plain.bst', 382, 10, 382, 16)]), StyString('LITERAL', '*', [('plain.bst', 382, 17, 382, 18)]), StyString('QUOTE', ')', [('plain.bst', 382, 19, 382, 22)]), StyString('LITERAL', '*', [('plain.bst', 382, 23, 382, 24)]), StyString('LITERAL', '*', [('plain.bst', 382, 25, 382, 26)]), StyString('LITERAL', 'volume', [('plain.bst', 383, 6, 383, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 383, 13, 383, 19)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no volume in ', [('plain.bst', 384, 10, 384, 46)]), StyString('LITERAL', 'cite$', [('plain.bst', 384, 47, 384, 52)]), StyString('LITERAL', '*', [('plain.bst', 384, 53, 384, 54)]), StyString('LITERAL', 'warning$', [('plain.bst', 384, 55, 384, 63)]))], [('plain.bst', 384, 8, 384, 65)]), StyString('REFERENCE', 'skip$', [('plain.bst', 385, 8, 385, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 386, 6, 386, 9)]))], [('plain.bst', 382, 4, 387, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 388, 2, 388, 5)]), StyString('LITERAL', 'pages', [('plain.bst', 389, 2, 389, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 389, 8, 389, 14)]), StyString('REFERENCE', 'skip$', [('plain.bst', 390, 4, 390, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'duplicate$', [('plain.bst', 391, 6, 391, 16)]), StyString('LITERAL', 'empty$', [('plain.bst', 391, 17, 391, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 392, 10, 392, 14)]), StyString('LITERAL', 'format.pages', [('plain.bst', 392, 15, 392, 27)]))], [('plain.bst', 392, 8, 392, 29)]), StyString('BLOCK', [(StyString('QUOTE', ':', [('plain.bst', 393, 10, 393, 13)]), StyString('LITERAL', '*', [('plain.bst', 393, 14, 393, 15)]), StyString('LITERAL', 'pages', [('plain.bst', 393, 16, 393, 21)]), StyString('LITERAL', 'n.dashify', [('plain.bst', 393, 22, 393, 31)]), StyString('LITERAL', '*', [('plain.bst', 393, 32, 393, 33)]))], [('plain.bst', 393, 8, 393, 35)]), StyString('LITERAL', 'if$', [('plain.bst', 394, 6, 394, 9)]))], [('plain.bst', 391, 4, 395, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 396, 2, 396, 5)]))], [('plain.bst', 378, 32, 397, 2)]))], [('plain.bst', 377, 1, 397, 2)])); ; 
  my $bst__formatZochapterZopages = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'chapter', StyString('LITERAL', 'chapter', [('plain.bst', 400, 2, 400, 9)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 400, 10, 400, 16)])); 
    pushFunction($context, $config, $bst__formatZopages, StyString('REFERENCE', 'format.pages', [('plain.bst', 401, 4, 401, 17)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'type', StyString('LITERAL', 'type', [('plain.bst', 402, 6, 402, 10)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 402, 11, 402, 17)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'chapter', StyString('QUOTE', 'chapter', [('plain.bst', 403, 10, 403, 19)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'chapter', [('plain.bst', 403, 10, 403, 19)]))], [('plain.bst', 403, 8, 403, 21)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'type', StyString('LITERAL', 'type', [('plain.bst', 404, 10, 404, 14)])); 
        pushString($context, $config, 'l', StyString('QUOTE', 'l', [('plain.bst', 404, 15, 404, 18)])); 
        builtinChangeCase($context, $config, StyString('LITERAL', 'change.case$', [('plain.bst', 404, 19, 404, 31)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'type', [('plain.bst', 404, 10, 404, 14)]), StyString('QUOTE', 'l', [('plain.bst', 404, 15, 404, 18)]), StyString('LITERAL', 'change.case$', [('plain.bst', 404, 19, 404, 31)]))], [('plain.bst', 404, 8, 404, 33)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 405, 6, 405, 9)])); 
      lookupEntryField($context, $config, 'chapter', StyString('LITERAL', 'chapter', [('plain.bst', 406, 6, 406, 13)])); 
      $bst__tieZoorZospaceZoconnect->($context, $config, StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 406, 14, 406, 34)])); 
      lookupEntryField($context, $config, 'pages', StyString('LITERAL', 'pages', [('plain.bst', 407, 6, 407, 11)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 407, 12, 407, 18)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 408, 8, 408, 14)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, ', ', StyString('QUOTE', ', ', [('plain.bst', 409, 10, 409, 14)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 409, 15, 409, 16)])); 
        $bst__formatZopages->($context, $config, StyString('LITERAL', 'format.pages', [('plain.bst', 409, 17, 409, 29)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 409, 30, 409, 31)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 409, 10, 409, 14)]), StyString('LITERAL', '*', [('plain.bst', 409, 15, 409, 16)]), StyString('LITERAL', 'format.pages', [('plain.bst', 409, 17, 409, 29)]), StyString('LITERAL', '*', [('plain.bst', 409, 30, 409, 31)]))], [('plain.bst', 409, 8, 409, 33)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 410, 6, 410, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'type', [('plain.bst', 402, 6, 402, 10)]), StyString('LITERAL', 'empty$', [('plain.bst', 402, 11, 402, 17)]), StyString('BLOCK', [(StyString('QUOTE', 'chapter', [('plain.bst', 403, 10, 403, 19)]))], [('plain.bst', 403, 8, 403, 21)]), StyString('BLOCK', [(StyString('LITERAL', 'type', [('plain.bst', 404, 10, 404, 14)]), StyString('QUOTE', 'l', [('plain.bst', 404, 15, 404, 18)]), StyString('LITERAL', 'change.case$', [('plain.bst', 404, 19, 404, 31)]))], [('plain.bst', 404, 8, 404, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 405, 6, 405, 9)]), StyString('LITERAL', 'chapter', [('plain.bst', 406, 6, 406, 13)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 406, 14, 406, 34)]), StyString('LITERAL', 'pages', [('plain.bst', 407, 6, 407, 11)]), StyString('LITERAL', 'empty$', [('plain.bst', 407, 12, 407, 18)]), StyString('REFERENCE', 'skip$', [('plain.bst', 408, 8, 408, 14)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 409, 10, 409, 14)]), StyString('LITERAL', '*', [('plain.bst', 409, 15, 409, 16)]), StyString('LITERAL', 'format.pages', [('plain.bst', 409, 17, 409, 29)]), StyString('LITERAL', '*', [('plain.bst', 409, 30, 409, 31)]))], [('plain.bst', 409, 8, 409, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 410, 6, 410, 9)]))], [('plain.bst', 402, 4, 411, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 412, 2, 412, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.chapter.pages', $bst__formatZochapterZopages, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 398, 1, 399, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 399, 10, 399, 30)]))], [('plain.bst', 399, 9, 399, 31)]), StyString('BLOCK', [(StyString('LITERAL', 'chapter', [('plain.bst', 400, 2, 400, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 400, 10, 400, 16)]), StyString('REFERENCE', 'format.pages', [('plain.bst', 401, 4, 401, 17)]), StyString('BLOCK', [(StyString('LITERAL', 'type', [('plain.bst', 402, 6, 402, 10)]), StyString('LITERAL', 'empty$', [('plain.bst', 402, 11, 402, 17)]), StyString('BLOCK', [(StyString('QUOTE', 'chapter', [('plain.bst', 403, 10, 403, 19)]))], [('plain.bst', 403, 8, 403, 21)]), StyString('BLOCK', [(StyString('LITERAL', 'type', [('plain.bst', 404, 10, 404, 14)]), StyString('QUOTE', 'l', [('plain.bst', 404, 15, 404, 18)]), StyString('LITERAL', 'change.case$', [('plain.bst', 404, 19, 404, 31)]))], [('plain.bst', 404, 8, 404, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 405, 6, 405, 9)]), StyString('LITERAL', 'chapter', [('plain.bst', 406, 6, 406, 13)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 406, 14, 406, 34)]), StyString('LITERAL', 'pages', [('plain.bst', 407, 6, 407, 11)]), StyString('LITERAL', 'empty$', [('plain.bst', 407, 12, 407, 18)]), StyString('REFERENCE', 'skip$', [('plain.bst', 408, 8, 408, 14)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [('plain.bst', 409, 10, 409, 14)]), StyString('LITERAL', '*', [('plain.bst', 409, 15, 409, 16)]), StyString('LITERAL', 'format.pages', [('plain.bst', 409, 17, 409, 29)]), StyString('LITERAL', '*', [('plain.bst', 409, 30, 409, 31)]))], [('plain.bst', 409, 8, 409, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 410, 6, 410, 9)]))], [('plain.bst', 402, 4, 411, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 412, 2, 412, 5)]))], [('plain.bst', 399, 32, 413, 2)]))], [('plain.bst', 398, 1, 413, 2)])); ; 
  my $bst__formatZoinZoedZobooktitle = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'booktitle', StyString('LITERAL', 'booktitle', [('plain.bst', 416, 2, 416, 11)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 416, 12, 416, 18)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 417, 6, 417, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 417, 6, 417, 8)]))], [('plain.bst', 417, 4, 417, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 418, 6, 418, 12)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 418, 13, 418, 19)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'In ', StyString('QUOTE', 'In ', [('plain.bst', 419, 10, 419, 15)])); 
        lookupEntryField($context, $config, 'booktitle', StyString('LITERAL', 'booktitle', [('plain.bst', 419, 16, 419, 25)])); 
        $bst__emphasizze->($context, $config, StyString('LITERAL', 'emphasize', [('plain.bst', 419, 26, 419, 35)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 419, 36, 419, 37)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 419, 10, 419, 15)]), StyString('LITERAL', 'booktitle', [('plain.bst', 419, 16, 419, 25)]), StyString('LITERAL', 'emphasize', [('plain.bst', 419, 26, 419, 35)]), StyString('LITERAL', '*', [('plain.bst', 419, 36, 419, 37)]))], [('plain.bst', 419, 8, 419, 39)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'In ', StyString('QUOTE', 'In ', [('plain.bst', 420, 10, 420, 15)])); 
        $bst__formatZoeditors->($context, $config, StyString('LITERAL', 'format.editors', [('plain.bst', 420, 16, 420, 30)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 420, 31, 420, 32)])); 
        pushString($context, $config, ', ', StyString('QUOTE', ', ', [('plain.bst', 420, 33, 420, 37)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 420, 38, 420, 39)])); 
        lookupEntryField($context, $config, 'booktitle', StyString('LITERAL', 'booktitle', [('plain.bst', 420, 40, 420, 49)])); 
        $bst__emphasizze->($context, $config, StyString('LITERAL', 'emphasize', [('plain.bst', 420, 50, 420, 59)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 420, 60, 420, 61)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 420, 10, 420, 15)]), StyString('LITERAL', 'format.editors', [('plain.bst', 420, 16, 420, 30)]), StyString('LITERAL', '*', [('plain.bst', 420, 31, 420, 32)]), StyString('QUOTE', ', ', [('plain.bst', 420, 33, 420, 37)]), StyString('LITERAL', '*', [('plain.bst', 420, 38, 420, 39)]), StyString('LITERAL', 'booktitle', [('plain.bst', 420, 40, 420, 49)]), StyString('LITERAL', 'emphasize', [('plain.bst', 420, 50, 420, 59)]), StyString('LITERAL', '*', [('plain.bst', 420, 60, 420, 61)]))], [('plain.bst', 420, 8, 420, 63)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 421, 6, 421, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 418, 6, 418, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 418, 13, 418, 19)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 419, 10, 419, 15)]), StyString('LITERAL', 'booktitle', [('plain.bst', 419, 16, 419, 25)]), StyString('LITERAL', 'emphasize', [('plain.bst', 419, 26, 419, 35)]), StyString('LITERAL', '*', [('plain.bst', 419, 36, 419, 37)]))], [('plain.bst', 419, 8, 419, 39)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 420, 10, 420, 15)]), StyString('LITERAL', 'format.editors', [('plain.bst', 420, 16, 420, 30)]), StyString('LITERAL', '*', [('plain.bst', 420, 31, 420, 32)]), StyString('QUOTE', ', ', [('plain.bst', 420, 33, 420, 37)]), StyString('LITERAL', '*', [('plain.bst', 420, 38, 420, 39)]), StyString('LITERAL', 'booktitle', [('plain.bst', 420, 40, 420, 49)]), StyString('LITERAL', 'emphasize', [('plain.bst', 420, 50, 420, 59)]), StyString('LITERAL', '*', [('plain.bst', 420, 60, 420, 61)]))], [('plain.bst', 420, 8, 420, 63)]), StyString('LITERAL', 'if$', [('plain.bst', 421, 6, 421, 9)]))], [('plain.bst', 418, 4, 422, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 423, 2, 423, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.in.ed.booktitle', $bst__formatZoinZoedZobooktitle, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 414, 1, 415, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.in.ed.booktitle', [('plain.bst', 415, 10, 415, 32)]))], [('plain.bst', 415, 9, 415, 33)]), StyString('BLOCK', [(StyString('LITERAL', 'booktitle', [('plain.bst', 416, 2, 416, 11)]), StyString('LITERAL', 'empty$', [('plain.bst', 416, 12, 416, 18)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 417, 6, 417, 8)]))], [('plain.bst', 417, 4, 417, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 418, 6, 418, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 418, 13, 418, 19)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 419, 10, 419, 15)]), StyString('LITERAL', 'booktitle', [('plain.bst', 419, 16, 419, 25)]), StyString('LITERAL', 'emphasize', [('plain.bst', 419, 26, 419, 35)]), StyString('LITERAL', '*', [('plain.bst', 419, 36, 419, 37)]))], [('plain.bst', 419, 8, 419, 39)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 420, 10, 420, 15)]), StyString('LITERAL', 'format.editors', [('plain.bst', 420, 16, 420, 30)]), StyString('LITERAL', '*', [('plain.bst', 420, 31, 420, 32)]), StyString('QUOTE', ', ', [('plain.bst', 420, 33, 420, 37)]), StyString('LITERAL', '*', [('plain.bst', 420, 38, 420, 39)]), StyString('LITERAL', 'booktitle', [('plain.bst', 420, 40, 420, 49)]), StyString('LITERAL', 'emphasize', [('plain.bst', 420, 50, 420, 59)]), StyString('LITERAL', '*', [('plain.bst', 420, 60, 420, 61)]))], [('plain.bst', 420, 8, 420, 63)]), StyString('LITERAL', 'if$', [('plain.bst', 421, 6, 421, 9)]))], [('plain.bst', 418, 4, 422, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 423, 2, 423, 5)]))], [('plain.bst', 415, 34, 424, 2)]))], [('plain.bst', 414, 1, 424, 2)])); ; 
  my $bst__emptyZomiscZocheck = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 427, 2, 427, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 427, 9, 427, 15)])); 
    lookupEntryField($context, $config, 'title', StyString('LITERAL', 'title', [('plain.bst', 427, 16, 427, 21)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 427, 22, 427, 28)])); 
    lookupEntryField($context, $config, 'howpublished', StyString('LITERAL', 'howpublished', [('plain.bst', 427, 29, 427, 41)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 427, 42, 427, 48)])); 
    lookupEntryField($context, $config, 'month', StyString('LITERAL', 'month', [('plain.bst', 428, 2, 428, 7)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 428, 8, 428, 14)])); 
    lookupEntryField($context, $config, 'year', StyString('LITERAL', 'year', [('plain.bst', 428, 15, 428, 19)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 428, 20, 428, 26)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 428, 27, 428, 31)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 428, 32, 428, 38)])); 
    $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 429, 2, 429, 5)])); 
    $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 429, 6, 429, 9)])); 
    $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 429, 10, 429, 13)])); 
    $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 429, 14, 429, 17)])); 
    $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 429, 18, 429, 21)])); 
    lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 430, 2, 430, 5)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 430, 6, 430, 12)])); 
    $bst__not->($context, $config, StyString('LITERAL', 'not', [('plain.bst', 430, 13, 430, 16)])); 
    $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 430, 17, 430, 20)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 'all relevant fields are empty in ', StyString('QUOTE', 'all relevant fields are empty in ', [('plain.bst', 431, 6, 431, 41)])); 
      builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 431, 42, 431, 47)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 431, 48, 431, 49)])); 
      builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 431, 50, 431, 58)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'all relevant fields are empty in ', [('plain.bst', 431, 6, 431, 41)]), StyString('LITERAL', 'cite$', [('plain.bst', 431, 42, 431, 47)]), StyString('LITERAL', '*', [('plain.bst', 431, 48, 431, 49)]), StyString('LITERAL', 'warning$', [('plain.bst', 431, 50, 431, 58)]))], [('plain.bst', 431, 4, 431, 60)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 432, 4, 432, 10)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 433, 2, 433, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'empty.misc.check', $bst__emptyZomiscZocheck, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 425, 1, 426, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'empty.misc.check', [('plain.bst', 426, 10, 426, 26)]))], [('plain.bst', 426, 9, 426, 27)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 427, 2, 427, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 427, 9, 427, 15)]), StyString('LITERAL', 'title', [('plain.bst', 427, 16, 427, 21)]), StyString('LITERAL', 'empty$', [('plain.bst', 427, 22, 427, 28)]), StyString('LITERAL', 'howpublished', [('plain.bst', 427, 29, 427, 41)]), StyString('LITERAL', 'empty$', [('plain.bst', 427, 42, 427, 48)]), StyString('LITERAL', 'month', [('plain.bst', 428, 2, 428, 7)]), StyString('LITERAL', 'empty$', [('plain.bst', 428, 8, 428, 14)]), StyString('LITERAL', 'year', [('plain.bst', 428, 15, 428, 19)]), StyString('LITERAL', 'empty$', [('plain.bst', 428, 20, 428, 26)]), StyString('LITERAL', 'note', [('plain.bst', 428, 27, 428, 31)]), StyString('LITERAL', 'empty$', [('plain.bst', 428, 32, 428, 38)]), StyString('LITERAL', 'and', [('plain.bst', 429, 2, 429, 5)]), StyString('LITERAL', 'and', [('plain.bst', 429, 6, 429, 9)]), StyString('LITERAL', 'and', [('plain.bst', 429, 10, 429, 13)]), StyString('LITERAL', 'and', [('plain.bst', 429, 14, 429, 17)]), StyString('LITERAL', 'and', [('plain.bst', 429, 18, 429, 21)]), StyString('LITERAL', 'key', [('plain.bst', 430, 2, 430, 5)]), StyString('LITERAL', 'empty$', [('plain.bst', 430, 6, 430, 12)]), StyString('LITERAL', 'not', [('plain.bst', 430, 13, 430, 16)]), StyString('LITERAL', 'and', [('plain.bst', 430, 17, 430, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'all relevant fields are empty in ', [('plain.bst', 431, 6, 431, 41)]), StyString('LITERAL', 'cite$', [('plain.bst', 431, 42, 431, 47)]), StyString('LITERAL', '*', [('plain.bst', 431, 48, 431, 49)]), StyString('LITERAL', 'warning$', [('plain.bst', 431, 50, 431, 58)]))], [('plain.bst', 431, 4, 431, 60)]), StyString('REFERENCE', 'skip$', [('plain.bst', 432, 4, 432, 10)]), StyString('LITERAL', 'if$', [('plain.bst', 433, 2, 433, 5)]))], [('plain.bst', 426, 28, 434, 2)]))], [('plain.bst', 425, 1, 434, 2)])); ; 
  my $bst__formatZothesisZotype = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'type', StyString('LITERAL', 'type', [('plain.bst', 437, 2, 437, 6)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 437, 7, 437, 13)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 438, 4, 438, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinPop($context, $config, StyString('LITERAL', 'pop$', [('plain.bst', 439, 6, 439, 10)])); 
      lookupEntryField($context, $config, 'type', StyString('LITERAL', 'type', [('plain.bst', 440, 6, 440, 10)])); 
      pushString($context, $config, 't', StyString('QUOTE', 't', [('plain.bst', 440, 11, 440, 14)])); 
      builtinChangeCase($context, $config, StyString('LITERAL', 'change.case$', [('plain.bst', 440, 15, 440, 27)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 439, 6, 439, 10)]), StyString('LITERAL', 'type', [('plain.bst', 440, 6, 440, 10)]), StyString('QUOTE', 't', [('plain.bst', 440, 11, 440, 14)]), StyString('LITERAL', 'change.case$', [('plain.bst', 440, 15, 440, 27)]))], [('plain.bst', 439, 4, 441, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 442, 2, 442, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.thesis.type', $bst__formatZothesisZotype, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 435, 1, 436, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.thesis.type', [('plain.bst', 436, 10, 436, 28)]))], [('plain.bst', 436, 9, 436, 29)]), StyString('BLOCK', [(StyString('LITERAL', 'type', [('plain.bst', 437, 2, 437, 6)]), StyString('LITERAL', 'empty$', [('plain.bst', 437, 7, 437, 13)]), StyString('REFERENCE', 'skip$', [('plain.bst', 438, 4, 438, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 439, 6, 439, 10)]), StyString('LITERAL', 'type', [('plain.bst', 440, 6, 440, 10)]), StyString('QUOTE', 't', [('plain.bst', 440, 11, 440, 14)]), StyString('LITERAL', 'change.case$', [('plain.bst', 440, 15, 440, 27)]))], [('plain.bst', 439, 4, 441, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 442, 2, 442, 5)]))], [('plain.bst', 436, 30, 443, 2)]))], [('plain.bst', 435, 1, 443, 2)])); ; 
  my $bst__formatZotrZonumber = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'type', StyString('LITERAL', 'type', [('plain.bst', 446, 2, 446, 6)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 446, 7, 446, 13)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 'Technical Report', StyString('QUOTE', 'Technical Report', [('plain.bst', 447, 6, 447, 24)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'Technical Report', [('plain.bst', 447, 6, 447, 24)]))], [('plain.bst', 447, 4, 447, 26)])); 
    pushEntryField($context, $config, 'type', StyString('REFERENCE', 'type', [('plain.bst', 448, 4, 448, 9)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 449, 2, 449, 5)])); 
    lookupEntryField($context, $config, 'number', StyString('LITERAL', 'number', [('plain.bst', 450, 2, 450, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 450, 9, 450, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 't', StyString('QUOTE', 't', [('plain.bst', 451, 6, 451, 9)])); 
      builtinChangeCase($context, $config, StyString('LITERAL', 'change.case$', [('plain.bst', 451, 10, 451, 22)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 't', [('plain.bst', 451, 6, 451, 9)]), StyString('LITERAL', 'change.case$', [('plain.bst', 451, 10, 451, 22)]))], [('plain.bst', 451, 4, 451, 24)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'number', StyString('LITERAL', 'number', [('plain.bst', 452, 6, 452, 12)])); 
      $bst__tieZoorZospaceZoconnect->($context, $config, StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 452, 13, 452, 33)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'number', [('plain.bst', 452, 6, 452, 12)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 452, 13, 452, 33)]))], [('plain.bst', 452, 4, 452, 35)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 453, 2, 453, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.tr.number', $bst__formatZotrZonumber, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 444, 1, 445, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.tr.number', [('plain.bst', 445, 10, 445, 26)]))], [('plain.bst', 445, 9, 445, 27)]), StyString('BLOCK', [(StyString('LITERAL', 'type', [('plain.bst', 446, 2, 446, 6)]), StyString('LITERAL', 'empty$', [('plain.bst', 446, 7, 446, 13)]), StyString('BLOCK', [(StyString('QUOTE', 'Technical Report', [('plain.bst', 447, 6, 447, 24)]))], [('plain.bst', 447, 4, 447, 26)]), StyString('REFERENCE', 'type', [('plain.bst', 448, 4, 448, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 449, 2, 449, 5)]), StyString('LITERAL', 'number', [('plain.bst', 450, 2, 450, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 450, 9, 450, 15)]), StyString('BLOCK', [(StyString('QUOTE', 't', [('plain.bst', 451, 6, 451, 9)]), StyString('LITERAL', 'change.case$', [('plain.bst', 451, 10, 451, 22)]))], [('plain.bst', 451, 4, 451, 24)]), StyString('BLOCK', [(StyString('LITERAL', 'number', [('plain.bst', 452, 6, 452, 12)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 452, 13, 452, 33)]))], [('plain.bst', 452, 4, 452, 35)]), StyString('LITERAL', 'if$', [('plain.bst', 453, 2, 453, 5)]))], [('plain.bst', 445, 28, 454, 2)]))], [('plain.bst', 444, 1, 454, 2)])); ; 
  my $bst__formatZoarticleZocrossref = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 457, 2, 457, 5)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 457, 6, 457, 12)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'journal', StyString('LITERAL', 'journal', [('plain.bst', 458, 6, 458, 13)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 458, 14, 458, 20)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'need key or journal for ', StyString('QUOTE', 'need key or journal for ', [('plain.bst', 459, 10, 459, 36)])); 
        builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 459, 37, 459, 42)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 459, 43, 459, 44)])); 
        pushString($context, $config, ' to crossref ', StyString('QUOTE', ' to crossref ', [('plain.bst', 459, 45, 459, 60)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 459, 61, 459, 62)])); 
        lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 459, 63, 459, 71)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 459, 72, 459, 73)])); 
        builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 460, 10, 460, 18)])); 
        pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 461, 10, 461, 12)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'need key or journal for ', [('plain.bst', 459, 10, 459, 36)]), StyString('LITERAL', 'cite$', [('plain.bst', 459, 37, 459, 42)]), StyString('LITERAL', '*', [('plain.bst', 459, 43, 459, 44)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 459, 45, 459, 60)]), StyString('LITERAL', '*', [('plain.bst', 459, 61, 459, 62)]), StyString('LITERAL', 'crossref', [('plain.bst', 459, 63, 459, 71)]), StyString('LITERAL', '*', [('plain.bst', 459, 72, 459, 73)]), StyString('LITERAL', 'warning$', [('plain.bst', 460, 10, 460, 18)]), StyString('QUOTE', '', [('plain.bst', 461, 10, 461, 12)]))], [('plain.bst', 459, 8, 462, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'In {\\em ', StyString('QUOTE', 'In {\\em ', [('plain.bst', 463, 10, 463, 20)])); 
        lookupEntryField($context, $config, 'journal', StyString('LITERAL', 'journal', [('plain.bst', 463, 21, 463, 28)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 463, 29, 463, 30)])); 
        pushString($context, $config, '\\/}', StyString('QUOTE', '\\/}', [('plain.bst', 463, 31, 463, 36)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 463, 37, 463, 38)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [('plain.bst', 463, 10, 463, 20)]), StyString('LITERAL', 'journal', [('plain.bst', 463, 21, 463, 28)]), StyString('LITERAL', '*', [('plain.bst', 463, 29, 463, 30)]), StyString('QUOTE', '\\/}', [('plain.bst', 463, 31, 463, 36)]), StyString('LITERAL', '*', [('plain.bst', 463, 37, 463, 38)]))], [('plain.bst', 463, 8, 463, 40)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 464, 6, 464, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'journal', [('plain.bst', 458, 6, 458, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 458, 14, 458, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'need key or journal for ', [('plain.bst', 459, 10, 459, 36)]), StyString('LITERAL', 'cite$', [('plain.bst', 459, 37, 459, 42)]), StyString('LITERAL', '*', [('plain.bst', 459, 43, 459, 44)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 459, 45, 459, 60)]), StyString('LITERAL', '*', [('plain.bst', 459, 61, 459, 62)]), StyString('LITERAL', 'crossref', [('plain.bst', 459, 63, 459, 71)]), StyString('LITERAL', '*', [('plain.bst', 459, 72, 459, 73)]), StyString('LITERAL', 'warning$', [('plain.bst', 460, 10, 460, 18)]), StyString('QUOTE', '', [('plain.bst', 461, 10, 461, 12)]))], [('plain.bst', 459, 8, 462, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [('plain.bst', 463, 10, 463, 20)]), StyString('LITERAL', 'journal', [('plain.bst', 463, 21, 463, 28)]), StyString('LITERAL', '*', [('plain.bst', 463, 29, 463, 30)]), StyString('QUOTE', '\\/}', [('plain.bst', 463, 31, 463, 36)]), StyString('LITERAL', '*', [('plain.bst', 463, 37, 463, 38)]))], [('plain.bst', 463, 8, 463, 40)]), StyString('LITERAL', 'if$', [('plain.bst', 464, 6, 464, 9)]))], [('plain.bst', 458, 4, 465, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 'In ', StyString('QUOTE', 'In ', [('plain.bst', 466, 6, 466, 11)])); 
      lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 466, 12, 466, 15)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 466, 16, 466, 17)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 466, 6, 466, 11)]), StyString('LITERAL', 'key', [('plain.bst', 466, 12, 466, 15)]), StyString('LITERAL', '*', [('plain.bst', 466, 16, 466, 17)]))], [('plain.bst', 466, 4, 466, 19)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 467, 2, 467, 5)])); 
    pushString($context, $config, ' \\cite{', StyString('QUOTE', ' \\cite{', [('plain.bst', 468, 2, 468, 11)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 468, 12, 468, 13)])); 
    lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 468, 14, 468, 22)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 468, 23, 468, 24)])); 
    pushString($context, $config, '}', StyString('QUOTE', '}', [('plain.bst', 468, 25, 468, 28)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 468, 29, 468, 30)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.article.crossref', $bst__formatZoarticleZocrossref, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 455, 1, 456, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.article.crossref', [('plain.bst', 456, 10, 456, 33)]))], [('plain.bst', 456, 9, 456, 34)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 457, 2, 457, 5)]), StyString('LITERAL', 'empty$', [('plain.bst', 457, 6, 457, 12)]), StyString('BLOCK', [(StyString('LITERAL', 'journal', [('plain.bst', 458, 6, 458, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 458, 14, 458, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'need key or journal for ', [('plain.bst', 459, 10, 459, 36)]), StyString('LITERAL', 'cite$', [('plain.bst', 459, 37, 459, 42)]), StyString('LITERAL', '*', [('plain.bst', 459, 43, 459, 44)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 459, 45, 459, 60)]), StyString('LITERAL', '*', [('plain.bst', 459, 61, 459, 62)]), StyString('LITERAL', 'crossref', [('plain.bst', 459, 63, 459, 71)]), StyString('LITERAL', '*', [('plain.bst', 459, 72, 459, 73)]), StyString('LITERAL', 'warning$', [('plain.bst', 460, 10, 460, 18)]), StyString('QUOTE', '', [('plain.bst', 461, 10, 461, 12)]))], [('plain.bst', 459, 8, 462, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [('plain.bst', 463, 10, 463, 20)]), StyString('LITERAL', 'journal', [('plain.bst', 463, 21, 463, 28)]), StyString('LITERAL', '*', [('plain.bst', 463, 29, 463, 30)]), StyString('QUOTE', '\\/}', [('plain.bst', 463, 31, 463, 36)]), StyString('LITERAL', '*', [('plain.bst', 463, 37, 463, 38)]))], [('plain.bst', 463, 8, 463, 40)]), StyString('LITERAL', 'if$', [('plain.bst', 464, 6, 464, 9)]))], [('plain.bst', 458, 4, 465, 5)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 466, 6, 466, 11)]), StyString('LITERAL', 'key', [('plain.bst', 466, 12, 466, 15)]), StyString('LITERAL', '*', [('plain.bst', 466, 16, 466, 17)]))], [('plain.bst', 466, 4, 466, 19)]), StyString('LITERAL', 'if$', [('plain.bst', 467, 2, 467, 5)]), StyString('QUOTE', ' \\cite{', [('plain.bst', 468, 2, 468, 11)]), StyString('LITERAL', '*', [('plain.bst', 468, 12, 468, 13)]), StyString('LITERAL', 'crossref', [('plain.bst', 468, 14, 468, 22)]), StyString('LITERAL', '*', [('plain.bst', 468, 23, 468, 24)]), StyString('QUOTE', '}', [('plain.bst', 468, 25, 468, 28)]), StyString('LITERAL', '*', [('plain.bst', 468, 29, 468, 30)]))], [('plain.bst', 456, 35, 469, 2)]))], [('plain.bst', 455, 1, 469, 2)])); ; 
  my $bst__formatZocrossrefZoeditor = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 472, 2, 472, 8)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 472, 9, 472, 11)])); 
    pushString($context, $config, '{vv~}{ll}', StyString('QUOTE', '{vv~}{ll}', [('plain.bst', 472, 12, 472, 23)])); 
    builtinFormatName($context, $config, StyString('LITERAL', 'format.name$', [('plain.bst', 472, 24, 472, 36)])); 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 473, 2, 473, 8)])); 
    builtinNumNames($context, $config, StyString('LITERAL', 'num.names$', [('plain.bst', 473, 9, 473, 19)])); 
    builtinDuplicate($context, $config, StyString('LITERAL', 'duplicate$', [('plain.bst', 473, 20, 473, 30)])); 
    pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 474, 2, 474, 4)])); 
    builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 474, 5, 474, 6)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinPop($context, $config, StyString('LITERAL', 'pop$', [('plain.bst', 475, 6, 475, 10)])); 
      pushString($context, $config, ' et~al.', StyString('QUOTE', ' et~al.', [('plain.bst', 475, 11, 475, 20)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 475, 21, 475, 22)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 475, 6, 475, 10)]), StyString('QUOTE', ' et~al.', [('plain.bst', 475, 11, 475, 20)]), StyString('LITERAL', '*', [('plain.bst', 475, 21, 475, 22)]))], [('plain.bst', 475, 4, 475, 24)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 476, 6, 476, 8)])); 
      builtinZl($context, $config, StyString('LITERAL', '<', [('plain.bst', 476, 9, 476, 10)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 477, 8, 477, 14)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 478, 10, 478, 16)])); 
        pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 478, 17, 478, 19)])); 
        pushString($context, $config, '{ff }{vv }{ll}{ jj}', StyString('QUOTE', '{ff }{vv }{ll}{ jj}', [('plain.bst', 478, 20, 478, 41)])); 
        builtinFormatName($context, $config, StyString('LITERAL', 'format.name$', [('plain.bst', 478, 42, 478, 54)])); 
        pushString($context, $config, 'others', StyString('QUOTE', 'others', [('plain.bst', 478, 55, 478, 63)])); 
        builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 478, 64, 478, 65)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, ' et~al.', StyString('QUOTE', ' et~al.', [('plain.bst', 479, 14, 479, 23)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 479, 24, 479, 25)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 479, 14, 479, 23)]), StyString('LITERAL', '*', [('plain.bst', 479, 24, 479, 25)]))], [('plain.bst', 479, 12, 479, 27)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, ' and ', StyString('QUOTE', ' and ', [('plain.bst', 480, 14, 480, 21)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 480, 22, 480, 23)])); 
          lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 480, 24, 480, 30)])); 
          pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 480, 31, 480, 33)])); 
          pushString($context, $config, '{vv~}{ll}', StyString('QUOTE', '{vv~}{ll}', [('plain.bst', 480, 34, 480, 45)])); 
          builtinFormatName($context, $config, StyString('LITERAL', 'format.name$', [('plain.bst', 480, 46, 480, 58)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 480, 59, 480, 60)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 480, 14, 480, 21)]), StyString('LITERAL', '*', [('plain.bst', 480, 22, 480, 23)]), StyString('LITERAL', 'editor', [('plain.bst', 480, 24, 480, 30)]), StyString('NUMBER', 2, [('plain.bst', 480, 31, 480, 33)]), StyString('QUOTE', '{vv~}{ll}', [('plain.bst', 480, 34, 480, 45)]), StyString('LITERAL', 'format.name$', [('plain.bst', 480, 46, 480, 58)]), StyString('LITERAL', '*', [('plain.bst', 480, 59, 480, 60)]))], [('plain.bst', 480, 12, 480, 62)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 481, 10, 481, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 478, 10, 478, 16)]), StyString('NUMBER', 2, [('plain.bst', 478, 17, 478, 19)]), StyString('QUOTE', '{ff }{vv }{ll}{ jj}', [('plain.bst', 478, 20, 478, 41)]), StyString('LITERAL', 'format.name$', [('plain.bst', 478, 42, 478, 54)]), StyString('QUOTE', 'others', [('plain.bst', 478, 55, 478, 63)]), StyString('LITERAL', '=', [('plain.bst', 478, 64, 478, 65)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 479, 14, 479, 23)]), StyString('LITERAL', '*', [('plain.bst', 479, 24, 479, 25)]))], [('plain.bst', 479, 12, 479, 27)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 480, 14, 480, 21)]), StyString('LITERAL', '*', [('plain.bst', 480, 22, 480, 23)]), StyString('LITERAL', 'editor', [('plain.bst', 480, 24, 480, 30)]), StyString('NUMBER', 2, [('plain.bst', 480, 31, 480, 33)]), StyString('QUOTE', '{vv~}{ll}', [('plain.bst', 480, 34, 480, 45)]), StyString('LITERAL', 'format.name$', [('plain.bst', 480, 46, 480, 58)]), StyString('LITERAL', '*', [('plain.bst', 480, 59, 480, 60)]))], [('plain.bst', 480, 12, 480, 62)]), StyString('LITERAL', 'if$', [('plain.bst', 481, 10, 481, 13)]))], [('plain.bst', 478, 8, 482, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 483, 6, 483, 9)])); 
    }, StyString('BLOCK', [(StyString('NUMBER', 2, [('plain.bst', 476, 6, 476, 8)]), StyString('LITERAL', '<', [('plain.bst', 476, 9, 476, 10)]), StyString('REFERENCE', 'skip$', [('plain.bst', 477, 8, 477, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 478, 10, 478, 16)]), StyString('NUMBER', 2, [('plain.bst', 478, 17, 478, 19)]), StyString('QUOTE', '{ff }{vv }{ll}{ jj}', [('plain.bst', 478, 20, 478, 41)]), StyString('LITERAL', 'format.name$', [('plain.bst', 478, 42, 478, 54)]), StyString('QUOTE', 'others', [('plain.bst', 478, 55, 478, 63)]), StyString('LITERAL', '=', [('plain.bst', 478, 64, 478, 65)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 479, 14, 479, 23)]), StyString('LITERAL', '*', [('plain.bst', 479, 24, 479, 25)]))], [('plain.bst', 479, 12, 479, 27)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 480, 14, 480, 21)]), StyString('LITERAL', '*', [('plain.bst', 480, 22, 480, 23)]), StyString('LITERAL', 'editor', [('plain.bst', 480, 24, 480, 30)]), StyString('NUMBER', 2, [('plain.bst', 480, 31, 480, 33)]), StyString('QUOTE', '{vv~}{ll}', [('plain.bst', 480, 34, 480, 45)]), StyString('LITERAL', 'format.name$', [('plain.bst', 480, 46, 480, 58)]), StyString('LITERAL', '*', [('plain.bst', 480, 59, 480, 60)]))], [('plain.bst', 480, 12, 480, 62)]), StyString('LITERAL', 'if$', [('plain.bst', 481, 10, 481, 13)]))], [('plain.bst', 478, 8, 482, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 483, 6, 483, 9)]))], [('plain.bst', 476, 4, 484, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 485, 2, 485, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.crossref.editor', $bst__formatZocrossrefZoeditor, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 470, 1, 471, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.crossref.editor', [('plain.bst', 471, 10, 471, 32)]))], [('plain.bst', 471, 9, 471, 33)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 472, 2, 472, 8)]), StyString('NUMBER', 1, [('plain.bst', 472, 9, 472, 11)]), StyString('QUOTE', '{vv~}{ll}', [('plain.bst', 472, 12, 472, 23)]), StyString('LITERAL', 'format.name$', [('plain.bst', 472, 24, 472, 36)]), StyString('LITERAL', 'editor', [('plain.bst', 473, 2, 473, 8)]), StyString('LITERAL', 'num.names$', [('plain.bst', 473, 9, 473, 19)]), StyString('LITERAL', 'duplicate$', [('plain.bst', 473, 20, 473, 30)]), StyString('NUMBER', 2, [('plain.bst', 474, 2, 474, 4)]), StyString('LITERAL', '>', [('plain.bst', 474, 5, 474, 6)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [('plain.bst', 475, 6, 475, 10)]), StyString('QUOTE', ' et~al.', [('plain.bst', 475, 11, 475, 20)]), StyString('LITERAL', '*', [('plain.bst', 475, 21, 475, 22)]))], [('plain.bst', 475, 4, 475, 24)]), StyString('BLOCK', [(StyString('NUMBER', 2, [('plain.bst', 476, 6, 476, 8)]), StyString('LITERAL', '<', [('plain.bst', 476, 9, 476, 10)]), StyString('REFERENCE', 'skip$', [('plain.bst', 477, 8, 477, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 478, 10, 478, 16)]), StyString('NUMBER', 2, [('plain.bst', 478, 17, 478, 19)]), StyString('QUOTE', '{ff }{vv }{ll}{ jj}', [('plain.bst', 478, 20, 478, 41)]), StyString('LITERAL', 'format.name$', [('plain.bst', 478, 42, 478, 54)]), StyString('QUOTE', 'others', [('plain.bst', 478, 55, 478, 63)]), StyString('LITERAL', '=', [('plain.bst', 478, 64, 478, 65)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [('plain.bst', 479, 14, 479, 23)]), StyString('LITERAL', '*', [('plain.bst', 479, 24, 479, 25)]))], [('plain.bst', 479, 12, 479, 27)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [('plain.bst', 480, 14, 480, 21)]), StyString('LITERAL', '*', [('plain.bst', 480, 22, 480, 23)]), StyString('LITERAL', 'editor', [('plain.bst', 480, 24, 480, 30)]), StyString('NUMBER', 2, [('plain.bst', 480, 31, 480, 33)]), StyString('QUOTE', '{vv~}{ll}', [('plain.bst', 480, 34, 480, 45)]), StyString('LITERAL', 'format.name$', [('plain.bst', 480, 46, 480, 58)]), StyString('LITERAL', '*', [('plain.bst', 480, 59, 480, 60)]))], [('plain.bst', 480, 12, 480, 62)]), StyString('LITERAL', 'if$', [('plain.bst', 481, 10, 481, 13)]))], [('plain.bst', 478, 8, 482, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 483, 6, 483, 9)]))], [('plain.bst', 476, 4, 484, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 485, 2, 485, 5)]))], [('plain.bst', 471, 34, 486, 2)]))], [('plain.bst', 470, 1, 486, 2)])); ; 
  my $bst__formatZobookZocrossref = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'volume', StyString('LITERAL', 'volume', [('plain.bst', 489, 2, 489, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 489, 9, 489, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 'empty volume in ', StyString('QUOTE', 'empty volume in ', [('plain.bst', 490, 6, 490, 24)])); 
      builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 490, 25, 490, 30)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 490, 31, 490, 32)])); 
      pushString($context, $config, '\'s crossref of ', StyString('QUOTE', '\'s crossref of ', [('plain.bst', 490, 33, 490, 50)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 490, 51, 490, 52)])); 
      lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 490, 53, 490, 61)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 490, 62, 490, 63)])); 
      builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 490, 64, 490, 72)])); 
      pushString($context, $config, 'In ', StyString('QUOTE', 'In ', [('plain.bst', 491, 6, 491, 11)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'empty volume in ', [('plain.bst', 490, 6, 490, 24)]), StyString('LITERAL', 'cite$', [('plain.bst', 490, 25, 490, 30)]), StyString('LITERAL', '*', [('plain.bst', 490, 31, 490, 32)]), StyString('QUOTE', '\'s crossref of ', [('plain.bst', 490, 33, 490, 50)]), StyString('LITERAL', '*', [('plain.bst', 490, 51, 490, 52)]), StyString('LITERAL', 'crossref', [('plain.bst', 490, 53, 490, 61)]), StyString('LITERAL', '*', [('plain.bst', 490, 62, 490, 63)]), StyString('LITERAL', 'warning$', [('plain.bst', 490, 64, 490, 72)]), StyString('QUOTE', 'In ', [('plain.bst', 491, 6, 491, 11)]))], [('plain.bst', 490, 4, 492, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 'Volume', StyString('QUOTE', 'Volume', [('plain.bst', 493, 6, 493, 14)])); 
      lookupEntryField($context, $config, 'volume', StyString('LITERAL', 'volume', [('plain.bst', 493, 15, 493, 21)])); 
      $bst__tieZoorZospaceZoconnect->($context, $config, StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 493, 22, 493, 42)])); 
      pushString($context, $config, ' of ', StyString('QUOTE', ' of ', [('plain.bst', 494, 6, 494, 12)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 494, 13, 494, 14)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'Volume', [('plain.bst', 493, 6, 493, 14)]), StyString('LITERAL', 'volume', [('plain.bst', 493, 15, 493, 21)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 493, 22, 493, 42)]), StyString('QUOTE', ' of ', [('plain.bst', 494, 6, 494, 12)]), StyString('LITERAL', '*', [('plain.bst', 494, 13, 494, 14)]))], [('plain.bst', 493, 4, 495, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 496, 2, 496, 5)])); 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 497, 2, 497, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 497, 9, 497, 15)])); 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 498, 2, 498, 8)])); 
    $bst__fieldZoorZonull->($context, $config, StyString('LITERAL', 'field.or.null', [('plain.bst', 498, 9, 498, 22)])); 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 498, 23, 498, 29)])); 
    $bst__fieldZoorZonull->($context, $config, StyString('LITERAL', 'field.or.null', [('plain.bst', 498, 30, 498, 43)])); 
    builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 498, 44, 498, 45)])); 
    $bst__or->($context, $config, StyString('LITERAL', 'or', [('plain.bst', 499, 2, 499, 4)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 500, 6, 500, 9)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 500, 10, 500, 16)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'series', StyString('LITERAL', 'series', [('plain.bst', 501, 10, 501, 16)])); 
        builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 501, 17, 501, 23)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'need editor, key, or series for ', StyString('QUOTE', 'need editor, key, or series for ', [('plain.bst', 502, 14, 502, 48)])); 
          builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 502, 49, 502, 54)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 502, 55, 502, 56)])); 
          pushString($context, $config, ' to crossref ', StyString('QUOTE', ' to crossref ', [('plain.bst', 502, 57, 502, 72)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 502, 73, 502, 74)])); 
          lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 503, 14, 503, 22)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 503, 23, 503, 24)])); 
          builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 503, 25, 503, 33)])); 
          pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 504, 14, 504, 16)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 504, 17, 504, 18)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or series for ', [('plain.bst', 502, 14, 502, 48)]), StyString('LITERAL', 'cite$', [('plain.bst', 502, 49, 502, 54)]), StyString('LITERAL', '*', [('plain.bst', 502, 55, 502, 56)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 502, 57, 502, 72)]), StyString('LITERAL', '*', [('plain.bst', 502, 73, 502, 74)]), StyString('LITERAL', 'crossref', [('plain.bst', 503, 14, 503, 22)]), StyString('LITERAL', '*', [('plain.bst', 503, 23, 503, 24)]), StyString('LITERAL', 'warning$', [('plain.bst', 503, 25, 503, 33)]), StyString('QUOTE', '', [('plain.bst', 504, 14, 504, 16)]), StyString('LITERAL', '*', [('plain.bst', 504, 17, 504, 18)]))], [('plain.bst', 502, 12, 505, 13)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, '{\\em ', StyString('QUOTE', '{\\em ', [('plain.bst', 506, 14, 506, 21)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 506, 22, 506, 23)])); 
          lookupEntryField($context, $config, 'series', StyString('LITERAL', 'series', [('plain.bst', 506, 24, 506, 30)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 506, 31, 506, 32)])); 
          pushString($context, $config, '\\/}', StyString('QUOTE', '\\/}', [('plain.bst', 506, 33, 506, 38)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 506, 39, 506, 40)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [('plain.bst', 506, 14, 506, 21)]), StyString('LITERAL', '*', [('plain.bst', 506, 22, 506, 23)]), StyString('LITERAL', 'series', [('plain.bst', 506, 24, 506, 30)]), StyString('LITERAL', '*', [('plain.bst', 506, 31, 506, 32)]), StyString('QUOTE', '\\/}', [('plain.bst', 506, 33, 506, 38)]), StyString('LITERAL', '*', [('plain.bst', 506, 39, 506, 40)]))], [('plain.bst', 506, 12, 506, 42)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 507, 10, 507, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'series', [('plain.bst', 501, 10, 501, 16)]), StyString('LITERAL', 'empty$', [('plain.bst', 501, 17, 501, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or series for ', [('plain.bst', 502, 14, 502, 48)]), StyString('LITERAL', 'cite$', [('plain.bst', 502, 49, 502, 54)]), StyString('LITERAL', '*', [('plain.bst', 502, 55, 502, 56)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 502, 57, 502, 72)]), StyString('LITERAL', '*', [('plain.bst', 502, 73, 502, 74)]), StyString('LITERAL', 'crossref', [('plain.bst', 503, 14, 503, 22)]), StyString('LITERAL', '*', [('plain.bst', 503, 23, 503, 24)]), StyString('LITERAL', 'warning$', [('plain.bst', 503, 25, 503, 33)]), StyString('QUOTE', '', [('plain.bst', 504, 14, 504, 16)]), StyString('LITERAL', '*', [('plain.bst', 504, 17, 504, 18)]))], [('plain.bst', 502, 12, 505, 13)]), StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [('plain.bst', 506, 14, 506, 21)]), StyString('LITERAL', '*', [('plain.bst', 506, 22, 506, 23)]), StyString('LITERAL', 'series', [('plain.bst', 506, 24, 506, 30)]), StyString('LITERAL', '*', [('plain.bst', 506, 31, 506, 32)]), StyString('QUOTE', '\\/}', [('plain.bst', 506, 33, 506, 38)]), StyString('LITERAL', '*', [('plain.bst', 506, 39, 506, 40)]))], [('plain.bst', 506, 12, 506, 42)]), StyString('LITERAL', 'if$', [('plain.bst', 507, 10, 507, 13)]))], [('plain.bst', 501, 8, 508, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 509, 10, 509, 13)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 509, 14, 509, 15)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 509, 10, 509, 13)]), StyString('LITERAL', '*', [('plain.bst', 509, 14, 509, 15)]))], [('plain.bst', 509, 8, 509, 17)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 510, 6, 510, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 500, 6, 500, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 500, 10, 500, 16)]), StyString('BLOCK', [(StyString('LITERAL', 'series', [('plain.bst', 501, 10, 501, 16)]), StyString('LITERAL', 'empty$', [('plain.bst', 501, 17, 501, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or series for ', [('plain.bst', 502, 14, 502, 48)]), StyString('LITERAL', 'cite$', [('plain.bst', 502, 49, 502, 54)]), StyString('LITERAL', '*', [('plain.bst', 502, 55, 502, 56)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 502, 57, 502, 72)]), StyString('LITERAL', '*', [('plain.bst', 502, 73, 502, 74)]), StyString('LITERAL', 'crossref', [('plain.bst', 503, 14, 503, 22)]), StyString('LITERAL', '*', [('plain.bst', 503, 23, 503, 24)]), StyString('LITERAL', 'warning$', [('plain.bst', 503, 25, 503, 33)]), StyString('QUOTE', '', [('plain.bst', 504, 14, 504, 16)]), StyString('LITERAL', '*', [('plain.bst', 504, 17, 504, 18)]))], [('plain.bst', 502, 12, 505, 13)]), StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [('plain.bst', 506, 14, 506, 21)]), StyString('LITERAL', '*', [('plain.bst', 506, 22, 506, 23)]), StyString('LITERAL', 'series', [('plain.bst', 506, 24, 506, 30)]), StyString('LITERAL', '*', [('plain.bst', 506, 31, 506, 32)]), StyString('QUOTE', '\\/}', [('plain.bst', 506, 33, 506, 38)]), StyString('LITERAL', '*', [('plain.bst', 506, 39, 506, 40)]))], [('plain.bst', 506, 12, 506, 42)]), StyString('LITERAL', 'if$', [('plain.bst', 507, 10, 507, 13)]))], [('plain.bst', 501, 8, 508, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 509, 10, 509, 13)]), StyString('LITERAL', '*', [('plain.bst', 509, 14, 509, 15)]))], [('plain.bst', 509, 8, 509, 17)]), StyString('LITERAL', 'if$', [('plain.bst', 510, 6, 510, 9)]))], [('plain.bst', 500, 4, 511, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZocrossrefZoeditor->($context, $config, StyString('LITERAL', 'format.crossref.editor', [('plain.bst', 512, 6, 512, 28)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 512, 29, 512, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.crossref.editor', [('plain.bst', 512, 6, 512, 28)]), StyString('LITERAL', '*', [('plain.bst', 512, 29, 512, 30)]))], [('plain.bst', 512, 4, 512, 32)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 513, 2, 513, 5)])); 
    pushString($context, $config, ' \\cite{', StyString('QUOTE', ' \\cite{', [('plain.bst', 514, 2, 514, 11)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 514, 12, 514, 13)])); 
    lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 514, 14, 514, 22)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 514, 23, 514, 24)])); 
    pushString($context, $config, '}', StyString('QUOTE', '}', [('plain.bst', 514, 25, 514, 28)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 514, 29, 514, 30)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.book.crossref', $bst__formatZobookZocrossref, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 487, 1, 488, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.book.crossref', [('plain.bst', 488, 10, 488, 30)]))], [('plain.bst', 488, 9, 488, 31)]), StyString('BLOCK', [(StyString('LITERAL', 'volume', [('plain.bst', 489, 2, 489, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 489, 9, 489, 15)]), StyString('BLOCK', [(StyString('QUOTE', 'empty volume in ', [('plain.bst', 490, 6, 490, 24)]), StyString('LITERAL', 'cite$', [('plain.bst', 490, 25, 490, 30)]), StyString('LITERAL', '*', [('plain.bst', 490, 31, 490, 32)]), StyString('QUOTE', '\'s crossref of ', [('plain.bst', 490, 33, 490, 50)]), StyString('LITERAL', '*', [('plain.bst', 490, 51, 490, 52)]), StyString('LITERAL', 'crossref', [('plain.bst', 490, 53, 490, 61)]), StyString('LITERAL', '*', [('plain.bst', 490, 62, 490, 63)]), StyString('LITERAL', 'warning$', [('plain.bst', 490, 64, 490, 72)]), StyString('QUOTE', 'In ', [('plain.bst', 491, 6, 491, 11)]))], [('plain.bst', 490, 4, 492, 5)]), StyString('BLOCK', [(StyString('QUOTE', 'Volume', [('plain.bst', 493, 6, 493, 14)]), StyString('LITERAL', 'volume', [('plain.bst', 493, 15, 493, 21)]), StyString('LITERAL', 'tie.or.space.connect', [('plain.bst', 493, 22, 493, 42)]), StyString('QUOTE', ' of ', [('plain.bst', 494, 6, 494, 12)]), StyString('LITERAL', '*', [('plain.bst', 494, 13, 494, 14)]))], [('plain.bst', 493, 4, 495, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 496, 2, 496, 5)]), StyString('LITERAL', 'editor', [('plain.bst', 497, 2, 497, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 497, 9, 497, 15)]), StyString('LITERAL', 'editor', [('plain.bst', 498, 2, 498, 8)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 498, 9, 498, 22)]), StyString('LITERAL', 'author', [('plain.bst', 498, 23, 498, 29)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 498, 30, 498, 43)]), StyString('LITERAL', '=', [('plain.bst', 498, 44, 498, 45)]), StyString('LITERAL', 'or', [('plain.bst', 499, 2, 499, 4)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 500, 6, 500, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 500, 10, 500, 16)]), StyString('BLOCK', [(StyString('LITERAL', 'series', [('plain.bst', 501, 10, 501, 16)]), StyString('LITERAL', 'empty$', [('plain.bst', 501, 17, 501, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or series for ', [('plain.bst', 502, 14, 502, 48)]), StyString('LITERAL', 'cite$', [('plain.bst', 502, 49, 502, 54)]), StyString('LITERAL', '*', [('plain.bst', 502, 55, 502, 56)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 502, 57, 502, 72)]), StyString('LITERAL', '*', [('plain.bst', 502, 73, 502, 74)]), StyString('LITERAL', 'crossref', [('plain.bst', 503, 14, 503, 22)]), StyString('LITERAL', '*', [('plain.bst', 503, 23, 503, 24)]), StyString('LITERAL', 'warning$', [('plain.bst', 503, 25, 503, 33)]), StyString('QUOTE', '', [('plain.bst', 504, 14, 504, 16)]), StyString('LITERAL', '*', [('plain.bst', 504, 17, 504, 18)]))], [('plain.bst', 502, 12, 505, 13)]), StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [('plain.bst', 506, 14, 506, 21)]), StyString('LITERAL', '*', [('plain.bst', 506, 22, 506, 23)]), StyString('LITERAL', 'series', [('plain.bst', 506, 24, 506, 30)]), StyString('LITERAL', '*', [('plain.bst', 506, 31, 506, 32)]), StyString('QUOTE', '\\/}', [('plain.bst', 506, 33, 506, 38)]), StyString('LITERAL', '*', [('plain.bst', 506, 39, 506, 40)]))], [('plain.bst', 506, 12, 506, 42)]), StyString('LITERAL', 'if$', [('plain.bst', 507, 10, 507, 13)]))], [('plain.bst', 501, 8, 508, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 509, 10, 509, 13)]), StyString('LITERAL', '*', [('plain.bst', 509, 14, 509, 15)]))], [('plain.bst', 509, 8, 509, 17)]), StyString('LITERAL', 'if$', [('plain.bst', 510, 6, 510, 9)]))], [('plain.bst', 500, 4, 511, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'format.crossref.editor', [('plain.bst', 512, 6, 512, 28)]), StyString('LITERAL', '*', [('plain.bst', 512, 29, 512, 30)]))], [('plain.bst', 512, 4, 512, 32)]), StyString('LITERAL', 'if$', [('plain.bst', 513, 2, 513, 5)]), StyString('QUOTE', ' \\cite{', [('plain.bst', 514, 2, 514, 11)]), StyString('LITERAL', '*', [('plain.bst', 514, 12, 514, 13)]), StyString('LITERAL', 'crossref', [('plain.bst', 514, 14, 514, 22)]), StyString('LITERAL', '*', [('plain.bst', 514, 23, 514, 24)]), StyString('QUOTE', '}', [('plain.bst', 514, 25, 514, 28)]), StyString('LITERAL', '*', [('plain.bst', 514, 29, 514, 30)]))], [('plain.bst', 488, 32, 515, 2)]))], [('plain.bst', 487, 1, 515, 2)])); ; 
  my $bst__formatZoincollZoinprocZocrossref = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 518, 2, 518, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 518, 9, 518, 15)])); 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 519, 2, 519, 8)])); 
    $bst__fieldZoorZonull->($context, $config, StyString('LITERAL', 'field.or.null', [('plain.bst', 519, 9, 519, 22)])); 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 519, 23, 519, 29)])); 
    $bst__fieldZoorZonull->($context, $config, StyString('LITERAL', 'field.or.null', [('plain.bst', 519, 30, 519, 43)])); 
    builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 519, 44, 519, 45)])); 
    $bst__or->($context, $config, StyString('LITERAL', 'or', [('plain.bst', 520, 2, 520, 4)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 521, 6, 521, 9)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 521, 10, 521, 16)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'booktitle', StyString('LITERAL', 'booktitle', [('plain.bst', 522, 10, 522, 19)])); 
        builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 522, 20, 522, 26)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'need editor, key, or booktitle for ', StyString('QUOTE', 'need editor, key, or booktitle for ', [('plain.bst', 523, 14, 523, 51)])); 
          builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 523, 52, 523, 57)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 523, 58, 523, 59)])); 
          pushString($context, $config, ' to crossref ', StyString('QUOTE', ' to crossref ', [('plain.bst', 523, 60, 523, 75)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 523, 76, 523, 77)])); 
          lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 524, 14, 524, 22)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 524, 23, 524, 24)])); 
          builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 524, 25, 524, 33)])); 
          pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 525, 14, 525, 16)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or booktitle for ', [('plain.bst', 523, 14, 523, 51)]), StyString('LITERAL', 'cite$', [('plain.bst', 523, 52, 523, 57)]), StyString('LITERAL', '*', [('plain.bst', 523, 58, 523, 59)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 523, 60, 523, 75)]), StyString('LITERAL', '*', [('plain.bst', 523, 76, 523, 77)]), StyString('LITERAL', 'crossref', [('plain.bst', 524, 14, 524, 22)]), StyString('LITERAL', '*', [('plain.bst', 524, 23, 524, 24)]), StyString('LITERAL', 'warning$', [('plain.bst', 524, 25, 524, 33)]), StyString('QUOTE', '', [('plain.bst', 525, 14, 525, 16)]))], [('plain.bst', 523, 12, 526, 13)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'In {\\em ', StyString('QUOTE', 'In {\\em ', [('plain.bst', 527, 14, 527, 24)])); 
          lookupEntryField($context, $config, 'booktitle', StyString('LITERAL', 'booktitle', [('plain.bst', 527, 25, 527, 34)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 527, 35, 527, 36)])); 
          pushString($context, $config, '\\/}', StyString('QUOTE', '\\/}', [('plain.bst', 527, 37, 527, 42)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 527, 43, 527, 44)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [('plain.bst', 527, 14, 527, 24)]), StyString('LITERAL', 'booktitle', [('plain.bst', 527, 25, 527, 34)]), StyString('LITERAL', '*', [('plain.bst', 527, 35, 527, 36)]), StyString('QUOTE', '\\/}', [('plain.bst', 527, 37, 527, 42)]), StyString('LITERAL', '*', [('plain.bst', 527, 43, 527, 44)]))], [('plain.bst', 527, 12, 527, 46)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 528, 10, 528, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'booktitle', [('plain.bst', 522, 10, 522, 19)]), StyString('LITERAL', 'empty$', [('plain.bst', 522, 20, 522, 26)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or booktitle for ', [('plain.bst', 523, 14, 523, 51)]), StyString('LITERAL', 'cite$', [('plain.bst', 523, 52, 523, 57)]), StyString('LITERAL', '*', [('plain.bst', 523, 58, 523, 59)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 523, 60, 523, 75)]), StyString('LITERAL', '*', [('plain.bst', 523, 76, 523, 77)]), StyString('LITERAL', 'crossref', [('plain.bst', 524, 14, 524, 22)]), StyString('LITERAL', '*', [('plain.bst', 524, 23, 524, 24)]), StyString('LITERAL', 'warning$', [('plain.bst', 524, 25, 524, 33)]), StyString('QUOTE', '', [('plain.bst', 525, 14, 525, 16)]))], [('plain.bst', 523, 12, 526, 13)]), StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [('plain.bst', 527, 14, 527, 24)]), StyString('LITERAL', 'booktitle', [('plain.bst', 527, 25, 527, 34)]), StyString('LITERAL', '*', [('plain.bst', 527, 35, 527, 36)]), StyString('QUOTE', '\\/}', [('plain.bst', 527, 37, 527, 42)]), StyString('LITERAL', '*', [('plain.bst', 527, 43, 527, 44)]))], [('plain.bst', 527, 12, 527, 46)]), StyString('LITERAL', 'if$', [('plain.bst', 528, 10, 528, 13)]))], [('plain.bst', 522, 8, 529, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'In ', StyString('QUOTE', 'In ', [('plain.bst', 530, 10, 530, 15)])); 
        lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 530, 16, 530, 19)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 530, 20, 530, 21)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 530, 10, 530, 15)]), StyString('LITERAL', 'key', [('plain.bst', 530, 16, 530, 19)]), StyString('LITERAL', '*', [('plain.bst', 530, 20, 530, 21)]))], [('plain.bst', 530, 8, 530, 23)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 531, 6, 531, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 521, 6, 521, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 521, 10, 521, 16)]), StyString('BLOCK', [(StyString('LITERAL', 'booktitle', [('plain.bst', 522, 10, 522, 19)]), StyString('LITERAL', 'empty$', [('plain.bst', 522, 20, 522, 26)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or booktitle for ', [('plain.bst', 523, 14, 523, 51)]), StyString('LITERAL', 'cite$', [('plain.bst', 523, 52, 523, 57)]), StyString('LITERAL', '*', [('plain.bst', 523, 58, 523, 59)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 523, 60, 523, 75)]), StyString('LITERAL', '*', [('plain.bst', 523, 76, 523, 77)]), StyString('LITERAL', 'crossref', [('plain.bst', 524, 14, 524, 22)]), StyString('LITERAL', '*', [('plain.bst', 524, 23, 524, 24)]), StyString('LITERAL', 'warning$', [('plain.bst', 524, 25, 524, 33)]), StyString('QUOTE', '', [('plain.bst', 525, 14, 525, 16)]))], [('plain.bst', 523, 12, 526, 13)]), StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [('plain.bst', 527, 14, 527, 24)]), StyString('LITERAL', 'booktitle', [('plain.bst', 527, 25, 527, 34)]), StyString('LITERAL', '*', [('plain.bst', 527, 35, 527, 36)]), StyString('QUOTE', '\\/}', [('plain.bst', 527, 37, 527, 42)]), StyString('LITERAL', '*', [('plain.bst', 527, 43, 527, 44)]))], [('plain.bst', 527, 12, 527, 46)]), StyString('LITERAL', 'if$', [('plain.bst', 528, 10, 528, 13)]))], [('plain.bst', 522, 8, 529, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 530, 10, 530, 15)]), StyString('LITERAL', 'key', [('plain.bst', 530, 16, 530, 19)]), StyString('LITERAL', '*', [('plain.bst', 530, 20, 530, 21)]))], [('plain.bst', 530, 8, 530, 23)]), StyString('LITERAL', 'if$', [('plain.bst', 531, 6, 531, 9)]))], [('plain.bst', 521, 4, 532, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      pushString($context, $config, 'In ', StyString('QUOTE', 'In ', [('plain.bst', 533, 6, 533, 11)])); 
      $bst__formatZocrossrefZoeditor->($context, $config, StyString('LITERAL', 'format.crossref.editor', [('plain.bst', 533, 12, 533, 34)])); 
      builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 533, 35, 533, 36)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 533, 6, 533, 11)]), StyString('LITERAL', 'format.crossref.editor', [('plain.bst', 533, 12, 533, 34)]), StyString('LITERAL', '*', [('plain.bst', 533, 35, 533, 36)]))], [('plain.bst', 533, 4, 533, 38)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 534, 2, 534, 5)])); 
    pushString($context, $config, ' \\cite{', StyString('QUOTE', ' \\cite{', [('plain.bst', 535, 2, 535, 11)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 535, 12, 535, 13)])); 
    lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 535, 14, 535, 22)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 535, 23, 535, 24)])); 
    pushString($context, $config, '}', StyString('QUOTE', '}', [('plain.bst', 535, 25, 535, 28)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 535, 29, 535, 30)])); 
  }; 
  registerFunctionDefinition($context, $config, 'format.incoll.inproc.crossref', $bst__formatZoincollZoinprocZocrossref, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 516, 1, 517, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'format.incoll.inproc.crossref', [('plain.bst', 517, 10, 517, 39)]))], [('plain.bst', 517, 9, 517, 40)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 518, 2, 518, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 518, 9, 518, 15)]), StyString('LITERAL', 'editor', [('plain.bst', 519, 2, 519, 8)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 519, 9, 519, 22)]), StyString('LITERAL', 'author', [('plain.bst', 519, 23, 519, 29)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 519, 30, 519, 43)]), StyString('LITERAL', '=', [('plain.bst', 519, 44, 519, 45)]), StyString('LITERAL', 'or', [('plain.bst', 520, 2, 520, 4)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 521, 6, 521, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 521, 10, 521, 16)]), StyString('BLOCK', [(StyString('LITERAL', 'booktitle', [('plain.bst', 522, 10, 522, 19)]), StyString('LITERAL', 'empty$', [('plain.bst', 522, 20, 522, 26)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or booktitle for ', [('plain.bst', 523, 14, 523, 51)]), StyString('LITERAL', 'cite$', [('plain.bst', 523, 52, 523, 57)]), StyString('LITERAL', '*', [('plain.bst', 523, 58, 523, 59)]), StyString('QUOTE', ' to crossref ', [('plain.bst', 523, 60, 523, 75)]), StyString('LITERAL', '*', [('plain.bst', 523, 76, 523, 77)]), StyString('LITERAL', 'crossref', [('plain.bst', 524, 14, 524, 22)]), StyString('LITERAL', '*', [('plain.bst', 524, 23, 524, 24)]), StyString('LITERAL', 'warning$', [('plain.bst', 524, 25, 524, 33)]), StyString('QUOTE', '', [('plain.bst', 525, 14, 525, 16)]))], [('plain.bst', 523, 12, 526, 13)]), StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [('plain.bst', 527, 14, 527, 24)]), StyString('LITERAL', 'booktitle', [('plain.bst', 527, 25, 527, 34)]), StyString('LITERAL', '*', [('plain.bst', 527, 35, 527, 36)]), StyString('QUOTE', '\\/}', [('plain.bst', 527, 37, 527, 42)]), StyString('LITERAL', '*', [('plain.bst', 527, 43, 527, 44)]))], [('plain.bst', 527, 12, 527, 46)]), StyString('LITERAL', 'if$', [('plain.bst', 528, 10, 528, 13)]))], [('plain.bst', 522, 8, 529, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 530, 10, 530, 15)]), StyString('LITERAL', 'key', [('plain.bst', 530, 16, 530, 19)]), StyString('LITERAL', '*', [('plain.bst', 530, 20, 530, 21)]))], [('plain.bst', 530, 8, 530, 23)]), StyString('LITERAL', 'if$', [('plain.bst', 531, 6, 531, 9)]))], [('plain.bst', 521, 4, 532, 5)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [('plain.bst', 533, 6, 533, 11)]), StyString('LITERAL', 'format.crossref.editor', [('plain.bst', 533, 12, 533, 34)]), StyString('LITERAL', '*', [('plain.bst', 533, 35, 533, 36)]))], [('plain.bst', 533, 4, 533, 38)]), StyString('LITERAL', 'if$', [('plain.bst', 534, 2, 534, 5)]), StyString('QUOTE', ' \\cite{', [('plain.bst', 535, 2, 535, 11)]), StyString('LITERAL', '*', [('plain.bst', 535, 12, 535, 13)]), StyString('LITERAL', 'crossref', [('plain.bst', 535, 14, 535, 22)]), StyString('LITERAL', '*', [('plain.bst', 535, 23, 535, 24)]), StyString('QUOTE', '}', [('plain.bst', 535, 25, 535, 28)]), StyString('LITERAL', '*', [('plain.bst', 535, 29, 535, 30)]))], [('plain.bst', 517, 41, 536, 2)]))], [('plain.bst', 516, 1, 536, 2)])); ; 
  my $bst__article = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 539, 2, 539, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 540, 2, 540, 16)])); 
    pushString($context, $config, 'author', StyString('QUOTE', 'author', [('plain.bst', 540, 17, 540, 25)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 540, 26, 540, 38)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 541, 2, 541, 11)])); 
    $bst__formatZotitle->($context, $config, StyString('LITERAL', 'format.title', [('plain.bst', 542, 2, 542, 14)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 542, 15, 542, 22)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 542, 23, 542, 35)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 543, 2, 543, 11)])); 
    lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 544, 2, 544, 10)])); 
    builtinMissing($context, $config, StyString('LITERAL', 'missing$', [('plain.bst', 544, 11, 544, 19)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'journal', StyString('LITERAL', 'journal', [('plain.bst', 545, 6, 545, 13)])); 
      $bst__emphasizze->($context, $config, StyString('LITERAL', 'emphasize', [('plain.bst', 545, 14, 545, 23)])); 
      pushString($context, $config, 'journal', StyString('QUOTE', 'journal', [('plain.bst', 545, 24, 545, 33)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 545, 34, 545, 46)])); 
      $bst__formatZovolZonumZopages->($context, $config, StyString('LITERAL', 'format.vol.num.pages', [('plain.bst', 546, 6, 546, 26)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 546, 27, 546, 33)])); 
      $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 547, 6, 547, 17)])); 
      pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 547, 18, 547, 24)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 547, 25, 547, 37)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'journal', [('plain.bst', 545, 6, 545, 13)]), StyString('LITERAL', 'emphasize', [('plain.bst', 545, 14, 545, 23)]), StyString('QUOTE', 'journal', [('plain.bst', 545, 24, 545, 33)]), StyString('LITERAL', 'output.check', [('plain.bst', 545, 34, 545, 46)]), StyString('LITERAL', 'format.vol.num.pages', [('plain.bst', 546, 6, 546, 26)]), StyString('LITERAL', 'output', [('plain.bst', 546, 27, 546, 33)]), StyString('LITERAL', 'format.date', [('plain.bst', 547, 6, 547, 17)]), StyString('QUOTE', 'year', [('plain.bst', 547, 18, 547, 24)]), StyString('LITERAL', 'output.check', [('plain.bst', 547, 25, 547, 37)]))], [('plain.bst', 545, 4, 548, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoarticleZocrossref->($context, $config, StyString('LITERAL', 'format.article.crossref', [('plain.bst', 549, 6, 549, 29)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 549, 30, 549, 44)])); 
      $bst__formatZopages->($context, $config, StyString('LITERAL', 'format.pages', [('plain.bst', 550, 6, 550, 18)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 550, 19, 550, 25)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.article.crossref', [('plain.bst', 549, 6, 549, 29)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 549, 30, 549, 44)]), StyString('LITERAL', 'format.pages', [('plain.bst', 550, 6, 550, 18)]), StyString('LITERAL', 'output', [('plain.bst', 550, 19, 550, 25)]))], [('plain.bst', 549, 4, 551, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 552, 2, 552, 5)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 553, 2, 553, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 554, 2, 554, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 554, 7, 554, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 555, 2, 555, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'article', $bst__article, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 537, 1, 538, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'article', [('plain.bst', 538, 10, 538, 17)]))], [('plain.bst', 538, 9, 538, 18)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 539, 2, 539, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 540, 2, 540, 16)]), StyString('QUOTE', 'author', [('plain.bst', 540, 17, 540, 25)]), StyString('LITERAL', 'output.check', [('plain.bst', 540, 26, 540, 38)]), StyString('LITERAL', 'new.block', [('plain.bst', 541, 2, 541, 11)]), StyString('LITERAL', 'format.title', [('plain.bst', 542, 2, 542, 14)]), StyString('QUOTE', 'title', [('plain.bst', 542, 15, 542, 22)]), StyString('LITERAL', 'output.check', [('plain.bst', 542, 23, 542, 35)]), StyString('LITERAL', 'new.block', [('plain.bst', 543, 2, 543, 11)]), StyString('LITERAL', 'crossref', [('plain.bst', 544, 2, 544, 10)]), StyString('LITERAL', 'missing$', [('plain.bst', 544, 11, 544, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'journal', [('plain.bst', 545, 6, 545, 13)]), StyString('LITERAL', 'emphasize', [('plain.bst', 545, 14, 545, 23)]), StyString('QUOTE', 'journal', [('plain.bst', 545, 24, 545, 33)]), StyString('LITERAL', 'output.check', [('plain.bst', 545, 34, 545, 46)]), StyString('LITERAL', 'format.vol.num.pages', [('plain.bst', 546, 6, 546, 26)]), StyString('LITERAL', 'output', [('plain.bst', 546, 27, 546, 33)]), StyString('LITERAL', 'format.date', [('plain.bst', 547, 6, 547, 17)]), StyString('QUOTE', 'year', [('plain.bst', 547, 18, 547, 24)]), StyString('LITERAL', 'output.check', [('plain.bst', 547, 25, 547, 37)]))], [('plain.bst', 545, 4, 548, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'format.article.crossref', [('plain.bst', 549, 6, 549, 29)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 549, 30, 549, 44)]), StyString('LITERAL', 'format.pages', [('plain.bst', 550, 6, 550, 18)]), StyString('LITERAL', 'output', [('plain.bst', 550, 19, 550, 25)]))], [('plain.bst', 549, 4, 551, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 552, 2, 552, 5)]), StyString('LITERAL', 'new.block', [('plain.bst', 553, 2, 553, 11)]), StyString('LITERAL', 'note', [('plain.bst', 554, 2, 554, 6)]), StyString('LITERAL', 'output', [('plain.bst', 554, 7, 554, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 555, 2, 555, 11)]))], [('plain.bst', 538, 19, 556, 2)]))], [('plain.bst', 537, 1, 556, 2)])); ; 
  my $bst__book = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 559, 2, 559, 16)])); 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 560, 2, 560, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 560, 9, 560, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoeditors->($context, $config, StyString('LITERAL', 'format.editors', [('plain.bst', 561, 6, 561, 20)])); 
      pushString($context, $config, 'author and editor', StyString('QUOTE', 'author and editor', [('plain.bst', 561, 21, 561, 40)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 561, 41, 561, 53)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [('plain.bst', 561, 6, 561, 20)]), StyString('QUOTE', 'author and editor', [('plain.bst', 561, 21, 561, 40)]), StyString('LITERAL', 'output.check', [('plain.bst', 561, 41, 561, 53)]))], [('plain.bst', 561, 4, 561, 55)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 562, 6, 562, 20)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 562, 21, 562, 35)])); 
      lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 563, 6, 563, 14)])); 
      builtinMissing($context, $config, StyString('LITERAL', 'missing$', [('plain.bst', 563, 15, 563, 23)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'author and editor', StyString('QUOTE', 'author and editor', [('plain.bst', 564, 10, 564, 29)])); 
        lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 564, 30, 564, 36)])); 
        $bst__eitherZoorZocheck->($context, $config, StyString('LITERAL', 'either.or.check', [('plain.bst', 564, 37, 564, 52)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [('plain.bst', 564, 10, 564, 29)]), StyString('LITERAL', 'editor', [('plain.bst', 564, 30, 564, 36)]), StyString('LITERAL', 'either.or.check', [('plain.bst', 564, 37, 564, 52)]))], [('plain.bst', 564, 8, 564, 54)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 565, 8, 565, 14)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 566, 6, 566, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [('plain.bst', 562, 6, 562, 20)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 562, 21, 562, 35)]), StyString('LITERAL', 'crossref', [('plain.bst', 563, 6, 563, 14)]), StyString('LITERAL', 'missing$', [('plain.bst', 563, 15, 563, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [('plain.bst', 564, 10, 564, 29)]), StyString('LITERAL', 'editor', [('plain.bst', 564, 30, 564, 36)]), StyString('LITERAL', 'either.or.check', [('plain.bst', 564, 37, 564, 52)]))], [('plain.bst', 564, 8, 564, 54)]), StyString('REFERENCE', 'skip$', [('plain.bst', 565, 8, 565, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 566, 6, 566, 9)]))], [('plain.bst', 562, 4, 567, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 568, 2, 568, 5)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 569, 2, 569, 11)])); 
    $bst__formatZobtitle->($context, $config, StyString('LITERAL', 'format.btitle', [('plain.bst', 570, 2, 570, 15)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 570, 16, 570, 23)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 570, 24, 570, 36)])); 
    lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 571, 2, 571, 10)])); 
    builtinMissing($context, $config, StyString('LITERAL', 'missing$', [('plain.bst', 571, 11, 571, 19)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZobvolume->($context, $config, StyString('LITERAL', 'format.bvolume', [('plain.bst', 572, 6, 572, 20)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 572, 21, 572, 27)])); 
      $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 573, 6, 573, 15)])); 
      $bst__formatZonumberZoseries->($context, $config, StyString('LITERAL', 'format.number.series', [('plain.bst', 574, 6, 574, 26)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 574, 27, 574, 33)])); 
      $bst__newZosentence->($context, $config, StyString('LITERAL', 'new.sentence', [('plain.bst', 575, 6, 575, 18)])); 
      lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 576, 6, 576, 15)])); 
      pushString($context, $config, 'publisher', StyString('QUOTE', 'publisher', [('plain.bst', 576, 16, 576, 27)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 576, 28, 576, 40)])); 
      lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 577, 6, 577, 13)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 577, 14, 577, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.bvolume', [('plain.bst', 572, 6, 572, 20)]), StyString('LITERAL', 'output', [('plain.bst', 572, 21, 572, 27)]), StyString('LITERAL', 'new.block', [('plain.bst', 573, 6, 573, 15)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 574, 6, 574, 26)]), StyString('LITERAL', 'output', [('plain.bst', 574, 27, 574, 33)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 575, 6, 575, 18)]), StyString('LITERAL', 'publisher', [('plain.bst', 576, 6, 576, 15)]), StyString('QUOTE', 'publisher', [('plain.bst', 576, 16, 576, 27)]), StyString('LITERAL', 'output.check', [('plain.bst', 576, 28, 576, 40)]), StyString('LITERAL', 'address', [('plain.bst', 577, 6, 577, 13)]), StyString('LITERAL', 'output', [('plain.bst', 577, 14, 577, 20)]))], [('plain.bst', 572, 4, 578, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 579, 6, 579, 15)])); 
      $bst__formatZobookZocrossref->($context, $config, StyString('LITERAL', 'format.book.crossref', [('plain.bst', 580, 6, 580, 26)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 580, 27, 580, 41)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'new.block', [('plain.bst', 579, 6, 579, 15)]), StyString('LITERAL', 'format.book.crossref', [('plain.bst', 580, 6, 580, 26)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 580, 27, 580, 41)]))], [('plain.bst', 579, 4, 581, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 582, 2, 582, 5)])); 
    $bst__formatZoedition->($context, $config, StyString('LITERAL', 'format.edition', [('plain.bst', 583, 2, 583, 16)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 583, 17, 583, 23)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 584, 2, 584, 13)])); 
    pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 584, 14, 584, 20)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 584, 21, 584, 33)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 585, 2, 585, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 586, 2, 586, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 586, 7, 586, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 587, 2, 587, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'book', $bst__book, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 557, 1, 558, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'book', [('plain.bst', 558, 10, 558, 14)]))], [('plain.bst', 558, 9, 558, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 559, 2, 559, 16)]), StyString('LITERAL', 'author', [('plain.bst', 560, 2, 560, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 560, 9, 560, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [('plain.bst', 561, 6, 561, 20)]), StyString('QUOTE', 'author and editor', [('plain.bst', 561, 21, 561, 40)]), StyString('LITERAL', 'output.check', [('plain.bst', 561, 41, 561, 53)]))], [('plain.bst', 561, 4, 561, 55)]), StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [('plain.bst', 562, 6, 562, 20)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 562, 21, 562, 35)]), StyString('LITERAL', 'crossref', [('plain.bst', 563, 6, 563, 14)]), StyString('LITERAL', 'missing$', [('plain.bst', 563, 15, 563, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [('plain.bst', 564, 10, 564, 29)]), StyString('LITERAL', 'editor', [('plain.bst', 564, 30, 564, 36)]), StyString('LITERAL', 'either.or.check', [('plain.bst', 564, 37, 564, 52)]))], [('plain.bst', 564, 8, 564, 54)]), StyString('REFERENCE', 'skip$', [('plain.bst', 565, 8, 565, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 566, 6, 566, 9)]))], [('plain.bst', 562, 4, 567, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 568, 2, 568, 5)]), StyString('LITERAL', 'new.block', [('plain.bst', 569, 2, 569, 11)]), StyString('LITERAL', 'format.btitle', [('plain.bst', 570, 2, 570, 15)]), StyString('QUOTE', 'title', [('plain.bst', 570, 16, 570, 23)]), StyString('LITERAL', 'output.check', [('plain.bst', 570, 24, 570, 36)]), StyString('LITERAL', 'crossref', [('plain.bst', 571, 2, 571, 10)]), StyString('LITERAL', 'missing$', [('plain.bst', 571, 11, 571, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'format.bvolume', [('plain.bst', 572, 6, 572, 20)]), StyString('LITERAL', 'output', [('plain.bst', 572, 21, 572, 27)]), StyString('LITERAL', 'new.block', [('plain.bst', 573, 6, 573, 15)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 574, 6, 574, 26)]), StyString('LITERAL', 'output', [('plain.bst', 574, 27, 574, 33)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 575, 6, 575, 18)]), StyString('LITERAL', 'publisher', [('plain.bst', 576, 6, 576, 15)]), StyString('QUOTE', 'publisher', [('plain.bst', 576, 16, 576, 27)]), StyString('LITERAL', 'output.check', [('plain.bst', 576, 28, 576, 40)]), StyString('LITERAL', 'address', [('plain.bst', 577, 6, 577, 13)]), StyString('LITERAL', 'output', [('plain.bst', 577, 14, 577, 20)]))], [('plain.bst', 572, 4, 578, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'new.block', [('plain.bst', 579, 6, 579, 15)]), StyString('LITERAL', 'format.book.crossref', [('plain.bst', 580, 6, 580, 26)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 580, 27, 580, 41)]))], [('plain.bst', 579, 4, 581, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 582, 2, 582, 5)]), StyString('LITERAL', 'format.edition', [('plain.bst', 583, 2, 583, 16)]), StyString('LITERAL', 'output', [('plain.bst', 583, 17, 583, 23)]), StyString('LITERAL', 'format.date', [('plain.bst', 584, 2, 584, 13)]), StyString('QUOTE', 'year', [('plain.bst', 584, 14, 584, 20)]), StyString('LITERAL', 'output.check', [('plain.bst', 584, 21, 584, 33)]), StyString('LITERAL', 'new.block', [('plain.bst', 585, 2, 585, 11)]), StyString('LITERAL', 'note', [('plain.bst', 586, 2, 586, 6)]), StyString('LITERAL', 'output', [('plain.bst', 586, 7, 586, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 587, 2, 587, 11)]))], [('plain.bst', 558, 16, 588, 2)]))], [('plain.bst', 557, 1, 588, 2)])); ; 
  my $bst__booklet = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 591, 2, 591, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 592, 2, 592, 16)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 592, 17, 592, 23)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 593, 2, 593, 11)])); 
    $bst__formatZotitle->($context, $config, StyString('LITERAL', 'format.title', [('plain.bst', 594, 2, 594, 14)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 594, 15, 594, 22)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 594, 23, 594, 35)])); 
    lookupEntryField($context, $config, 'howpublished', StyString('LITERAL', 'howpublished', [('plain.bst', 595, 2, 595, 14)])); 
    lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 595, 15, 595, 22)])); 
    $bst__newZoblockZocheckb->($context, $config, StyString('LITERAL', 'new.block.checkb', [('plain.bst', 595, 23, 595, 39)])); 
    lookupEntryField($context, $config, 'howpublished', StyString('LITERAL', 'howpublished', [('plain.bst', 596, 2, 596, 14)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 596, 15, 596, 21)])); 
    lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 597, 2, 597, 9)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 597, 10, 597, 16)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 598, 2, 598, 13)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 598, 14, 598, 20)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 599, 2, 599, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 600, 2, 600, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 600, 7, 600, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 601, 2, 601, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'booklet', $bst__booklet, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 589, 1, 590, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'booklet', [('plain.bst', 590, 10, 590, 17)]))], [('plain.bst', 590, 9, 590, 18)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 591, 2, 591, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 592, 2, 592, 16)]), StyString('LITERAL', 'output', [('plain.bst', 592, 17, 592, 23)]), StyString('LITERAL', 'new.block', [('plain.bst', 593, 2, 593, 11)]), StyString('LITERAL', 'format.title', [('plain.bst', 594, 2, 594, 14)]), StyString('QUOTE', 'title', [('plain.bst', 594, 15, 594, 22)]), StyString('LITERAL', 'output.check', [('plain.bst', 594, 23, 594, 35)]), StyString('LITERAL', 'howpublished', [('plain.bst', 595, 2, 595, 14)]), StyString('LITERAL', 'address', [('plain.bst', 595, 15, 595, 22)]), StyString('LITERAL', 'new.block.checkb', [('plain.bst', 595, 23, 595, 39)]), StyString('LITERAL', 'howpublished', [('plain.bst', 596, 2, 596, 14)]), StyString('LITERAL', 'output', [('plain.bst', 596, 15, 596, 21)]), StyString('LITERAL', 'address', [('plain.bst', 597, 2, 597, 9)]), StyString('LITERAL', 'output', [('plain.bst', 597, 10, 597, 16)]), StyString('LITERAL', 'format.date', [('plain.bst', 598, 2, 598, 13)]), StyString('LITERAL', 'output', [('plain.bst', 598, 14, 598, 20)]), StyString('LITERAL', 'new.block', [('plain.bst', 599, 2, 599, 11)]), StyString('LITERAL', 'note', [('plain.bst', 600, 2, 600, 6)]), StyString('LITERAL', 'output', [('plain.bst', 600, 7, 600, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 601, 2, 601, 11)]))], [('plain.bst', 590, 19, 602, 2)]))], [('plain.bst', 589, 1, 602, 2)])); ; 
  my $bst__inbook = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 605, 2, 605, 16)])); 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 606, 2, 606, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 606, 9, 606, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoeditors->($context, $config, StyString('LITERAL', 'format.editors', [('plain.bst', 607, 6, 607, 20)])); 
      pushString($context, $config, 'author and editor', StyString('QUOTE', 'author and editor', [('plain.bst', 607, 21, 607, 40)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 607, 41, 607, 53)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [('plain.bst', 607, 6, 607, 20)]), StyString('QUOTE', 'author and editor', [('plain.bst', 607, 21, 607, 40)]), StyString('LITERAL', 'output.check', [('plain.bst', 607, 41, 607, 53)]))], [('plain.bst', 607, 4, 607, 55)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 608, 6, 608, 20)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 608, 21, 608, 35)])); 
      lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 609, 6, 609, 14)])); 
      builtinMissing($context, $config, StyString('LITERAL', 'missing$', [('plain.bst', 609, 15, 609, 23)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'author and editor', StyString('QUOTE', 'author and editor', [('plain.bst', 610, 10, 610, 29)])); 
        lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 610, 30, 610, 36)])); 
        $bst__eitherZoorZocheck->($context, $config, StyString('LITERAL', 'either.or.check', [('plain.bst', 610, 37, 610, 52)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [('plain.bst', 610, 10, 610, 29)]), StyString('LITERAL', 'editor', [('plain.bst', 610, 30, 610, 36)]), StyString('LITERAL', 'either.or.check', [('plain.bst', 610, 37, 610, 52)]))], [('plain.bst', 610, 8, 610, 54)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 611, 8, 611, 14)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 612, 6, 612, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [('plain.bst', 608, 6, 608, 20)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 608, 21, 608, 35)]), StyString('LITERAL', 'crossref', [('plain.bst', 609, 6, 609, 14)]), StyString('LITERAL', 'missing$', [('plain.bst', 609, 15, 609, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [('plain.bst', 610, 10, 610, 29)]), StyString('LITERAL', 'editor', [('plain.bst', 610, 30, 610, 36)]), StyString('LITERAL', 'either.or.check', [('plain.bst', 610, 37, 610, 52)]))], [('plain.bst', 610, 8, 610, 54)]), StyString('REFERENCE', 'skip$', [('plain.bst', 611, 8, 611, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 612, 6, 612, 9)]))], [('plain.bst', 608, 4, 613, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 614, 2, 614, 5)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 615, 2, 615, 11)])); 
    $bst__formatZobtitle->($context, $config, StyString('LITERAL', 'format.btitle', [('plain.bst', 616, 2, 616, 15)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 616, 16, 616, 23)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 616, 24, 616, 36)])); 
    lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 617, 2, 617, 10)])); 
    builtinMissing($context, $config, StyString('LITERAL', 'missing$', [('plain.bst', 617, 11, 617, 19)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZobvolume->($context, $config, StyString('LITERAL', 'format.bvolume', [('plain.bst', 618, 6, 618, 20)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 618, 21, 618, 27)])); 
      $bst__formatZochapterZopages->($context, $config, StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 619, 6, 619, 26)])); 
      pushString($context, $config, 'chapter and pages', StyString('QUOTE', 'chapter and pages', [('plain.bst', 619, 27, 619, 46)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 619, 47, 619, 59)])); 
      $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 620, 6, 620, 15)])); 
      $bst__formatZonumberZoseries->($context, $config, StyString('LITERAL', 'format.number.series', [('plain.bst', 621, 6, 621, 26)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 621, 27, 621, 33)])); 
      $bst__newZosentence->($context, $config, StyString('LITERAL', 'new.sentence', [('plain.bst', 622, 6, 622, 18)])); 
      lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 623, 6, 623, 15)])); 
      pushString($context, $config, 'publisher', StyString('QUOTE', 'publisher', [('plain.bst', 623, 16, 623, 27)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 623, 28, 623, 40)])); 
      lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 624, 6, 624, 13)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 624, 14, 624, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.bvolume', [('plain.bst', 618, 6, 618, 20)]), StyString('LITERAL', 'output', [('plain.bst', 618, 21, 618, 27)]), StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 619, 6, 619, 26)]), StyString('QUOTE', 'chapter and pages', [('plain.bst', 619, 27, 619, 46)]), StyString('LITERAL', 'output.check', [('plain.bst', 619, 47, 619, 59)]), StyString('LITERAL', 'new.block', [('plain.bst', 620, 6, 620, 15)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 621, 6, 621, 26)]), StyString('LITERAL', 'output', [('plain.bst', 621, 27, 621, 33)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 622, 6, 622, 18)]), StyString('LITERAL', 'publisher', [('plain.bst', 623, 6, 623, 15)]), StyString('QUOTE', 'publisher', [('plain.bst', 623, 16, 623, 27)]), StyString('LITERAL', 'output.check', [('plain.bst', 623, 28, 623, 40)]), StyString('LITERAL', 'address', [('plain.bst', 624, 6, 624, 13)]), StyString('LITERAL', 'output', [('plain.bst', 624, 14, 624, 20)]))], [('plain.bst', 618, 4, 625, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZochapterZopages->($context, $config, StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 626, 6, 626, 26)])); 
      pushString($context, $config, 'chapter and pages', StyString('QUOTE', 'chapter and pages', [('plain.bst', 626, 27, 626, 46)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 626, 47, 626, 59)])); 
      $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 627, 6, 627, 15)])); 
      $bst__formatZobookZocrossref->($context, $config, StyString('LITERAL', 'format.book.crossref', [('plain.bst', 628, 6, 628, 26)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 628, 27, 628, 41)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 626, 6, 626, 26)]), StyString('QUOTE', 'chapter and pages', [('plain.bst', 626, 27, 626, 46)]), StyString('LITERAL', 'output.check', [('plain.bst', 626, 47, 626, 59)]), StyString('LITERAL', 'new.block', [('plain.bst', 627, 6, 627, 15)]), StyString('LITERAL', 'format.book.crossref', [('plain.bst', 628, 6, 628, 26)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 628, 27, 628, 41)]))], [('plain.bst', 626, 4, 629, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 630, 2, 630, 5)])); 
    $bst__formatZoedition->($context, $config, StyString('LITERAL', 'format.edition', [('plain.bst', 631, 2, 631, 16)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 631, 17, 631, 23)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 632, 2, 632, 13)])); 
    pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 632, 14, 632, 20)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 632, 21, 632, 33)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 633, 2, 633, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 634, 2, 634, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 634, 7, 634, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 635, 2, 635, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'inbook', $bst__inbook, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 603, 1, 604, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'inbook', [('plain.bst', 604, 10, 604, 16)]))], [('plain.bst', 604, 9, 604, 17)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 605, 2, 605, 16)]), StyString('LITERAL', 'author', [('plain.bst', 606, 2, 606, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 606, 9, 606, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [('plain.bst', 607, 6, 607, 20)]), StyString('QUOTE', 'author and editor', [('plain.bst', 607, 21, 607, 40)]), StyString('LITERAL', 'output.check', [('plain.bst', 607, 41, 607, 53)]))], [('plain.bst', 607, 4, 607, 55)]), StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [('plain.bst', 608, 6, 608, 20)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 608, 21, 608, 35)]), StyString('LITERAL', 'crossref', [('plain.bst', 609, 6, 609, 14)]), StyString('LITERAL', 'missing$', [('plain.bst', 609, 15, 609, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [('plain.bst', 610, 10, 610, 29)]), StyString('LITERAL', 'editor', [('plain.bst', 610, 30, 610, 36)]), StyString('LITERAL', 'either.or.check', [('plain.bst', 610, 37, 610, 52)]))], [('plain.bst', 610, 8, 610, 54)]), StyString('REFERENCE', 'skip$', [('plain.bst', 611, 8, 611, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 612, 6, 612, 9)]))], [('plain.bst', 608, 4, 613, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 614, 2, 614, 5)]), StyString('LITERAL', 'new.block', [('plain.bst', 615, 2, 615, 11)]), StyString('LITERAL', 'format.btitle', [('plain.bst', 616, 2, 616, 15)]), StyString('QUOTE', 'title', [('plain.bst', 616, 16, 616, 23)]), StyString('LITERAL', 'output.check', [('plain.bst', 616, 24, 616, 36)]), StyString('LITERAL', 'crossref', [('plain.bst', 617, 2, 617, 10)]), StyString('LITERAL', 'missing$', [('plain.bst', 617, 11, 617, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'format.bvolume', [('plain.bst', 618, 6, 618, 20)]), StyString('LITERAL', 'output', [('plain.bst', 618, 21, 618, 27)]), StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 619, 6, 619, 26)]), StyString('QUOTE', 'chapter and pages', [('plain.bst', 619, 27, 619, 46)]), StyString('LITERAL', 'output.check', [('plain.bst', 619, 47, 619, 59)]), StyString('LITERAL', 'new.block', [('plain.bst', 620, 6, 620, 15)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 621, 6, 621, 26)]), StyString('LITERAL', 'output', [('plain.bst', 621, 27, 621, 33)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 622, 6, 622, 18)]), StyString('LITERAL', 'publisher', [('plain.bst', 623, 6, 623, 15)]), StyString('QUOTE', 'publisher', [('plain.bst', 623, 16, 623, 27)]), StyString('LITERAL', 'output.check', [('plain.bst', 623, 28, 623, 40)]), StyString('LITERAL', 'address', [('plain.bst', 624, 6, 624, 13)]), StyString('LITERAL', 'output', [('plain.bst', 624, 14, 624, 20)]))], [('plain.bst', 618, 4, 625, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 626, 6, 626, 26)]), StyString('QUOTE', 'chapter and pages', [('plain.bst', 626, 27, 626, 46)]), StyString('LITERAL', 'output.check', [('plain.bst', 626, 47, 626, 59)]), StyString('LITERAL', 'new.block', [('plain.bst', 627, 6, 627, 15)]), StyString('LITERAL', 'format.book.crossref', [('plain.bst', 628, 6, 628, 26)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 628, 27, 628, 41)]))], [('plain.bst', 626, 4, 629, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 630, 2, 630, 5)]), StyString('LITERAL', 'format.edition', [('plain.bst', 631, 2, 631, 16)]), StyString('LITERAL', 'output', [('plain.bst', 631, 17, 631, 23)]), StyString('LITERAL', 'format.date', [('plain.bst', 632, 2, 632, 13)]), StyString('QUOTE', 'year', [('plain.bst', 632, 14, 632, 20)]), StyString('LITERAL', 'output.check', [('plain.bst', 632, 21, 632, 33)]), StyString('LITERAL', 'new.block', [('plain.bst', 633, 2, 633, 11)]), StyString('LITERAL', 'note', [('plain.bst', 634, 2, 634, 6)]), StyString('LITERAL', 'output', [('plain.bst', 634, 7, 634, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 635, 2, 635, 11)]))], [('plain.bst', 604, 18, 636, 2)]))], [('plain.bst', 603, 1, 636, 2)])); ; 
  my $bst__incollection = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 639, 2, 639, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 640, 2, 640, 16)])); 
    pushString($context, $config, 'author', StyString('QUOTE', 'author', [('plain.bst', 640, 17, 640, 25)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 640, 26, 640, 38)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 641, 2, 641, 11)])); 
    $bst__formatZotitle->($context, $config, StyString('LITERAL', 'format.title', [('plain.bst', 642, 2, 642, 14)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 642, 15, 642, 22)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 642, 23, 642, 35)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 643, 2, 643, 11)])); 
    lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 644, 2, 644, 10)])); 
    builtinMissing($context, $config, StyString('LITERAL', 'missing$', [('plain.bst', 644, 11, 644, 19)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoinZoedZobooktitle->($context, $config, StyString('LITERAL', 'format.in.ed.booktitle', [('plain.bst', 645, 6, 645, 28)])); 
      pushString($context, $config, 'booktitle', StyString('QUOTE', 'booktitle', [('plain.bst', 645, 29, 645, 40)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 645, 41, 645, 53)])); 
      $bst__formatZobvolume->($context, $config, StyString('LITERAL', 'format.bvolume', [('plain.bst', 646, 6, 646, 20)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 646, 21, 646, 27)])); 
      $bst__formatZonumberZoseries->($context, $config, StyString('LITERAL', 'format.number.series', [('plain.bst', 647, 6, 647, 26)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 647, 27, 647, 33)])); 
      $bst__formatZochapterZopages->($context, $config, StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 648, 6, 648, 26)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 648, 27, 648, 33)])); 
      $bst__newZosentence->($context, $config, StyString('LITERAL', 'new.sentence', [('plain.bst', 649, 6, 649, 18)])); 
      lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 650, 6, 650, 15)])); 
      pushString($context, $config, 'publisher', StyString('QUOTE', 'publisher', [('plain.bst', 650, 16, 650, 27)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 650, 28, 650, 40)])); 
      lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 651, 6, 651, 13)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 651, 14, 651, 20)])); 
      $bst__formatZoedition->($context, $config, StyString('LITERAL', 'format.edition', [('plain.bst', 652, 6, 652, 20)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 652, 21, 652, 27)])); 
      $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 653, 6, 653, 17)])); 
      pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 653, 18, 653, 24)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 653, 25, 653, 37)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.in.ed.booktitle', [('plain.bst', 645, 6, 645, 28)]), StyString('QUOTE', 'booktitle', [('plain.bst', 645, 29, 645, 40)]), StyString('LITERAL', 'output.check', [('plain.bst', 645, 41, 645, 53)]), StyString('LITERAL', 'format.bvolume', [('plain.bst', 646, 6, 646, 20)]), StyString('LITERAL', 'output', [('plain.bst', 646, 21, 646, 27)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 647, 6, 647, 26)]), StyString('LITERAL', 'output', [('plain.bst', 647, 27, 647, 33)]), StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 648, 6, 648, 26)]), StyString('LITERAL', 'output', [('plain.bst', 648, 27, 648, 33)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 649, 6, 649, 18)]), StyString('LITERAL', 'publisher', [('plain.bst', 650, 6, 650, 15)]), StyString('QUOTE', 'publisher', [('plain.bst', 650, 16, 650, 27)]), StyString('LITERAL', 'output.check', [('plain.bst', 650, 28, 650, 40)]), StyString('LITERAL', 'address', [('plain.bst', 651, 6, 651, 13)]), StyString('LITERAL', 'output', [('plain.bst', 651, 14, 651, 20)]), StyString('LITERAL', 'format.edition', [('plain.bst', 652, 6, 652, 20)]), StyString('LITERAL', 'output', [('plain.bst', 652, 21, 652, 27)]), StyString('LITERAL', 'format.date', [('plain.bst', 653, 6, 653, 17)]), StyString('QUOTE', 'year', [('plain.bst', 653, 18, 653, 24)]), StyString('LITERAL', 'output.check', [('plain.bst', 653, 25, 653, 37)]))], [('plain.bst', 645, 4, 654, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoincollZoinprocZocrossref->($context, $config, StyString('LITERAL', 'format.incoll.inproc.crossref', [('plain.bst', 655, 6, 655, 35)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 655, 36, 655, 50)])); 
      $bst__formatZochapterZopages->($context, $config, StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 656, 6, 656, 26)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 656, 27, 656, 33)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.incoll.inproc.crossref', [('plain.bst', 655, 6, 655, 35)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 655, 36, 655, 50)]), StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 656, 6, 656, 26)]), StyString('LITERAL', 'output', [('plain.bst', 656, 27, 656, 33)]))], [('plain.bst', 655, 4, 657, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 658, 2, 658, 5)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 659, 2, 659, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 660, 2, 660, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 660, 7, 660, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 661, 2, 661, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'incollection', $bst__incollection, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 637, 1, 638, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'incollection', [('plain.bst', 638, 10, 638, 22)]))], [('plain.bst', 638, 9, 638, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 639, 2, 639, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 640, 2, 640, 16)]), StyString('QUOTE', 'author', [('plain.bst', 640, 17, 640, 25)]), StyString('LITERAL', 'output.check', [('plain.bst', 640, 26, 640, 38)]), StyString('LITERAL', 'new.block', [('plain.bst', 641, 2, 641, 11)]), StyString('LITERAL', 'format.title', [('plain.bst', 642, 2, 642, 14)]), StyString('QUOTE', 'title', [('plain.bst', 642, 15, 642, 22)]), StyString('LITERAL', 'output.check', [('plain.bst', 642, 23, 642, 35)]), StyString('LITERAL', 'new.block', [('plain.bst', 643, 2, 643, 11)]), StyString('LITERAL', 'crossref', [('plain.bst', 644, 2, 644, 10)]), StyString('LITERAL', 'missing$', [('plain.bst', 644, 11, 644, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'format.in.ed.booktitle', [('plain.bst', 645, 6, 645, 28)]), StyString('QUOTE', 'booktitle', [('plain.bst', 645, 29, 645, 40)]), StyString('LITERAL', 'output.check', [('plain.bst', 645, 41, 645, 53)]), StyString('LITERAL', 'format.bvolume', [('plain.bst', 646, 6, 646, 20)]), StyString('LITERAL', 'output', [('plain.bst', 646, 21, 646, 27)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 647, 6, 647, 26)]), StyString('LITERAL', 'output', [('plain.bst', 647, 27, 647, 33)]), StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 648, 6, 648, 26)]), StyString('LITERAL', 'output', [('plain.bst', 648, 27, 648, 33)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 649, 6, 649, 18)]), StyString('LITERAL', 'publisher', [('plain.bst', 650, 6, 650, 15)]), StyString('QUOTE', 'publisher', [('plain.bst', 650, 16, 650, 27)]), StyString('LITERAL', 'output.check', [('plain.bst', 650, 28, 650, 40)]), StyString('LITERAL', 'address', [('plain.bst', 651, 6, 651, 13)]), StyString('LITERAL', 'output', [('plain.bst', 651, 14, 651, 20)]), StyString('LITERAL', 'format.edition', [('plain.bst', 652, 6, 652, 20)]), StyString('LITERAL', 'output', [('plain.bst', 652, 21, 652, 27)]), StyString('LITERAL', 'format.date', [('plain.bst', 653, 6, 653, 17)]), StyString('QUOTE', 'year', [('plain.bst', 653, 18, 653, 24)]), StyString('LITERAL', 'output.check', [('plain.bst', 653, 25, 653, 37)]))], [('plain.bst', 645, 4, 654, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'format.incoll.inproc.crossref', [('plain.bst', 655, 6, 655, 35)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 655, 36, 655, 50)]), StyString('LITERAL', 'format.chapter.pages', [('plain.bst', 656, 6, 656, 26)]), StyString('LITERAL', 'output', [('plain.bst', 656, 27, 656, 33)]))], [('plain.bst', 655, 4, 657, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 658, 2, 658, 5)]), StyString('LITERAL', 'new.block', [('plain.bst', 659, 2, 659, 11)]), StyString('LITERAL', 'note', [('plain.bst', 660, 2, 660, 6)]), StyString('LITERAL', 'output', [('plain.bst', 660, 7, 660, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 661, 2, 661, 11)]))], [('plain.bst', 638, 24, 662, 2)]))], [('plain.bst', 637, 1, 662, 2)])); ; 
  my $bst__inproceedings = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 665, 2, 665, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 666, 2, 666, 16)])); 
    pushString($context, $config, 'author', StyString('QUOTE', 'author', [('plain.bst', 666, 17, 666, 25)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 666, 26, 666, 38)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 667, 2, 667, 11)])); 
    $bst__formatZotitle->($context, $config, StyString('LITERAL', 'format.title', [('plain.bst', 668, 2, 668, 14)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 668, 15, 668, 22)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 668, 23, 668, 35)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 669, 2, 669, 11)])); 
    lookupEntryField($context, $config, 'crossref', StyString('LITERAL', 'crossref', [('plain.bst', 670, 2, 670, 10)])); 
    builtinMissing($context, $config, StyString('LITERAL', 'missing$', [('plain.bst', 670, 11, 670, 19)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoinZoedZobooktitle->($context, $config, StyString('LITERAL', 'format.in.ed.booktitle', [('plain.bst', 671, 6, 671, 28)])); 
      pushString($context, $config, 'booktitle', StyString('QUOTE', 'booktitle', [('plain.bst', 671, 29, 671, 40)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 671, 41, 671, 53)])); 
      $bst__formatZobvolume->($context, $config, StyString('LITERAL', 'format.bvolume', [('plain.bst', 672, 6, 672, 20)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 672, 21, 672, 27)])); 
      $bst__formatZonumberZoseries->($context, $config, StyString('LITERAL', 'format.number.series', [('plain.bst', 673, 6, 673, 26)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 673, 27, 673, 33)])); 
      $bst__formatZopages->($context, $config, StyString('LITERAL', 'format.pages', [('plain.bst', 674, 6, 674, 18)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 674, 19, 674, 25)])); 
      lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 675, 6, 675, 13)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 675, 14, 675, 20)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 676, 10, 676, 22)])); 
        lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 676, 23, 676, 32)])); 
        $bst__newZosentenceZocheckb->($context, $config, StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 676, 33, 676, 52)])); 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 677, 10, 677, 22)])); 
        $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 677, 23, 677, 29)])); 
        lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 678, 10, 678, 19)])); 
        $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 678, 20, 678, 26)])); 
        $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 679, 10, 679, 21)])); 
        pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 679, 22, 679, 28)])); 
        $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 679, 29, 679, 41)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 676, 10, 676, 22)]), StyString('LITERAL', 'publisher', [('plain.bst', 676, 23, 676, 32)]), StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 676, 33, 676, 52)]), StyString('LITERAL', 'organization', [('plain.bst', 677, 10, 677, 22)]), StyString('LITERAL', 'output', [('plain.bst', 677, 23, 677, 29)]), StyString('LITERAL', 'publisher', [('plain.bst', 678, 10, 678, 19)]), StyString('LITERAL', 'output', [('plain.bst', 678, 20, 678, 26)]), StyString('LITERAL', 'format.date', [('plain.bst', 679, 10, 679, 21)]), StyString('QUOTE', 'year', [('plain.bst', 679, 22, 679, 28)]), StyString('LITERAL', 'output.check', [('plain.bst', 679, 29, 679, 41)]))], [('plain.bst', 676, 8, 680, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 681, 10, 681, 17)])); 
        $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 681, 18, 681, 32)])); 
        $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 682, 10, 682, 21)])); 
        pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 682, 22, 682, 28)])); 
        $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 682, 29, 682, 41)])); 
        $bst__newZosentence->($context, $config, StyString('LITERAL', 'new.sentence', [('plain.bst', 683, 10, 683, 22)])); 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 684, 10, 684, 22)])); 
        $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 684, 23, 684, 29)])); 
        lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 685, 10, 685, 19)])); 
        $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 685, 20, 685, 26)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'address', [('plain.bst', 681, 10, 681, 17)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 681, 18, 681, 32)]), StyString('LITERAL', 'format.date', [('plain.bst', 682, 10, 682, 21)]), StyString('QUOTE', 'year', [('plain.bst', 682, 22, 682, 28)]), StyString('LITERAL', 'output.check', [('plain.bst', 682, 29, 682, 41)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 683, 10, 683, 22)]), StyString('LITERAL', 'organization', [('plain.bst', 684, 10, 684, 22)]), StyString('LITERAL', 'output', [('plain.bst', 684, 23, 684, 29)]), StyString('LITERAL', 'publisher', [('plain.bst', 685, 10, 685, 19)]), StyString('LITERAL', 'output', [('plain.bst', 685, 20, 685, 26)]))], [('plain.bst', 681, 8, 686, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 687, 6, 687, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.in.ed.booktitle', [('plain.bst', 671, 6, 671, 28)]), StyString('QUOTE', 'booktitle', [('plain.bst', 671, 29, 671, 40)]), StyString('LITERAL', 'output.check', [('plain.bst', 671, 41, 671, 53)]), StyString('LITERAL', 'format.bvolume', [('plain.bst', 672, 6, 672, 20)]), StyString('LITERAL', 'output', [('plain.bst', 672, 21, 672, 27)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 673, 6, 673, 26)]), StyString('LITERAL', 'output', [('plain.bst', 673, 27, 673, 33)]), StyString('LITERAL', 'format.pages', [('plain.bst', 674, 6, 674, 18)]), StyString('LITERAL', 'output', [('plain.bst', 674, 19, 674, 25)]), StyString('LITERAL', 'address', [('plain.bst', 675, 6, 675, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 675, 14, 675, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 676, 10, 676, 22)]), StyString('LITERAL', 'publisher', [('plain.bst', 676, 23, 676, 32)]), StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 676, 33, 676, 52)]), StyString('LITERAL', 'organization', [('plain.bst', 677, 10, 677, 22)]), StyString('LITERAL', 'output', [('plain.bst', 677, 23, 677, 29)]), StyString('LITERAL', 'publisher', [('plain.bst', 678, 10, 678, 19)]), StyString('LITERAL', 'output', [('plain.bst', 678, 20, 678, 26)]), StyString('LITERAL', 'format.date', [('plain.bst', 679, 10, 679, 21)]), StyString('QUOTE', 'year', [('plain.bst', 679, 22, 679, 28)]), StyString('LITERAL', 'output.check', [('plain.bst', 679, 29, 679, 41)]))], [('plain.bst', 676, 8, 680, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'address', [('plain.bst', 681, 10, 681, 17)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 681, 18, 681, 32)]), StyString('LITERAL', 'format.date', [('plain.bst', 682, 10, 682, 21)]), StyString('QUOTE', 'year', [('plain.bst', 682, 22, 682, 28)]), StyString('LITERAL', 'output.check', [('plain.bst', 682, 29, 682, 41)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 683, 10, 683, 22)]), StyString('LITERAL', 'organization', [('plain.bst', 684, 10, 684, 22)]), StyString('LITERAL', 'output', [('plain.bst', 684, 23, 684, 29)]), StyString('LITERAL', 'publisher', [('plain.bst', 685, 10, 685, 19)]), StyString('LITERAL', 'output', [('plain.bst', 685, 20, 685, 26)]))], [('plain.bst', 681, 8, 686, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 687, 6, 687, 9)]))], [('plain.bst', 671, 4, 688, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoincollZoinprocZocrossref->($context, $config, StyString('LITERAL', 'format.incoll.inproc.crossref', [('plain.bst', 689, 6, 689, 35)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 689, 36, 689, 50)])); 
      $bst__formatZopages->($context, $config, StyString('LITERAL', 'format.pages', [('plain.bst', 690, 6, 690, 18)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 690, 19, 690, 25)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.incoll.inproc.crossref', [('plain.bst', 689, 6, 689, 35)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 689, 36, 689, 50)]), StyString('LITERAL', 'format.pages', [('plain.bst', 690, 6, 690, 18)]), StyString('LITERAL', 'output', [('plain.bst', 690, 19, 690, 25)]))], [('plain.bst', 689, 4, 691, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 692, 2, 692, 5)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 693, 2, 693, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 694, 2, 694, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 694, 7, 694, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 695, 2, 695, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'inproceedings', $bst__inproceedings, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 663, 1, 664, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'inproceedings', [('plain.bst', 664, 10, 664, 23)]))], [('plain.bst', 664, 9, 664, 24)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 665, 2, 665, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 666, 2, 666, 16)]), StyString('QUOTE', 'author', [('plain.bst', 666, 17, 666, 25)]), StyString('LITERAL', 'output.check', [('plain.bst', 666, 26, 666, 38)]), StyString('LITERAL', 'new.block', [('plain.bst', 667, 2, 667, 11)]), StyString('LITERAL', 'format.title', [('plain.bst', 668, 2, 668, 14)]), StyString('QUOTE', 'title', [('plain.bst', 668, 15, 668, 22)]), StyString('LITERAL', 'output.check', [('plain.bst', 668, 23, 668, 35)]), StyString('LITERAL', 'new.block', [('plain.bst', 669, 2, 669, 11)]), StyString('LITERAL', 'crossref', [('plain.bst', 670, 2, 670, 10)]), StyString('LITERAL', 'missing$', [('plain.bst', 670, 11, 670, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'format.in.ed.booktitle', [('plain.bst', 671, 6, 671, 28)]), StyString('QUOTE', 'booktitle', [('plain.bst', 671, 29, 671, 40)]), StyString('LITERAL', 'output.check', [('plain.bst', 671, 41, 671, 53)]), StyString('LITERAL', 'format.bvolume', [('plain.bst', 672, 6, 672, 20)]), StyString('LITERAL', 'output', [('plain.bst', 672, 21, 672, 27)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 673, 6, 673, 26)]), StyString('LITERAL', 'output', [('plain.bst', 673, 27, 673, 33)]), StyString('LITERAL', 'format.pages', [('plain.bst', 674, 6, 674, 18)]), StyString('LITERAL', 'output', [('plain.bst', 674, 19, 674, 25)]), StyString('LITERAL', 'address', [('plain.bst', 675, 6, 675, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 675, 14, 675, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 676, 10, 676, 22)]), StyString('LITERAL', 'publisher', [('plain.bst', 676, 23, 676, 32)]), StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 676, 33, 676, 52)]), StyString('LITERAL', 'organization', [('plain.bst', 677, 10, 677, 22)]), StyString('LITERAL', 'output', [('plain.bst', 677, 23, 677, 29)]), StyString('LITERAL', 'publisher', [('plain.bst', 678, 10, 678, 19)]), StyString('LITERAL', 'output', [('plain.bst', 678, 20, 678, 26)]), StyString('LITERAL', 'format.date', [('plain.bst', 679, 10, 679, 21)]), StyString('QUOTE', 'year', [('plain.bst', 679, 22, 679, 28)]), StyString('LITERAL', 'output.check', [('plain.bst', 679, 29, 679, 41)]))], [('plain.bst', 676, 8, 680, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'address', [('plain.bst', 681, 10, 681, 17)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 681, 18, 681, 32)]), StyString('LITERAL', 'format.date', [('plain.bst', 682, 10, 682, 21)]), StyString('QUOTE', 'year', [('plain.bst', 682, 22, 682, 28)]), StyString('LITERAL', 'output.check', [('plain.bst', 682, 29, 682, 41)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 683, 10, 683, 22)]), StyString('LITERAL', 'organization', [('plain.bst', 684, 10, 684, 22)]), StyString('LITERAL', 'output', [('plain.bst', 684, 23, 684, 29)]), StyString('LITERAL', 'publisher', [('plain.bst', 685, 10, 685, 19)]), StyString('LITERAL', 'output', [('plain.bst', 685, 20, 685, 26)]))], [('plain.bst', 681, 8, 686, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 687, 6, 687, 9)]))], [('plain.bst', 671, 4, 688, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'format.incoll.inproc.crossref', [('plain.bst', 689, 6, 689, 35)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 689, 36, 689, 50)]), StyString('LITERAL', 'format.pages', [('plain.bst', 690, 6, 690, 18)]), StyString('LITERAL', 'output', [('plain.bst', 690, 19, 690, 25)]))], [('plain.bst', 689, 4, 691, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 692, 2, 692, 5)]), StyString('LITERAL', 'new.block', [('plain.bst', 693, 2, 693, 11)]), StyString('LITERAL', 'note', [('plain.bst', 694, 2, 694, 6)]), StyString('LITERAL', 'output', [('plain.bst', 694, 7, 694, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 695, 2, 695, 11)]))], [('plain.bst', 664, 25, 696, 2)]))], [('plain.bst', 663, 1, 696, 2)])); ; 
  my $bst__conference = sub { 
    my ($context, $config) = @_; 
    $bst__inproceedings->($context, $config, StyString('LITERAL', 'inproceedings', [('plain.bst', 698, 24, 698, 37)])); 
  }; 
  registerFunctionDefinition($context, $config, 'conference', $bst__conference, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 697, 1, 698, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'conference', [('plain.bst', 698, 10, 698, 20)]))], [('plain.bst', 698, 9, 698, 21)]), StyString('BLOCK', [(StyString('LITERAL', 'inproceedings', [('plain.bst', 698, 24, 698, 37)]))], [('plain.bst', 698, 22, 698, 39)]))], [('plain.bst', 697, 1, 698, 39)])); ; 
  my $bst__manual = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 701, 2, 701, 16)])); 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 702, 2, 702, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 702, 9, 702, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 703, 6, 703, 18)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 703, 19, 703, 25)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 704, 8, 704, 14)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 705, 10, 705, 22)])); 
        $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 705, 23, 705, 37)])); 
        lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 706, 10, 706, 17)])); 
        $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 706, 18, 706, 24)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 705, 10, 705, 22)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 705, 23, 705, 37)]), StyString('LITERAL', 'address', [('plain.bst', 706, 10, 706, 17)]), StyString('LITERAL', 'output', [('plain.bst', 706, 18, 706, 24)]))], [('plain.bst', 705, 8, 707, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 708, 6, 708, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 703, 6, 703, 18)]), StyString('LITERAL', 'empty$', [('plain.bst', 703, 19, 703, 25)]), StyString('REFERENCE', 'skip$', [('plain.bst', 704, 8, 704, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 705, 10, 705, 22)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 705, 23, 705, 37)]), StyString('LITERAL', 'address', [('plain.bst', 706, 10, 706, 17)]), StyString('LITERAL', 'output', [('plain.bst', 706, 18, 706, 24)]))], [('plain.bst', 705, 8, 707, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 708, 6, 708, 9)]))], [('plain.bst', 703, 4, 709, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 710, 6, 710, 20)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 710, 21, 710, 35)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [('plain.bst', 710, 6, 710, 20)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 710, 21, 710, 35)]))], [('plain.bst', 710, 4, 710, 37)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 711, 2, 711, 5)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 712, 2, 712, 11)])); 
    $bst__formatZobtitle->($context, $config, StyString('LITERAL', 'format.btitle', [('plain.bst', 713, 2, 713, 15)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 713, 16, 713, 23)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 713, 24, 713, 36)])); 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 714, 2, 714, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 714, 9, 714, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 715, 6, 715, 18)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 715, 19, 715, 25)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 716, 10, 716, 17)])); 
        $bst__newZoblockZochecka->($context, $config, StyString('LITERAL', 'new.block.checka', [('plain.bst', 716, 18, 716, 34)])); 
        lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 717, 10, 717, 17)])); 
        $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 717, 18, 717, 24)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'address', [('plain.bst', 716, 10, 716, 17)]), StyString('LITERAL', 'new.block.checka', [('plain.bst', 716, 18, 716, 34)]), StyString('LITERAL', 'address', [('plain.bst', 717, 10, 717, 17)]), StyString('LITERAL', 'output', [('plain.bst', 717, 18, 717, 24)]))], [('plain.bst', 716, 8, 718, 9)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 719, 8, 719, 14)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 720, 6, 720, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 715, 6, 715, 18)]), StyString('LITERAL', 'empty$', [('plain.bst', 715, 19, 715, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'address', [('plain.bst', 716, 10, 716, 17)]), StyString('LITERAL', 'new.block.checka', [('plain.bst', 716, 18, 716, 34)]), StyString('LITERAL', 'address', [('plain.bst', 717, 10, 717, 17)]), StyString('LITERAL', 'output', [('plain.bst', 717, 18, 717, 24)]))], [('plain.bst', 716, 8, 718, 9)]), StyString('REFERENCE', 'skip$', [('plain.bst', 719, 8, 719, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 720, 6, 720, 9)]))], [('plain.bst', 715, 4, 721, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 722, 6, 722, 18)])); 
      lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 722, 19, 722, 26)])); 
      $bst__newZoblockZocheckb->($context, $config, StyString('LITERAL', 'new.block.checkb', [('plain.bst', 722, 27, 722, 43)])); 
      lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 723, 6, 723, 18)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 723, 19, 723, 25)])); 
      lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 724, 6, 724, 13)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 724, 14, 724, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 722, 6, 722, 18)]), StyString('LITERAL', 'address', [('plain.bst', 722, 19, 722, 26)]), StyString('LITERAL', 'new.block.checkb', [('plain.bst', 722, 27, 722, 43)]), StyString('LITERAL', 'organization', [('plain.bst', 723, 6, 723, 18)]), StyString('LITERAL', 'output', [('plain.bst', 723, 19, 723, 25)]), StyString('LITERAL', 'address', [('plain.bst', 724, 6, 724, 13)]), StyString('LITERAL', 'output', [('plain.bst', 724, 14, 724, 20)]))], [('plain.bst', 722, 4, 725, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 726, 2, 726, 5)])); 
    $bst__formatZoedition->($context, $config, StyString('LITERAL', 'format.edition', [('plain.bst', 727, 2, 727, 16)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 727, 17, 727, 23)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 728, 2, 728, 13)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 728, 14, 728, 20)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 729, 2, 729, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 730, 2, 730, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 730, 7, 730, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 731, 2, 731, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'manual', $bst__manual, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 699, 1, 700, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'manual', [('plain.bst', 700, 10, 700, 16)]))], [('plain.bst', 700, 9, 700, 17)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 701, 2, 701, 16)]), StyString('LITERAL', 'author', [('plain.bst', 702, 2, 702, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 702, 9, 702, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 703, 6, 703, 18)]), StyString('LITERAL', 'empty$', [('plain.bst', 703, 19, 703, 25)]), StyString('REFERENCE', 'skip$', [('plain.bst', 704, 8, 704, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 705, 10, 705, 22)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 705, 23, 705, 37)]), StyString('LITERAL', 'address', [('plain.bst', 706, 10, 706, 17)]), StyString('LITERAL', 'output', [('plain.bst', 706, 18, 706, 24)]))], [('plain.bst', 705, 8, 707, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 708, 6, 708, 9)]))], [('plain.bst', 703, 4, 709, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [('plain.bst', 710, 6, 710, 20)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 710, 21, 710, 35)]))], [('plain.bst', 710, 4, 710, 37)]), StyString('LITERAL', 'if$', [('plain.bst', 711, 2, 711, 5)]), StyString('LITERAL', 'new.block', [('plain.bst', 712, 2, 712, 11)]), StyString('LITERAL', 'format.btitle', [('plain.bst', 713, 2, 713, 15)]), StyString('QUOTE', 'title', [('plain.bst', 713, 16, 713, 23)]), StyString('LITERAL', 'output.check', [('plain.bst', 713, 24, 713, 36)]), StyString('LITERAL', 'author', [('plain.bst', 714, 2, 714, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 714, 9, 714, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 715, 6, 715, 18)]), StyString('LITERAL', 'empty$', [('plain.bst', 715, 19, 715, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'address', [('plain.bst', 716, 10, 716, 17)]), StyString('LITERAL', 'new.block.checka', [('plain.bst', 716, 18, 716, 34)]), StyString('LITERAL', 'address', [('plain.bst', 717, 10, 717, 17)]), StyString('LITERAL', 'output', [('plain.bst', 717, 18, 717, 24)]))], [('plain.bst', 716, 8, 718, 9)]), StyString('REFERENCE', 'skip$', [('plain.bst', 719, 8, 719, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 720, 6, 720, 9)]))], [('plain.bst', 715, 4, 721, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 722, 6, 722, 18)]), StyString('LITERAL', 'address', [('plain.bst', 722, 19, 722, 26)]), StyString('LITERAL', 'new.block.checkb', [('plain.bst', 722, 27, 722, 43)]), StyString('LITERAL', 'organization', [('plain.bst', 723, 6, 723, 18)]), StyString('LITERAL', 'output', [('plain.bst', 723, 19, 723, 25)]), StyString('LITERAL', 'address', [('plain.bst', 724, 6, 724, 13)]), StyString('LITERAL', 'output', [('plain.bst', 724, 14, 724, 20)]))], [('plain.bst', 722, 4, 725, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 726, 2, 726, 5)]), StyString('LITERAL', 'format.edition', [('plain.bst', 727, 2, 727, 16)]), StyString('LITERAL', 'output', [('plain.bst', 727, 17, 727, 23)]), StyString('LITERAL', 'format.date', [('plain.bst', 728, 2, 728, 13)]), StyString('LITERAL', 'output', [('plain.bst', 728, 14, 728, 20)]), StyString('LITERAL', 'new.block', [('plain.bst', 729, 2, 729, 11)]), StyString('LITERAL', 'note', [('plain.bst', 730, 2, 730, 6)]), StyString('LITERAL', 'output', [('plain.bst', 730, 7, 730, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 731, 2, 731, 11)]))], [('plain.bst', 700, 18, 732, 2)]))], [('plain.bst', 699, 1, 732, 2)])); ; 
  my $bst__mastersthesis = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 735, 2, 735, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 736, 2, 736, 16)])); 
    pushString($context, $config, 'author', StyString('QUOTE', 'author', [('plain.bst', 736, 17, 736, 25)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 736, 26, 736, 38)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 737, 2, 737, 11)])); 
    $bst__formatZotitle->($context, $config, StyString('LITERAL', 'format.title', [('plain.bst', 738, 2, 738, 14)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 738, 15, 738, 22)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 738, 23, 738, 35)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 739, 2, 739, 11)])); 
    pushString($context, $config, 'Master\'s thesis', StyString('QUOTE', 'Master\'s thesis', [('plain.bst', 740, 2, 740, 19)])); 
    $bst__formatZothesisZotype->($context, $config, StyString('LITERAL', 'format.thesis.type', [('plain.bst', 740, 20, 740, 38)])); 
    $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 740, 39, 740, 53)])); 
    lookupEntryField($context, $config, 'school', StyString('LITERAL', 'school', [('plain.bst', 741, 2, 741, 8)])); 
    pushString($context, $config, 'school', StyString('QUOTE', 'school', [('plain.bst', 741, 9, 741, 17)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 741, 18, 741, 30)])); 
    lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 742, 2, 742, 9)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 742, 10, 742, 16)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 743, 2, 743, 13)])); 
    pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 743, 14, 743, 20)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 743, 21, 743, 33)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 744, 2, 744, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 745, 2, 745, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 745, 7, 745, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 746, 2, 746, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'mastersthesis', $bst__mastersthesis, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 733, 1, 734, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'mastersthesis', [('plain.bst', 734, 10, 734, 23)]))], [('plain.bst', 734, 9, 734, 24)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 735, 2, 735, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 736, 2, 736, 16)]), StyString('QUOTE', 'author', [('plain.bst', 736, 17, 736, 25)]), StyString('LITERAL', 'output.check', [('plain.bst', 736, 26, 736, 38)]), StyString('LITERAL', 'new.block', [('plain.bst', 737, 2, 737, 11)]), StyString('LITERAL', 'format.title', [('plain.bst', 738, 2, 738, 14)]), StyString('QUOTE', 'title', [('plain.bst', 738, 15, 738, 22)]), StyString('LITERAL', 'output.check', [('plain.bst', 738, 23, 738, 35)]), StyString('LITERAL', 'new.block', [('plain.bst', 739, 2, 739, 11)]), StyString('QUOTE', 'Master\'s thesis', [('plain.bst', 740, 2, 740, 19)]), StyString('LITERAL', 'format.thesis.type', [('plain.bst', 740, 20, 740, 38)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 740, 39, 740, 53)]), StyString('LITERAL', 'school', [('plain.bst', 741, 2, 741, 8)]), StyString('QUOTE', 'school', [('plain.bst', 741, 9, 741, 17)]), StyString('LITERAL', 'output.check', [('plain.bst', 741, 18, 741, 30)]), StyString('LITERAL', 'address', [('plain.bst', 742, 2, 742, 9)]), StyString('LITERAL', 'output', [('plain.bst', 742, 10, 742, 16)]), StyString('LITERAL', 'format.date', [('plain.bst', 743, 2, 743, 13)]), StyString('QUOTE', 'year', [('plain.bst', 743, 14, 743, 20)]), StyString('LITERAL', 'output.check', [('plain.bst', 743, 21, 743, 33)]), StyString('LITERAL', 'new.block', [('plain.bst', 744, 2, 744, 11)]), StyString('LITERAL', 'note', [('plain.bst', 745, 2, 745, 6)]), StyString('LITERAL', 'output', [('plain.bst', 745, 7, 745, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 746, 2, 746, 11)]))], [('plain.bst', 734, 25, 747, 2)]))], [('plain.bst', 733, 1, 747, 2)])); ; 
  my $bst__misc = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 750, 2, 750, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 751, 2, 751, 16)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 751, 17, 751, 23)])); 
    lookupEntryField($context, $config, 'title', StyString('LITERAL', 'title', [('plain.bst', 752, 2, 752, 7)])); 
    lookupEntryField($context, $config, 'howpublished', StyString('LITERAL', 'howpublished', [('plain.bst', 752, 8, 752, 20)])); 
    $bst__newZoblockZocheckb->($context, $config, StyString('LITERAL', 'new.block.checkb', [('plain.bst', 752, 21, 752, 37)])); 
    $bst__formatZotitle->($context, $config, StyString('LITERAL', 'format.title', [('plain.bst', 753, 2, 753, 14)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 753, 15, 753, 21)])); 
    lookupEntryField($context, $config, 'howpublished', StyString('LITERAL', 'howpublished', [('plain.bst', 754, 2, 754, 14)])); 
    $bst__newZoblockZochecka->($context, $config, StyString('LITERAL', 'new.block.checka', [('plain.bst', 754, 15, 754, 31)])); 
    lookupEntryField($context, $config, 'howpublished', StyString('LITERAL', 'howpublished', [('plain.bst', 755, 2, 755, 14)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 755, 15, 755, 21)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 756, 2, 756, 13)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 756, 14, 756, 20)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 757, 2, 757, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 758, 2, 758, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 758, 7, 758, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 759, 2, 759, 11)])); 
    $bst__emptyZomiscZocheck->($context, $config, StyString('LITERAL', 'empty.misc.check', [('plain.bst', 760, 2, 760, 18)])); 
  }; 
  registerFunctionDefinition($context, $config, 'misc', $bst__misc, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 748, 1, 749, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'misc', [('plain.bst', 749, 10, 749, 14)]))], [('plain.bst', 749, 9, 749, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 750, 2, 750, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 751, 2, 751, 16)]), StyString('LITERAL', 'output', [('plain.bst', 751, 17, 751, 23)]), StyString('LITERAL', 'title', [('plain.bst', 752, 2, 752, 7)]), StyString('LITERAL', 'howpublished', [('plain.bst', 752, 8, 752, 20)]), StyString('LITERAL', 'new.block.checkb', [('plain.bst', 752, 21, 752, 37)]), StyString('LITERAL', 'format.title', [('plain.bst', 753, 2, 753, 14)]), StyString('LITERAL', 'output', [('plain.bst', 753, 15, 753, 21)]), StyString('LITERAL', 'howpublished', [('plain.bst', 754, 2, 754, 14)]), StyString('LITERAL', 'new.block.checka', [('plain.bst', 754, 15, 754, 31)]), StyString('LITERAL', 'howpublished', [('plain.bst', 755, 2, 755, 14)]), StyString('LITERAL', 'output', [('plain.bst', 755, 15, 755, 21)]), StyString('LITERAL', 'format.date', [('plain.bst', 756, 2, 756, 13)]), StyString('LITERAL', 'output', [('plain.bst', 756, 14, 756, 20)]), StyString('LITERAL', 'new.block', [('plain.bst', 757, 2, 757, 11)]), StyString('LITERAL', 'note', [('plain.bst', 758, 2, 758, 6)]), StyString('LITERAL', 'output', [('plain.bst', 758, 7, 758, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 759, 2, 759, 11)]), StyString('LITERAL', 'empty.misc.check', [('plain.bst', 760, 2, 760, 18)]))], [('plain.bst', 749, 16, 761, 2)]))], [('plain.bst', 748, 1, 761, 2)])); ; 
  my $bst__phdthesis = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 764, 2, 764, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 765, 2, 765, 16)])); 
    pushString($context, $config, 'author', StyString('QUOTE', 'author', [('plain.bst', 765, 17, 765, 25)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 765, 26, 765, 38)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 766, 2, 766, 11)])); 
    $bst__formatZobtitle->($context, $config, StyString('LITERAL', 'format.btitle', [('plain.bst', 767, 2, 767, 15)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 767, 16, 767, 23)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 767, 24, 767, 36)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 768, 2, 768, 11)])); 
    pushString($context, $config, 'PhD thesis', StyString('QUOTE', 'PhD thesis', [('plain.bst', 769, 2, 769, 14)])); 
    $bst__formatZothesisZotype->($context, $config, StyString('LITERAL', 'format.thesis.type', [('plain.bst', 769, 15, 769, 33)])); 
    $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 769, 34, 769, 48)])); 
    lookupEntryField($context, $config, 'school', StyString('LITERAL', 'school', [('plain.bst', 770, 2, 770, 8)])); 
    pushString($context, $config, 'school', StyString('QUOTE', 'school', [('plain.bst', 770, 9, 770, 17)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 770, 18, 770, 30)])); 
    lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 771, 2, 771, 9)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 771, 10, 771, 16)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 772, 2, 772, 13)])); 
    pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 772, 14, 772, 20)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 772, 21, 772, 33)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 773, 2, 773, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 774, 2, 774, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 774, 7, 774, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 775, 2, 775, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'phdthesis', $bst__phdthesis, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 762, 1, 763, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'phdthesis', [('plain.bst', 763, 10, 763, 19)]))], [('plain.bst', 763, 9, 763, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 764, 2, 764, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 765, 2, 765, 16)]), StyString('QUOTE', 'author', [('plain.bst', 765, 17, 765, 25)]), StyString('LITERAL', 'output.check', [('plain.bst', 765, 26, 765, 38)]), StyString('LITERAL', 'new.block', [('plain.bst', 766, 2, 766, 11)]), StyString('LITERAL', 'format.btitle', [('plain.bst', 767, 2, 767, 15)]), StyString('QUOTE', 'title', [('plain.bst', 767, 16, 767, 23)]), StyString('LITERAL', 'output.check', [('plain.bst', 767, 24, 767, 36)]), StyString('LITERAL', 'new.block', [('plain.bst', 768, 2, 768, 11)]), StyString('QUOTE', 'PhD thesis', [('plain.bst', 769, 2, 769, 14)]), StyString('LITERAL', 'format.thesis.type', [('plain.bst', 769, 15, 769, 33)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 769, 34, 769, 48)]), StyString('LITERAL', 'school', [('plain.bst', 770, 2, 770, 8)]), StyString('QUOTE', 'school', [('plain.bst', 770, 9, 770, 17)]), StyString('LITERAL', 'output.check', [('plain.bst', 770, 18, 770, 30)]), StyString('LITERAL', 'address', [('plain.bst', 771, 2, 771, 9)]), StyString('LITERAL', 'output', [('plain.bst', 771, 10, 771, 16)]), StyString('LITERAL', 'format.date', [('plain.bst', 772, 2, 772, 13)]), StyString('QUOTE', 'year', [('plain.bst', 772, 14, 772, 20)]), StyString('LITERAL', 'output.check', [('plain.bst', 772, 21, 772, 33)]), StyString('LITERAL', 'new.block', [('plain.bst', 773, 2, 773, 11)]), StyString('LITERAL', 'note', [('plain.bst', 774, 2, 774, 6)]), StyString('LITERAL', 'output', [('plain.bst', 774, 7, 774, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 775, 2, 775, 11)]))], [('plain.bst', 763, 21, 776, 2)]))], [('plain.bst', 762, 1, 776, 2)])); ; 
  my $bst__proceedings = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 779, 2, 779, 16)])); 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 780, 2, 780, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 780, 9, 780, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 781, 6, 781, 18)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 781, 19, 781, 25)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 781, 6, 781, 18)]), StyString('LITERAL', 'output', [('plain.bst', 781, 19, 781, 25)]))], [('plain.bst', 781, 4, 781, 27)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      $bst__formatZoeditors->($context, $config, StyString('LITERAL', 'format.editors', [('plain.bst', 782, 6, 782, 20)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 782, 21, 782, 35)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [('plain.bst', 782, 6, 782, 20)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 782, 21, 782, 35)]))], [('plain.bst', 782, 4, 782, 37)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 783, 2, 783, 5)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 784, 2, 784, 11)])); 
    $bst__formatZobtitle->($context, $config, StyString('LITERAL', 'format.btitle', [('plain.bst', 785, 2, 785, 15)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 785, 16, 785, 23)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 785, 24, 785, 36)])); 
    $bst__formatZobvolume->($context, $config, StyString('LITERAL', 'format.bvolume', [('plain.bst', 786, 2, 786, 16)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 786, 17, 786, 23)])); 
    $bst__formatZonumberZoseries->($context, $config, StyString('LITERAL', 'format.number.series', [('plain.bst', 787, 2, 787, 22)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 787, 23, 787, 29)])); 
    lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 788, 2, 788, 9)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 788, 10, 788, 16)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 789, 6, 789, 12)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 789, 13, 789, 19)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 790, 10, 790, 19)])); 
        $bst__newZosentenceZochecka->($context, $config, StyString('LITERAL', 'new.sentence.checka', [('plain.bst', 790, 20, 790, 39)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'publisher', [('plain.bst', 790, 10, 790, 19)]), StyString('LITERAL', 'new.sentence.checka', [('plain.bst', 790, 20, 790, 39)]))], [('plain.bst', 790, 8, 790, 41)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 791, 10, 791, 22)])); 
        lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 791, 23, 791, 32)])); 
        $bst__newZosentenceZocheckb->($context, $config, StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 791, 33, 791, 52)])); 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 792, 10, 792, 22)])); 
        $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 792, 23, 792, 29)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 791, 10, 791, 22)]), StyString('LITERAL', 'publisher', [('plain.bst', 791, 23, 791, 32)]), StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 791, 33, 791, 52)]), StyString('LITERAL', 'organization', [('plain.bst', 792, 10, 792, 22)]), StyString('LITERAL', 'output', [('plain.bst', 792, 23, 792, 29)]))], [('plain.bst', 791, 8, 793, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 794, 6, 794, 9)])); 
      lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 795, 6, 795, 15)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 795, 16, 795, 22)])); 
      $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 796, 6, 796, 17)])); 
      pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 796, 18, 796, 24)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 796, 25, 796, 37)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 789, 6, 789, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 789, 13, 789, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'publisher', [('plain.bst', 790, 10, 790, 19)]), StyString('LITERAL', 'new.sentence.checka', [('plain.bst', 790, 20, 790, 39)]))], [('plain.bst', 790, 8, 790, 41)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 791, 10, 791, 22)]), StyString('LITERAL', 'publisher', [('plain.bst', 791, 23, 791, 32)]), StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 791, 33, 791, 52)]), StyString('LITERAL', 'organization', [('plain.bst', 792, 10, 792, 22)]), StyString('LITERAL', 'output', [('plain.bst', 792, 23, 792, 29)]))], [('plain.bst', 791, 8, 793, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 794, 6, 794, 9)]), StyString('LITERAL', 'publisher', [('plain.bst', 795, 6, 795, 15)]), StyString('LITERAL', 'output', [('plain.bst', 795, 16, 795, 22)]), StyString('LITERAL', 'format.date', [('plain.bst', 796, 6, 796, 17)]), StyString('QUOTE', 'year', [('plain.bst', 796, 18, 796, 24)]), StyString('LITERAL', 'output.check', [('plain.bst', 796, 25, 796, 37)]))], [('plain.bst', 789, 4, 797, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 798, 6, 798, 13)])); 
      $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 798, 14, 798, 28)])); 
      $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 799, 6, 799, 17)])); 
      pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 799, 18, 799, 24)])); 
      $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 799, 25, 799, 37)])); 
      $bst__newZosentence->($context, $config, StyString('LITERAL', 'new.sentence', [('plain.bst', 800, 6, 800, 18)])); 
      lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 801, 6, 801, 12)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 801, 13, 801, 19)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 802, 8, 802, 14)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 803, 10, 803, 22)])); 
        $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 803, 23, 803, 29)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 803, 10, 803, 22)]), StyString('LITERAL', 'output', [('plain.bst', 803, 23, 803, 29)]))], [('plain.bst', 803, 8, 803, 31)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 804, 6, 804, 9)])); 
      lookupEntryField($context, $config, 'publisher', StyString('LITERAL', 'publisher', [('plain.bst', 805, 6, 805, 15)])); 
      $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 805, 16, 805, 22)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'address', [('plain.bst', 798, 6, 798, 13)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 798, 14, 798, 28)]), StyString('LITERAL', 'format.date', [('plain.bst', 799, 6, 799, 17)]), StyString('QUOTE', 'year', [('plain.bst', 799, 18, 799, 24)]), StyString('LITERAL', 'output.check', [('plain.bst', 799, 25, 799, 37)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 800, 6, 800, 18)]), StyString('LITERAL', 'editor', [('plain.bst', 801, 6, 801, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 801, 13, 801, 19)]), StyString('REFERENCE', 'skip$', [('plain.bst', 802, 8, 802, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 803, 10, 803, 22)]), StyString('LITERAL', 'output', [('plain.bst', 803, 23, 803, 29)]))], [('plain.bst', 803, 8, 803, 31)]), StyString('LITERAL', 'if$', [('plain.bst', 804, 6, 804, 9)]), StyString('LITERAL', 'publisher', [('plain.bst', 805, 6, 805, 15)]), StyString('LITERAL', 'output', [('plain.bst', 805, 16, 805, 22)]))], [('plain.bst', 798, 4, 806, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 807, 2, 807, 5)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 808, 2, 808, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 809, 2, 809, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 809, 7, 809, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 810, 2, 810, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'proceedings', $bst__proceedings, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 777, 1, 778, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'proceedings', [('plain.bst', 778, 10, 778, 21)]))], [('plain.bst', 778, 9, 778, 22)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 779, 2, 779, 16)]), StyString('LITERAL', 'editor', [('plain.bst', 780, 2, 780, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 780, 9, 780, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 781, 6, 781, 18)]), StyString('LITERAL', 'output', [('plain.bst', 781, 19, 781, 25)]))], [('plain.bst', 781, 4, 781, 27)]), StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [('plain.bst', 782, 6, 782, 20)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 782, 21, 782, 35)]))], [('plain.bst', 782, 4, 782, 37)]), StyString('LITERAL', 'if$', [('plain.bst', 783, 2, 783, 5)]), StyString('LITERAL', 'new.block', [('plain.bst', 784, 2, 784, 11)]), StyString('LITERAL', 'format.btitle', [('plain.bst', 785, 2, 785, 15)]), StyString('QUOTE', 'title', [('plain.bst', 785, 16, 785, 23)]), StyString('LITERAL', 'output.check', [('plain.bst', 785, 24, 785, 36)]), StyString('LITERAL', 'format.bvolume', [('plain.bst', 786, 2, 786, 16)]), StyString('LITERAL', 'output', [('plain.bst', 786, 17, 786, 23)]), StyString('LITERAL', 'format.number.series', [('plain.bst', 787, 2, 787, 22)]), StyString('LITERAL', 'output', [('plain.bst', 787, 23, 787, 29)]), StyString('LITERAL', 'address', [('plain.bst', 788, 2, 788, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 788, 10, 788, 16)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 789, 6, 789, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 789, 13, 789, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'publisher', [('plain.bst', 790, 10, 790, 19)]), StyString('LITERAL', 'new.sentence.checka', [('plain.bst', 790, 20, 790, 39)]))], [('plain.bst', 790, 8, 790, 41)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 791, 10, 791, 22)]), StyString('LITERAL', 'publisher', [('plain.bst', 791, 23, 791, 32)]), StyString('LITERAL', 'new.sentence.checkb', [('plain.bst', 791, 33, 791, 52)]), StyString('LITERAL', 'organization', [('plain.bst', 792, 10, 792, 22)]), StyString('LITERAL', 'output', [('plain.bst', 792, 23, 792, 29)]))], [('plain.bst', 791, 8, 793, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 794, 6, 794, 9)]), StyString('LITERAL', 'publisher', [('plain.bst', 795, 6, 795, 15)]), StyString('LITERAL', 'output', [('plain.bst', 795, 16, 795, 22)]), StyString('LITERAL', 'format.date', [('plain.bst', 796, 6, 796, 17)]), StyString('QUOTE', 'year', [('plain.bst', 796, 18, 796, 24)]), StyString('LITERAL', 'output.check', [('plain.bst', 796, 25, 796, 37)]))], [('plain.bst', 789, 4, 797, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'address', [('plain.bst', 798, 6, 798, 13)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 798, 14, 798, 28)]), StyString('LITERAL', 'format.date', [('plain.bst', 799, 6, 799, 17)]), StyString('QUOTE', 'year', [('plain.bst', 799, 18, 799, 24)]), StyString('LITERAL', 'output.check', [('plain.bst', 799, 25, 799, 37)]), StyString('LITERAL', 'new.sentence', [('plain.bst', 800, 6, 800, 18)]), StyString('LITERAL', 'editor', [('plain.bst', 801, 6, 801, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 801, 13, 801, 19)]), StyString('REFERENCE', 'skip$', [('plain.bst', 802, 8, 802, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 803, 10, 803, 22)]), StyString('LITERAL', 'output', [('plain.bst', 803, 23, 803, 29)]))], [('plain.bst', 803, 8, 803, 31)]), StyString('LITERAL', 'if$', [('plain.bst', 804, 6, 804, 9)]), StyString('LITERAL', 'publisher', [('plain.bst', 805, 6, 805, 15)]), StyString('LITERAL', 'output', [('plain.bst', 805, 16, 805, 22)]))], [('plain.bst', 798, 4, 806, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 807, 2, 807, 5)]), StyString('LITERAL', 'new.block', [('plain.bst', 808, 2, 808, 11)]), StyString('LITERAL', 'note', [('plain.bst', 809, 2, 809, 6)]), StyString('LITERAL', 'output', [('plain.bst', 809, 7, 809, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 810, 2, 810, 11)]))], [('plain.bst', 778, 23, 811, 2)]))], [('plain.bst', 777, 1, 811, 2)])); ; 
  my $bst__techreport = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 814, 2, 814, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 815, 2, 815, 16)])); 
    pushString($context, $config, 'author', StyString('QUOTE', 'author', [('plain.bst', 815, 17, 815, 25)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 815, 26, 815, 38)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 816, 2, 816, 11)])); 
    $bst__formatZotitle->($context, $config, StyString('LITERAL', 'format.title', [('plain.bst', 817, 2, 817, 14)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 817, 15, 817, 22)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 817, 23, 817, 35)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 818, 2, 818, 11)])); 
    $bst__formatZotrZonumber->($context, $config, StyString('LITERAL', 'format.tr.number', [('plain.bst', 819, 2, 819, 18)])); 
    $bst__outputZononnull->($context, $config, StyString('LITERAL', 'output.nonnull', [('plain.bst', 819, 19, 819, 33)])); 
    lookupEntryField($context, $config, 'institution', StyString('LITERAL', 'institution', [('plain.bst', 820, 2, 820, 13)])); 
    pushString($context, $config, 'institution', StyString('QUOTE', 'institution', [('plain.bst', 820, 14, 820, 27)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 820, 28, 820, 40)])); 
    lookupEntryField($context, $config, 'address', StyString('LITERAL', 'address', [('plain.bst', 821, 2, 821, 9)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 821, 10, 821, 16)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 822, 2, 822, 13)])); 
    pushString($context, $config, 'year', StyString('QUOTE', 'year', [('plain.bst', 822, 14, 822, 20)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 822, 21, 822, 33)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 823, 2, 823, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 824, 2, 824, 6)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 824, 7, 824, 13)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 825, 2, 825, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'techreport', $bst__techreport, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 812, 1, 813, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'techreport', [('plain.bst', 813, 10, 813, 20)]))], [('plain.bst', 813, 9, 813, 21)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 814, 2, 814, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 815, 2, 815, 16)]), StyString('QUOTE', 'author', [('plain.bst', 815, 17, 815, 25)]), StyString('LITERAL', 'output.check', [('plain.bst', 815, 26, 815, 38)]), StyString('LITERAL', 'new.block', [('plain.bst', 816, 2, 816, 11)]), StyString('LITERAL', 'format.title', [('plain.bst', 817, 2, 817, 14)]), StyString('QUOTE', 'title', [('plain.bst', 817, 15, 817, 22)]), StyString('LITERAL', 'output.check', [('plain.bst', 817, 23, 817, 35)]), StyString('LITERAL', 'new.block', [('plain.bst', 818, 2, 818, 11)]), StyString('LITERAL', 'format.tr.number', [('plain.bst', 819, 2, 819, 18)]), StyString('LITERAL', 'output.nonnull', [('plain.bst', 819, 19, 819, 33)]), StyString('LITERAL', 'institution', [('plain.bst', 820, 2, 820, 13)]), StyString('QUOTE', 'institution', [('plain.bst', 820, 14, 820, 27)]), StyString('LITERAL', 'output.check', [('plain.bst', 820, 28, 820, 40)]), StyString('LITERAL', 'address', [('plain.bst', 821, 2, 821, 9)]), StyString('LITERAL', 'output', [('plain.bst', 821, 10, 821, 16)]), StyString('LITERAL', 'format.date', [('plain.bst', 822, 2, 822, 13)]), StyString('QUOTE', 'year', [('plain.bst', 822, 14, 822, 20)]), StyString('LITERAL', 'output.check', [('plain.bst', 822, 21, 822, 33)]), StyString('LITERAL', 'new.block', [('plain.bst', 823, 2, 823, 11)]), StyString('LITERAL', 'note', [('plain.bst', 824, 2, 824, 6)]), StyString('LITERAL', 'output', [('plain.bst', 824, 7, 824, 13)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 825, 2, 825, 11)]))], [('plain.bst', 813, 22, 826, 2)]))], [('plain.bst', 812, 1, 826, 2)])); ; 
  my $bst__unpublished = sub { 
    my ($context, $config) = @_; 
    $bst__outputZobibitem->($context, $config, StyString('LITERAL', 'output.bibitem', [('plain.bst', 829, 2, 829, 16)])); 
    $bst__formatZoauthors->($context, $config, StyString('LITERAL', 'format.authors', [('plain.bst', 830, 2, 830, 16)])); 
    pushString($context, $config, 'author', StyString('QUOTE', 'author', [('plain.bst', 830, 17, 830, 25)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 830, 26, 830, 38)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 831, 2, 831, 11)])); 
    $bst__formatZotitle->($context, $config, StyString('LITERAL', 'format.title', [('plain.bst', 832, 2, 832, 14)])); 
    pushString($context, $config, 'title', StyString('QUOTE', 'title', [('plain.bst', 832, 15, 832, 22)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 832, 23, 832, 35)])); 
    $bst__newZoblock->($context, $config, StyString('LITERAL', 'new.block', [('plain.bst', 833, 2, 833, 11)])); 
    lookupEntryField($context, $config, 'note', StyString('LITERAL', 'note', [('plain.bst', 834, 2, 834, 6)])); 
    pushString($context, $config, 'note', StyString('QUOTE', 'note', [('plain.bst', 834, 7, 834, 13)])); 
    $bst__outputZocheck->($context, $config, StyString('LITERAL', 'output.check', [('plain.bst', 834, 14, 834, 26)])); 
    $bst__formatZodate->($context, $config, StyString('LITERAL', 'format.date', [('plain.bst', 835, 2, 835, 13)])); 
    $bst__output->($context, $config, StyString('LITERAL', 'output', [('plain.bst', 835, 14, 835, 20)])); 
    $bst__finZoentry->($context, $config, StyString('LITERAL', 'fin.entry', [('plain.bst', 836, 2, 836, 11)])); 
  }; 
  registerFunctionDefinition($context, $config, 'unpublished', $bst__unpublished, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 827, 1, 828, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'unpublished', [('plain.bst', 828, 10, 828, 21)]))], [('plain.bst', 828, 9, 828, 22)]), StyString('BLOCK', [(StyString('LITERAL', 'output.bibitem', [('plain.bst', 829, 2, 829, 16)]), StyString('LITERAL', 'format.authors', [('plain.bst', 830, 2, 830, 16)]), StyString('QUOTE', 'author', [('plain.bst', 830, 17, 830, 25)]), StyString('LITERAL', 'output.check', [('plain.bst', 830, 26, 830, 38)]), StyString('LITERAL', 'new.block', [('plain.bst', 831, 2, 831, 11)]), StyString('LITERAL', 'format.title', [('plain.bst', 832, 2, 832, 14)]), StyString('QUOTE', 'title', [('plain.bst', 832, 15, 832, 22)]), StyString('LITERAL', 'output.check', [('plain.bst', 832, 23, 832, 35)]), StyString('LITERAL', 'new.block', [('plain.bst', 833, 2, 833, 11)]), StyString('LITERAL', 'note', [('plain.bst', 834, 2, 834, 6)]), StyString('QUOTE', 'note', [('plain.bst', 834, 7, 834, 13)]), StyString('LITERAL', 'output.check', [('plain.bst', 834, 14, 834, 26)]), StyString('LITERAL', 'format.date', [('plain.bst', 835, 2, 835, 13)]), StyString('LITERAL', 'output', [('plain.bst', 835, 14, 835, 20)]), StyString('LITERAL', 'fin.entry', [('plain.bst', 836, 2, 836, 11)]))], [('plain.bst', 828, 23, 837, 2)]))], [('plain.bst', 827, 1, 837, 2)])); ; 
  my $bst__defaultZotype = sub { 
    my ($context, $config) = @_; 
    $bst__misc->($context, $config, StyString('LITERAL', 'misc', [('plain.bst', 839, 26, 839, 30)])); 
  }; 
  registerFunctionDefinition($context, $config, 'default.type', $bst__defaultZotype, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 838, 1, 839, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'default.type', [('plain.bst', 839, 10, 839, 22)]))], [('plain.bst', 839, 9, 839, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'misc', [('plain.bst', 839, 26, 839, 30)]))], [('plain.bst', 839, 24, 839, 32)]))], [('plain.bst', 838, 1, 839, 32)])); ; 
  defineMacro($context, $config, 'jan', 'January', StyString('LITERAL', 'jan', [('plain.bst', 841, 7, 841, 10)]));   defineMacro($context, $config, 'feb', 'February', StyString('LITERAL', 'feb', [('plain.bst', 843, 7, 843, 10)]));   defineMacro($context, $config, 'mar', 'March', StyString('LITERAL', 'mar', [('plain.bst', 845, 7, 845, 10)]));   defineMacro($context, $config, 'apr', 'April', StyString('LITERAL', 'apr', [('plain.bst', 847, 7, 847, 10)]));   defineMacro($context, $config, 'may', 'May', StyString('LITERAL', 'may', [('plain.bst', 849, 7, 849, 10)]));   defineMacro($context, $config, 'jun', 'June', StyString('LITERAL', 'jun', [('plain.bst', 851, 7, 851, 10)]));   defineMacro($context, $config, 'jul', 'July', StyString('LITERAL', 'jul', [('plain.bst', 853, 7, 853, 10)]));   defineMacro($context, $config, 'aug', 'August', StyString('LITERAL', 'aug', [('plain.bst', 855, 7, 855, 10)]));   defineMacro($context, $config, 'sep', 'September', StyString('LITERAL', 'sep', [('plain.bst', 857, 7, 857, 10)]));   defineMacro($context, $config, 'oct', 'October', StyString('LITERAL', 'oct', [('plain.bst', 859, 7, 859, 10)]));   defineMacro($context, $config, 'nov', 'November', StyString('LITERAL', 'nov', [('plain.bst', 861, 7, 861, 10)]));   defineMacro($context, $config, 'dec', 'December', StyString('LITERAL', 'dec', [('plain.bst', 863, 7, 863, 10)]));   defineMacro($context, $config, 'acmcs', 'ACM Computing Surveys', StyString('LITERAL', 'acmcs', [('plain.bst', 865, 7, 865, 12)]));   defineMacro($context, $config, 'acta', 'Acta Informatica', StyString('LITERAL', 'acta', [('plain.bst', 867, 7, 867, 11)]));   defineMacro($context, $config, 'cacm', 'Communications of the ACM', StyString('LITERAL', 'cacm', [('plain.bst', 869, 7, 869, 11)]));   defineMacro($context, $config, 'ibmjrd', 'IBM Journal of Research and Development', StyString('LITERAL', 'ibmjrd', [('plain.bst', 871, 7, 871, 13)]));   defineMacro($context, $config, 'ibmsj', 'IBM Systems Journal', StyString('LITERAL', 'ibmsj', [('plain.bst', 873, 7, 873, 12)]));   defineMacro($context, $config, 'ieeese', 'IEEE Transactions on Software Engineering', StyString('LITERAL', 'ieeese', [('plain.bst', 875, 7, 875, 13)]));   defineMacro($context, $config, 'ieeetc', 'IEEE Transactions on Computers', StyString('LITERAL', 'ieeetc', [('plain.bst', 877, 7, 877, 13)]));   defineMacro($context, $config, 'ieeetcad', 'IEEE Transactions on Computer-Aided Design of Integrated Circuits', StyString('LITERAL', 'ieeetcad', [('plain.bst', 879, 7, 879, 15)]));   defineMacro($context, $config, 'ipl', 'Information Processing Letters', StyString('LITERAL', 'ipl', [('plain.bst', 882, 7, 882, 10)]));   defineMacro($context, $config, 'jacm', 'Journal of the ACM', StyString('LITERAL', 'jacm', [('plain.bst', 884, 7, 884, 11)]));   defineMacro($context, $config, 'jcss', 'Journal of Computer and System Sciences', StyString('LITERAL', 'jcss', [('plain.bst', 886, 7, 886, 11)]));   defineMacro($context, $config, 'scp', 'Science of Computer Programming', StyString('LITERAL', 'scp', [('plain.bst', 888, 7, 888, 10)]));   defineMacro($context, $config, 'sicomp', 'SIAM Journal on Computing', StyString('LITERAL', 'sicomp', [('plain.bst', 890, 7, 890, 13)]));   defineMacro($context, $config, 'tocs', 'ACM Transactions on Computer Systems', StyString('LITERAL', 'tocs', [('plain.bst', 892, 7, 892, 11)]));   defineMacro($context, $config, 'tods', 'ACM Transactions on Database Systems', StyString('LITERAL', 'tods', [('plain.bst', 894, 7, 894, 11)]));   defineMacro($context, $config, 'tog', 'ACM Transactions on Graphics', StyString('LITERAL', 'tog', [('plain.bst', 896, 7, 896, 10)]));   defineMacro($context, $config, 'toms', 'ACM Transactions on Mathematical Software', StyString('LITERAL', 'toms', [('plain.bst', 898, 7, 898, 11)]));   defineMacro($context, $config, 'toois', 'ACM Transactions on Office Information Systems', StyString('LITERAL', 'toois', [('plain.bst', 900, 7, 900, 12)]));   defineMacro($context, $config, 'toplas', 'ACM Transactions on Programming Languages and Systems', StyString('LITERAL', 'toplas', [('plain.bst', 902, 7, 902, 13)]));   defineMacro($context, $config, 'tcs', 'Theoretical Computer Science', StyString('LITERAL', 'tcs', [('plain.bst', 904, 7, 904, 10)]));   readEntries($context, $config, StyCommand(StyString('LITERAL', 'READ', [('plain.bst', 905, 1, 906, 4)]), [()], [('plain.bst', 905, 1, 906, 4)])); 
  my $bst__sortify = sub { 
    my ($context, $config) = @_; 
    builtinPurify($context, $config, StyString('LITERAL', 'purify$', [('plain.bst', 909, 2, 909, 9)])); 
    pushString($context, $config, 'l', StyString('QUOTE', 'l', [('plain.bst', 910, 2, 910, 5)])); 
    builtinChangeCase($context, $config, StyString('LITERAL', 'change.case$', [('plain.bst', 910, 6, 910, 18)])); 
  }; 
  registerFunctionDefinition($context, $config, 'sortify', $bst__sortify, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 907, 1, 908, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'sortify', [('plain.bst', 908, 10, 908, 17)]))], [('plain.bst', 908, 9, 908, 18)]), StyString('BLOCK', [(StyString('LITERAL', 'purify$', [('plain.bst', 909, 2, 909, 9)]), StyString('QUOTE', 'l', [('plain.bst', 910, 2, 910, 5)]), StyString('LITERAL', 'change.case$', [('plain.bst', 910, 6, 910, 18)]))], [('plain.bst', 908, 19, 911, 2)]))], [('plain.bst', 907, 1, 911, 2)])); ; 
  defineGlobalInteger($context, $config, 'len', StyString('LITERAL', 'len', [('plain.bst', 913, 11, 913, 14)])); 
  my $bst__chopZoword = sub { 
    my ($context, $config) = @_; 
    pushGlobalString($context, $config, 's', StyString('REFERENCE', 's', [('plain.bst', 916, 2, 916, 4)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 916, 5, 916, 7)])); 
    pushGlobalInteger($context, $config, 'len', StyString('REFERENCE', 'len', [('plain.bst', 917, 2, 917, 6)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 917, 7, 917, 9)])); 
    lookupGlobalString($context, $config, 's', StyString('LITERAL', 's', [('plain.bst', 918, 2, 918, 3)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 918, 4, 918, 6)])); 
    lookupGlobalInteger($context, $config, 'len', StyString('LITERAL', 'len', [('plain.bst', 918, 7, 918, 10)])); 
    builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 918, 11, 918, 21)])); 
    builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 918, 22, 918, 23)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalString($context, $config, 's', StyString('LITERAL', 's', [('plain.bst', 919, 6, 919, 7)])); 
      lookupGlobalInteger($context, $config, 'len', StyString('LITERAL', 'len', [('plain.bst', 919, 8, 919, 11)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 919, 12, 919, 14)])); 
      builtinZp($context, $config, StyString('LITERAL', '+', [('plain.bst', 919, 15, 919, 16)])); 
      lookupGlobalInteger($context, $config, 'global.max$', StyString('LITERAL', 'global.max$', [('plain.bst', 919, 17, 919, 28)])); 
      builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 919, 29, 919, 39)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 's', [('plain.bst', 919, 6, 919, 7)]), StyString('LITERAL', 'len', [('plain.bst', 919, 8, 919, 11)]), StyString('NUMBER', 1, [('plain.bst', 919, 12, 919, 14)]), StyString('LITERAL', '+', [('plain.bst', 919, 15, 919, 16)]), StyString('LITERAL', 'global.max$', [('plain.bst', 919, 17, 919, 28)]), StyString('LITERAL', 'substring$', [('plain.bst', 919, 29, 919, 39)]))], [('plain.bst', 919, 4, 919, 41)])); 
    pushGlobalString($context, $config, 's', StyString('REFERENCE', 's', [('plain.bst', 920, 4, 920, 6)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 921, 2, 921, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'chop.word', $bst__chopZoword, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 914, 1, 915, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'chop.word', [('plain.bst', 915, 10, 915, 19)]))], [('plain.bst', 915, 9, 915, 20)]), StyString('BLOCK', [(StyString('REFERENCE', 's', [('plain.bst', 916, 2, 916, 4)]), StyString('LITERAL', ':=', [('plain.bst', 916, 5, 916, 7)]), StyString('REFERENCE', 'len', [('plain.bst', 917, 2, 917, 6)]), StyString('LITERAL', ':=', [('plain.bst', 917, 7, 917, 9)]), StyString('LITERAL', 's', [('plain.bst', 918, 2, 918, 3)]), StyString('NUMBER', 1, [('plain.bst', 918, 4, 918, 6)]), StyString('LITERAL', 'len', [('plain.bst', 918, 7, 918, 10)]), StyString('LITERAL', 'substring$', [('plain.bst', 918, 11, 918, 21)]), StyString('LITERAL', '=', [('plain.bst', 918, 22, 918, 23)]), StyString('BLOCK', [(StyString('LITERAL', 's', [('plain.bst', 919, 6, 919, 7)]), StyString('LITERAL', 'len', [('plain.bst', 919, 8, 919, 11)]), StyString('NUMBER', 1, [('plain.bst', 919, 12, 919, 14)]), StyString('LITERAL', '+', [('plain.bst', 919, 15, 919, 16)]), StyString('LITERAL', 'global.max$', [('plain.bst', 919, 17, 919, 28)]), StyString('LITERAL', 'substring$', [('plain.bst', 919, 29, 919, 39)]))], [('plain.bst', 919, 4, 919, 41)]), StyString('REFERENCE', 's', [('plain.bst', 920, 4, 920, 6)]), StyString('LITERAL', 'if$', [('plain.bst', 921, 2, 921, 5)]))], [('plain.bst', 915, 21, 922, 2)]))], [('plain.bst', 914, 1, 922, 2)])); ; 
  my $bst__sortZoformatZonames = sub { 
    my ($context, $config) = @_; 
    pushGlobalString($context, $config, 's', StyString('REFERENCE', 's', [('plain.bst', 925, 2, 925, 4)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 925, 5, 925, 7)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 926, 2, 926, 4)])); 
    pushGlobalInteger($context, $config, 'nameptr', StyString('REFERENCE', 'nameptr', [('plain.bst', 926, 5, 926, 13)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 926, 14, 926, 16)])); 
    pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 927, 2, 927, 4)])); 
    lookupGlobalString($context, $config, 's', StyString('LITERAL', 's', [('plain.bst', 928, 2, 928, 3)])); 
    builtinNumNames($context, $config, StyString('LITERAL', 'num.names$', [('plain.bst', 928, 4, 928, 14)])); 
    pushGlobalInteger($context, $config, 'numnames', StyString('REFERENCE', 'numnames', [('plain.bst', 928, 15, 928, 24)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 928, 25, 928, 27)])); 
    lookupGlobalInteger($context, $config, 'numnames', StyString('LITERAL', 'numnames', [('plain.bst', 929, 2, 929, 10)])); 
    pushGlobalInteger($context, $config, 'namesleft', StyString('REFERENCE', 'namesleft', [('plain.bst', 929, 11, 929, 21)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 929, 22, 929, 24)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalInteger($context, $config, 'namesleft', StyString('LITERAL', 'namesleft', [('plain.bst', 930, 6, 930, 15)])); 
      pushInteger($context, $config, 0, StyString('NUMBER', 0, [('plain.bst', 930, 16, 930, 18)])); 
      builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 930, 19, 930, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [('plain.bst', 930, 6, 930, 15)]), StyString('NUMBER', 0, [('plain.bst', 930, 16, 930, 18)]), StyString('LITERAL', '>', [('plain.bst', 930, 19, 930, 20)]))], [('plain.bst', 930, 4, 930, 22)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupGlobalInteger($context, $config, 'nameptr', StyString('LITERAL', 'nameptr', [('plain.bst', 931, 6, 931, 13)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 931, 14, 931, 16)])); 
      builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 931, 17, 931, 18)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, '   ', StyString('QUOTE', '   ', [('plain.bst', 932, 10, 932, 15)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 932, 16, 932, 17)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', '   ', [('plain.bst', 932, 10, 932, 15)]), StyString('LITERAL', '*', [('plain.bst', 932, 16, 932, 17)]))], [('plain.bst', 932, 8, 932, 19)])); 
      pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 933, 8, 933, 14)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 934, 6, 934, 9)])); 
      lookupGlobalString($context, $config, 's', StyString('LITERAL', 's', [('plain.bst', 935, 6, 935, 7)])); 
      lookupGlobalInteger($context, $config, 'nameptr', StyString('LITERAL', 'nameptr', [('plain.bst', 935, 8, 935, 15)])); 
      pushString($context, $config, '{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}', StyString('QUOTE', '{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}', [('plain.bst', 935, 16, 935, 51)])); 
      builtinFormatName($context, $config, StyString('LITERAL', 'format.name$', [('plain.bst', 935, 52, 935, 64)])); 
      pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 935, 65, 935, 67)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 935, 68, 935, 70)])); 
      lookupGlobalInteger($context, $config, 'nameptr', StyString('LITERAL', 'nameptr', [('plain.bst', 936, 6, 936, 13)])); 
      lookupGlobalInteger($context, $config, 'numnames', StyString('LITERAL', 'numnames', [('plain.bst', 936, 14, 936, 22)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 936, 23, 936, 24)])); 
      lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 936, 25, 936, 26)])); 
      pushString($context, $config, 'others', StyString('QUOTE', 'others', [('plain.bst', 936, 27, 936, 35)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 936, 36, 936, 37)])); 
      $bst__and->($context, $config, StyString('LITERAL', 'and', [('plain.bst', 936, 38, 936, 41)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'et al', StyString('QUOTE', 'et al', [('plain.bst', 937, 10, 937, 17)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 937, 18, 937, 19)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'et al', [('plain.bst', 937, 10, 937, 17)]), StyString('LITERAL', '*', [('plain.bst', 937, 18, 937, 19)]))], [('plain.bst', 937, 8, 937, 21)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 938, 10, 938, 11)])); 
        $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 938, 12, 938, 19)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 938, 20, 938, 21)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 938, 10, 938, 11)]), StyString('LITERAL', 'sortify', [('plain.bst', 938, 12, 938, 19)]), StyString('LITERAL', '*', [('plain.bst', 938, 20, 938, 21)]))], [('plain.bst', 938, 8, 938, 23)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 939, 6, 939, 9)])); 
      lookupGlobalInteger($context, $config, 'nameptr', StyString('LITERAL', 'nameptr', [('plain.bst', 940, 6, 940, 13)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 940, 14, 940, 16)])); 
      builtinZp($context, $config, StyString('LITERAL', '+', [('plain.bst', 940, 17, 940, 18)])); 
      pushGlobalInteger($context, $config, 'nameptr', StyString('REFERENCE', 'nameptr', [('plain.bst', 940, 19, 940, 27)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 940, 28, 940, 30)])); 
      lookupGlobalInteger($context, $config, 'namesleft', StyString('LITERAL', 'namesleft', [('plain.bst', 941, 6, 941, 15)])); 
      pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 941, 16, 941, 18)])); 
      builtinZm($context, $config, StyString('LITERAL', '-', [('plain.bst', 941, 19, 941, 20)])); 
      pushGlobalInteger($context, $config, 'namesleft', StyString('REFERENCE', 'namesleft', [('plain.bst', 941, 21, 941, 31)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 941, 32, 941, 34)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'nameptr', [('plain.bst', 931, 6, 931, 13)]), StyString('NUMBER', 1, [('plain.bst', 931, 14, 931, 16)]), StyString('LITERAL', '>', [('plain.bst', 931, 17, 931, 18)]), StyString('BLOCK', [(StyString('QUOTE', '   ', [('plain.bst', 932, 10, 932, 15)]), StyString('LITERAL', '*', [('plain.bst', 932, 16, 932, 17)]))], [('plain.bst', 932, 8, 932, 19)]), StyString('REFERENCE', 'skip$', [('plain.bst', 933, 8, 933, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 934, 6, 934, 9)]), StyString('LITERAL', 's', [('plain.bst', 935, 6, 935, 7)]), StyString('LITERAL', 'nameptr', [('plain.bst', 935, 8, 935, 15)]), StyString('QUOTE', '{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}', [('plain.bst', 935, 16, 935, 51)]), StyString('LITERAL', 'format.name$', [('plain.bst', 935, 52, 935, 64)]), StyString('REFERENCE', 't', [('plain.bst', 935, 65, 935, 67)]), StyString('LITERAL', ':=', [('plain.bst', 935, 68, 935, 70)]), StyString('LITERAL', 'nameptr', [('plain.bst', 936, 6, 936, 13)]), StyString('LITERAL', 'numnames', [('plain.bst', 936, 14, 936, 22)]), StyString('LITERAL', '=', [('plain.bst', 936, 23, 936, 24)]), StyString('LITERAL', 't', [('plain.bst', 936, 25, 936, 26)]), StyString('QUOTE', 'others', [('plain.bst', 936, 27, 936, 35)]), StyString('LITERAL', '=', [('plain.bst', 936, 36, 936, 37)]), StyString('LITERAL', 'and', [('plain.bst', 936, 38, 936, 41)]), StyString('BLOCK', [(StyString('QUOTE', 'et al', [('plain.bst', 937, 10, 937, 17)]), StyString('LITERAL', '*', [('plain.bst', 937, 18, 937, 19)]))], [('plain.bst', 937, 8, 937, 21)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 938, 10, 938, 11)]), StyString('LITERAL', 'sortify', [('plain.bst', 938, 12, 938, 19)]), StyString('LITERAL', '*', [('plain.bst', 938, 20, 938, 21)]))], [('plain.bst', 938, 8, 938, 23)]), StyString('LITERAL', 'if$', [('plain.bst', 939, 6, 939, 9)]), StyString('LITERAL', 'nameptr', [('plain.bst', 940, 6, 940, 13)]), StyString('NUMBER', 1, [('plain.bst', 940, 14, 940, 16)]), StyString('LITERAL', '+', [('plain.bst', 940, 17, 940, 18)]), StyString('REFERENCE', 'nameptr', [('plain.bst', 940, 19, 940, 27)]), StyString('LITERAL', ':=', [('plain.bst', 940, 28, 940, 30)]), StyString('LITERAL', 'namesleft', [('plain.bst', 941, 6, 941, 15)]), StyString('NUMBER', 1, [('plain.bst', 941, 16, 941, 18)]), StyString('LITERAL', '-', [('plain.bst', 941, 19, 941, 20)]), StyString('REFERENCE', 'namesleft', [('plain.bst', 941, 21, 941, 31)]), StyString('LITERAL', ':=', [('plain.bst', 941, 32, 941, 34)]))], [('plain.bst', 931, 4, 942, 5)])); 
    builtinWhile($context, $config, StyString('LITERAL', 'while$', [('plain.bst', 943, 2, 943, 8)])); 
  }; 
  registerFunctionDefinition($context, $config, 'sort.format.names', $bst__sortZoformatZonames, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 923, 1, 924, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'sort.format.names', [('plain.bst', 924, 10, 924, 27)]))], [('plain.bst', 924, 9, 924, 28)]), StyString('BLOCK', [(StyString('REFERENCE', 's', [('plain.bst', 925, 2, 925, 4)]), StyString('LITERAL', ':=', [('plain.bst', 925, 5, 925, 7)]), StyString('NUMBER', 1, [('plain.bst', 926, 2, 926, 4)]), StyString('REFERENCE', 'nameptr', [('plain.bst', 926, 5, 926, 13)]), StyString('LITERAL', ':=', [('plain.bst', 926, 14, 926, 16)]), StyString('QUOTE', '', [('plain.bst', 927, 2, 927, 4)]), StyString('LITERAL', 's', [('plain.bst', 928, 2, 928, 3)]), StyString('LITERAL', 'num.names$', [('plain.bst', 928, 4, 928, 14)]), StyString('REFERENCE', 'numnames', [('plain.bst', 928, 15, 928, 24)]), StyString('LITERAL', ':=', [('plain.bst', 928, 25, 928, 27)]), StyString('LITERAL', 'numnames', [('plain.bst', 929, 2, 929, 10)]), StyString('REFERENCE', 'namesleft', [('plain.bst', 929, 11, 929, 21)]), StyString('LITERAL', ':=', [('plain.bst', 929, 22, 929, 24)]), StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [('plain.bst', 930, 6, 930, 15)]), StyString('NUMBER', 0, [('plain.bst', 930, 16, 930, 18)]), StyString('LITERAL', '>', [('plain.bst', 930, 19, 930, 20)]))], [('plain.bst', 930, 4, 930, 22)]), StyString('BLOCK', [(StyString('LITERAL', 'nameptr', [('plain.bst', 931, 6, 931, 13)]), StyString('NUMBER', 1, [('plain.bst', 931, 14, 931, 16)]), StyString('LITERAL', '>', [('plain.bst', 931, 17, 931, 18)]), StyString('BLOCK', [(StyString('QUOTE', '   ', [('plain.bst', 932, 10, 932, 15)]), StyString('LITERAL', '*', [('plain.bst', 932, 16, 932, 17)]))], [('plain.bst', 932, 8, 932, 19)]), StyString('REFERENCE', 'skip$', [('plain.bst', 933, 8, 933, 14)]), StyString('LITERAL', 'if$', [('plain.bst', 934, 6, 934, 9)]), StyString('LITERAL', 's', [('plain.bst', 935, 6, 935, 7)]), StyString('LITERAL', 'nameptr', [('plain.bst', 935, 8, 935, 15)]), StyString('QUOTE', '{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}', [('plain.bst', 935, 16, 935, 51)]), StyString('LITERAL', 'format.name$', [('plain.bst', 935, 52, 935, 64)]), StyString('REFERENCE', 't', [('plain.bst', 935, 65, 935, 67)]), StyString('LITERAL', ':=', [('plain.bst', 935, 68, 935, 70)]), StyString('LITERAL', 'nameptr', [('plain.bst', 936, 6, 936, 13)]), StyString('LITERAL', 'numnames', [('plain.bst', 936, 14, 936, 22)]), StyString('LITERAL', '=', [('plain.bst', 936, 23, 936, 24)]), StyString('LITERAL', 't', [('plain.bst', 936, 25, 936, 26)]), StyString('QUOTE', 'others', [('plain.bst', 936, 27, 936, 35)]), StyString('LITERAL', '=', [('plain.bst', 936, 36, 936, 37)]), StyString('LITERAL', 'and', [('plain.bst', 936, 38, 936, 41)]), StyString('BLOCK', [(StyString('QUOTE', 'et al', [('plain.bst', 937, 10, 937, 17)]), StyString('LITERAL', '*', [('plain.bst', 937, 18, 937, 19)]))], [('plain.bst', 937, 8, 937, 21)]), StyString('BLOCK', [(StyString('LITERAL', 't', [('plain.bst', 938, 10, 938, 11)]), StyString('LITERAL', 'sortify', [('plain.bst', 938, 12, 938, 19)]), StyString('LITERAL', '*', [('plain.bst', 938, 20, 938, 21)]))], [('plain.bst', 938, 8, 938, 23)]), StyString('LITERAL', 'if$', [('plain.bst', 939, 6, 939, 9)]), StyString('LITERAL', 'nameptr', [('plain.bst', 940, 6, 940, 13)]), StyString('NUMBER', 1, [('plain.bst', 940, 14, 940, 16)]), StyString('LITERAL', '+', [('plain.bst', 940, 17, 940, 18)]), StyString('REFERENCE', 'nameptr', [('plain.bst', 940, 19, 940, 27)]), StyString('LITERAL', ':=', [('plain.bst', 940, 28, 940, 30)]), StyString('LITERAL', 'namesleft', [('plain.bst', 941, 6, 941, 15)]), StyString('NUMBER', 1, [('plain.bst', 941, 16, 941, 18)]), StyString('LITERAL', '-', [('plain.bst', 941, 19, 941, 20)]), StyString('REFERENCE', 'namesleft', [('plain.bst', 941, 21, 941, 31)]), StyString('LITERAL', ':=', [('plain.bst', 941, 32, 941, 34)]))], [('plain.bst', 931, 4, 942, 5)]), StyString('LITERAL', 'while$', [('plain.bst', 943, 2, 943, 8)]))], [('plain.bst', 924, 29, 944, 2)]))], [('plain.bst', 923, 1, 944, 2)])); ; 
  my $bst__sortZoformatZotitle = sub { 
    my ($context, $config) = @_; 
    pushGlobalString($context, $config, 't', StyString('REFERENCE', 't', [('plain.bst', 947, 2, 947, 4)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 947, 5, 947, 7)])); 
    pushString($context, $config, 'A ', StyString('QUOTE', 'A ', [('plain.bst', 948, 2, 948, 6)])); 
    pushInteger($context, $config, 2, StyString('NUMBER', 2, [('plain.bst', 948, 7, 948, 9)])); 
    pushString($context, $config, 'An ', StyString('QUOTE', 'An ', [('plain.bst', 949, 4, 949, 9)])); 
    pushInteger($context, $config, 3, StyString('NUMBER', 3, [('plain.bst', 949, 10, 949, 12)])); 
    pushString($context, $config, 'The ', StyString('QUOTE', 'The ', [('plain.bst', 950, 6, 950, 12)])); 
    pushInteger($context, $config, 4, StyString('NUMBER', 4, [('plain.bst', 950, 13, 950, 15)])); 
    lookupGlobalString($context, $config, 't', StyString('LITERAL', 't', [('plain.bst', 950, 16, 950, 17)])); 
    $bst__chopZoword->($context, $config, StyString('LITERAL', 'chop.word', [('plain.bst', 950, 18, 950, 27)])); 
    $bst__chopZoword->($context, $config, StyString('LITERAL', 'chop.word', [('plain.bst', 951, 4, 951, 13)])); 
    $bst__chopZoword->($context, $config, StyString('LITERAL', 'chop.word', [('plain.bst', 952, 2, 952, 11)])); 
    $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 953, 2, 953, 9)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 954, 2, 954, 4)])); 
    lookupGlobalInteger($context, $config, 'global.max$', StyString('LITERAL', 'global.max$', [('plain.bst', 954, 5, 954, 16)])); 
    builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 954, 17, 954, 27)])); 
  }; 
  registerFunctionDefinition($context, $config, 'sort.format.title', $bst__sortZoformatZotitle, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 945, 1, 946, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'sort.format.title', [('plain.bst', 946, 10, 946, 27)]))], [('plain.bst', 946, 9, 946, 28)]), StyString('BLOCK', [(StyString('REFERENCE', 't', [('plain.bst', 947, 2, 947, 4)]), StyString('LITERAL', ':=', [('plain.bst', 947, 5, 947, 7)]), StyString('QUOTE', 'A ', [('plain.bst', 948, 2, 948, 6)]), StyString('NUMBER', 2, [('plain.bst', 948, 7, 948, 9)]), StyString('QUOTE', 'An ', [('plain.bst', 949, 4, 949, 9)]), StyString('NUMBER', 3, [('plain.bst', 949, 10, 949, 12)]), StyString('QUOTE', 'The ', [('plain.bst', 950, 6, 950, 12)]), StyString('NUMBER', 4, [('plain.bst', 950, 13, 950, 15)]), StyString('LITERAL', 't', [('plain.bst', 950, 16, 950, 17)]), StyString('LITERAL', 'chop.word', [('plain.bst', 950, 18, 950, 27)]), StyString('LITERAL', 'chop.word', [('plain.bst', 951, 4, 951, 13)]), StyString('LITERAL', 'chop.word', [('plain.bst', 952, 2, 952, 11)]), StyString('LITERAL', 'sortify', [('plain.bst', 953, 2, 953, 9)]), StyString('NUMBER', 1, [('plain.bst', 954, 2, 954, 4)]), StyString('LITERAL', 'global.max$', [('plain.bst', 954, 5, 954, 16)]), StyString('LITERAL', 'substring$', [('plain.bst', 954, 17, 954, 27)]))], [('plain.bst', 946, 29, 955, 2)]))], [('plain.bst', 945, 1, 955, 2)])); ; 
  my $bst__authorZosort = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 958, 2, 958, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 958, 9, 958, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 959, 6, 959, 9)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 959, 10, 959, 16)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'to sort, need author or key in ', StyString('QUOTE', 'to sort, need author or key in ', [('plain.bst', 960, 10, 960, 43)])); 
        builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 960, 44, 960, 49)])); 
        builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 960, 50, 960, 51)])); 
        builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 960, 52, 960, 60)])); 
        pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 961, 10, 961, 12)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author or key in ', [('plain.bst', 960, 10, 960, 43)]), StyString('LITERAL', 'cite$', [('plain.bst', 960, 44, 960, 49)]), StyString('LITERAL', '*', [('plain.bst', 960, 50, 960, 51)]), StyString('LITERAL', 'warning$', [('plain.bst', 960, 52, 960, 60)]), StyString('QUOTE', '', [('plain.bst', 961, 10, 961, 12)]))], [('plain.bst', 960, 8, 962, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 963, 10, 963, 13)])); 
        $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 963, 14, 963, 21)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 963, 10, 963, 13)]), StyString('LITERAL', 'sortify', [('plain.bst', 963, 14, 963, 21)]))], [('plain.bst', 963, 8, 963, 23)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 964, 6, 964, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 959, 6, 959, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 959, 10, 959, 16)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author or key in ', [('plain.bst', 960, 10, 960, 43)]), StyString('LITERAL', 'cite$', [('plain.bst', 960, 44, 960, 49)]), StyString('LITERAL', '*', [('plain.bst', 960, 50, 960, 51)]), StyString('LITERAL', 'warning$', [('plain.bst', 960, 52, 960, 60)]), StyString('QUOTE', '', [('plain.bst', 961, 10, 961, 12)]))], [('plain.bst', 960, 8, 962, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 963, 10, 963, 13)]), StyString('LITERAL', 'sortify', [('plain.bst', 963, 14, 963, 21)]))], [('plain.bst', 963, 8, 963, 23)]), StyString('LITERAL', 'if$', [('plain.bst', 964, 6, 964, 9)]))], [('plain.bst', 959, 4, 965, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 966, 6, 966, 12)])); 
      $bst__sortZoformatZonames->($context, $config, StyString('LITERAL', 'sort.format.names', [('plain.bst', 966, 13, 966, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 966, 6, 966, 12)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 966, 13, 966, 30)]))], [('plain.bst', 966, 4, 966, 32)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 967, 2, 967, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'author.sort', $bst__authorZosort, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 956, 1, 957, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'author.sort', [('plain.bst', 957, 10, 957, 21)]))], [('plain.bst', 957, 9, 957, 22)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 958, 2, 958, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 958, 9, 958, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 959, 6, 959, 9)]), StyString('LITERAL', 'empty$', [('plain.bst', 959, 10, 959, 16)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author or key in ', [('plain.bst', 960, 10, 960, 43)]), StyString('LITERAL', 'cite$', [('plain.bst', 960, 44, 960, 49)]), StyString('LITERAL', '*', [('plain.bst', 960, 50, 960, 51)]), StyString('LITERAL', 'warning$', [('plain.bst', 960, 52, 960, 60)]), StyString('QUOTE', '', [('plain.bst', 961, 10, 961, 12)]))], [('plain.bst', 960, 8, 962, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 963, 10, 963, 13)]), StyString('LITERAL', 'sortify', [('plain.bst', 963, 14, 963, 21)]))], [('plain.bst', 963, 8, 963, 23)]), StyString('LITERAL', 'if$', [('plain.bst', 964, 6, 964, 9)]))], [('plain.bst', 959, 4, 965, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 966, 6, 966, 12)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 966, 13, 966, 30)]))], [('plain.bst', 966, 4, 966, 32)]), StyString('LITERAL', 'if$', [('plain.bst', 967, 2, 967, 5)]))], [('plain.bst', 957, 23, 968, 2)]))], [('plain.bst', 956, 1, 968, 2)])); ; 
  my $bst__authorZoeditorZosort = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 971, 2, 971, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 971, 9, 971, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 972, 6, 972, 12)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 972, 13, 972, 19)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 973, 10, 973, 13)])); 
        builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 973, 14, 973, 20)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'to sort, need author, editor, or key in ', StyString('QUOTE', 'to sort, need author, editor, or key in ', [('plain.bst', 974, 14, 974, 56)])); 
          builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 974, 57, 974, 62)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 974, 63, 974, 64)])); 
          builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 974, 65, 974, 73)])); 
          pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 975, 14, 975, 16)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, editor, or key in ', [('plain.bst', 974, 14, 974, 56)]), StyString('LITERAL', 'cite$', [('plain.bst', 974, 57, 974, 62)]), StyString('LITERAL', '*', [('plain.bst', 974, 63, 974, 64)]), StyString('LITERAL', 'warning$', [('plain.bst', 974, 65, 974, 73)]), StyString('QUOTE', '', [('plain.bst', 975, 14, 975, 16)]))], [('plain.bst', 974, 12, 976, 13)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 977, 14, 977, 17)])); 
          $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 977, 18, 977, 25)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 977, 14, 977, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 977, 18, 977, 25)]))], [('plain.bst', 977, 12, 977, 27)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 978, 10, 978, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 973, 10, 973, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 973, 14, 973, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, editor, or key in ', [('plain.bst', 974, 14, 974, 56)]), StyString('LITERAL', 'cite$', [('plain.bst', 974, 57, 974, 62)]), StyString('LITERAL', '*', [('plain.bst', 974, 63, 974, 64)]), StyString('LITERAL', 'warning$', [('plain.bst', 974, 65, 974, 73)]), StyString('QUOTE', '', [('plain.bst', 975, 14, 975, 16)]))], [('plain.bst', 974, 12, 976, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 977, 14, 977, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 977, 18, 977, 25)]))], [('plain.bst', 977, 12, 977, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 978, 10, 978, 13)]))], [('plain.bst', 973, 8, 979, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 980, 10, 980, 16)])); 
        $bst__sortZoformatZonames->($context, $config, StyString('LITERAL', 'sort.format.names', [('plain.bst', 980, 17, 980, 34)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 980, 10, 980, 16)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 980, 17, 980, 34)]))], [('plain.bst', 980, 8, 980, 36)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 981, 6, 981, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 972, 6, 972, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 972, 13, 972, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 973, 10, 973, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 973, 14, 973, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, editor, or key in ', [('plain.bst', 974, 14, 974, 56)]), StyString('LITERAL', 'cite$', [('plain.bst', 974, 57, 974, 62)]), StyString('LITERAL', '*', [('plain.bst', 974, 63, 974, 64)]), StyString('LITERAL', 'warning$', [('plain.bst', 974, 65, 974, 73)]), StyString('QUOTE', '', [('plain.bst', 975, 14, 975, 16)]))], [('plain.bst', 974, 12, 976, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 977, 14, 977, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 977, 18, 977, 25)]))], [('plain.bst', 977, 12, 977, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 978, 10, 978, 13)]))], [('plain.bst', 973, 8, 979, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 980, 10, 980, 16)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 980, 17, 980, 34)]))], [('plain.bst', 980, 8, 980, 36)]), StyString('LITERAL', 'if$', [('plain.bst', 981, 6, 981, 9)]))], [('plain.bst', 972, 4, 982, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 983, 6, 983, 12)])); 
      $bst__sortZoformatZonames->($context, $config, StyString('LITERAL', 'sort.format.names', [('plain.bst', 983, 13, 983, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 983, 6, 983, 12)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 983, 13, 983, 30)]))], [('plain.bst', 983, 4, 983, 32)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 984, 2, 984, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'author.editor.sort', $bst__authorZoeditorZosort, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 969, 1, 970, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'author.editor.sort', [('plain.bst', 970, 10, 970, 28)]))], [('plain.bst', 970, 9, 970, 29)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 971, 2, 971, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 971, 9, 971, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 972, 6, 972, 12)]), StyString('LITERAL', 'empty$', [('plain.bst', 972, 13, 972, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 973, 10, 973, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 973, 14, 973, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, editor, or key in ', [('plain.bst', 974, 14, 974, 56)]), StyString('LITERAL', 'cite$', [('plain.bst', 974, 57, 974, 62)]), StyString('LITERAL', '*', [('plain.bst', 974, 63, 974, 64)]), StyString('LITERAL', 'warning$', [('plain.bst', 974, 65, 974, 73)]), StyString('QUOTE', '', [('plain.bst', 975, 14, 975, 16)]))], [('plain.bst', 974, 12, 976, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 977, 14, 977, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 977, 18, 977, 25)]))], [('plain.bst', 977, 12, 977, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 978, 10, 978, 13)]))], [('plain.bst', 973, 8, 979, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 980, 10, 980, 16)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 980, 17, 980, 34)]))], [('plain.bst', 980, 8, 980, 36)]), StyString('LITERAL', 'if$', [('plain.bst', 981, 6, 981, 9)]))], [('plain.bst', 972, 4, 982, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 983, 6, 983, 12)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 983, 13, 983, 30)]))], [('plain.bst', 983, 4, 983, 32)]), StyString('LITERAL', 'if$', [('plain.bst', 984, 2, 984, 5)]))], [('plain.bst', 970, 30, 985, 2)]))], [('plain.bst', 969, 1, 985, 2)])); ; 
  my $bst__authorZoorganizzationZosort = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 988, 2, 988, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 988, 9, 988, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 989, 6, 989, 18)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 989, 19, 989, 25)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 990, 10, 990, 13)])); 
        builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 990, 14, 990, 20)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'to sort, need author, organization, or key in ', StyString('QUOTE', 'to sort, need author, organization, or key in ', [('plain.bst', 991, 14, 991, 62)])); 
          builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 991, 63, 991, 68)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 991, 69, 991, 70)])); 
          builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 991, 71, 991, 79)])); 
          pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 992, 14, 992, 16)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, organization, or key in ', [('plain.bst', 991, 14, 991, 62)]), StyString('LITERAL', 'cite$', [('plain.bst', 991, 63, 991, 68)]), StyString('LITERAL', '*', [('plain.bst', 991, 69, 991, 70)]), StyString('LITERAL', 'warning$', [('plain.bst', 991, 71, 991, 79)]), StyString('QUOTE', '', [('plain.bst', 992, 14, 992, 16)]))], [('plain.bst', 991, 12, 993, 13)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 994, 14, 994, 17)])); 
          $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 994, 18, 994, 25)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 994, 14, 994, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 994, 18, 994, 25)]))], [('plain.bst', 994, 12, 994, 27)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 995, 10, 995, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 990, 10, 990, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 990, 14, 990, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, organization, or key in ', [('plain.bst', 991, 14, 991, 62)]), StyString('LITERAL', 'cite$', [('plain.bst', 991, 63, 991, 68)]), StyString('LITERAL', '*', [('plain.bst', 991, 69, 991, 70)]), StyString('LITERAL', 'warning$', [('plain.bst', 991, 71, 991, 79)]), StyString('QUOTE', '', [('plain.bst', 992, 14, 992, 16)]))], [('plain.bst', 991, 12, 993, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 994, 14, 994, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 994, 18, 994, 25)]))], [('plain.bst', 994, 12, 994, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 995, 10, 995, 13)]))], [('plain.bst', 990, 8, 996, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'The ', StyString('QUOTE', 'The ', [('plain.bst', 997, 10, 997, 16)])); 
        pushInteger($context, $config, 4, StyString('NUMBER', 4, [('plain.bst', 997, 17, 997, 19)])); 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 997, 20, 997, 32)])); 
        $bst__chopZoword->($context, $config, StyString('LITERAL', 'chop.word', [('plain.bst', 997, 33, 997, 42)])); 
        $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 997, 43, 997, 50)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'The ', [('plain.bst', 997, 10, 997, 16)]), StyString('NUMBER', 4, [('plain.bst', 997, 17, 997, 19)]), StyString('LITERAL', 'organization', [('plain.bst', 997, 20, 997, 32)]), StyString('LITERAL', 'chop.word', [('plain.bst', 997, 33, 997, 42)]), StyString('LITERAL', 'sortify', [('plain.bst', 997, 43, 997, 50)]))], [('plain.bst', 997, 8, 997, 52)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 998, 6, 998, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 989, 6, 989, 18)]), StyString('LITERAL', 'empty$', [('plain.bst', 989, 19, 989, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 990, 10, 990, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 990, 14, 990, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, organization, or key in ', [('plain.bst', 991, 14, 991, 62)]), StyString('LITERAL', 'cite$', [('plain.bst', 991, 63, 991, 68)]), StyString('LITERAL', '*', [('plain.bst', 991, 69, 991, 70)]), StyString('LITERAL', 'warning$', [('plain.bst', 991, 71, 991, 79)]), StyString('QUOTE', '', [('plain.bst', 992, 14, 992, 16)]))], [('plain.bst', 991, 12, 993, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 994, 14, 994, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 994, 18, 994, 25)]))], [('plain.bst', 994, 12, 994, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 995, 10, 995, 13)]))], [('plain.bst', 990, 8, 996, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'The ', [('plain.bst', 997, 10, 997, 16)]), StyString('NUMBER', 4, [('plain.bst', 997, 17, 997, 19)]), StyString('LITERAL', 'organization', [('plain.bst', 997, 20, 997, 32)]), StyString('LITERAL', 'chop.word', [('plain.bst', 997, 33, 997, 42)]), StyString('LITERAL', 'sortify', [('plain.bst', 997, 43, 997, 50)]))], [('plain.bst', 997, 8, 997, 52)]), StyString('LITERAL', 'if$', [('plain.bst', 998, 6, 998, 9)]))], [('plain.bst', 989, 4, 999, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'author', StyString('LITERAL', 'author', [('plain.bst', 1000, 6, 1000, 12)])); 
      $bst__sortZoformatZonames->($context, $config, StyString('LITERAL', 'sort.format.names', [('plain.bst', 1000, 13, 1000, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 1000, 6, 1000, 12)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 1000, 13, 1000, 30)]))], [('plain.bst', 1000, 4, 1000, 32)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1001, 2, 1001, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'author.organization.sort', $bst__authorZoorganizzationZosort, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 986, 1, 987, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'author.organization.sort', [('plain.bst', 987, 10, 987, 34)]))], [('plain.bst', 987, 9, 987, 35)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 988, 2, 988, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 988, 9, 988, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 989, 6, 989, 18)]), StyString('LITERAL', 'empty$', [('plain.bst', 989, 19, 989, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 990, 10, 990, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 990, 14, 990, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, organization, or key in ', [('plain.bst', 991, 14, 991, 62)]), StyString('LITERAL', 'cite$', [('plain.bst', 991, 63, 991, 68)]), StyString('LITERAL', '*', [('plain.bst', 991, 69, 991, 70)]), StyString('LITERAL', 'warning$', [('plain.bst', 991, 71, 991, 79)]), StyString('QUOTE', '', [('plain.bst', 992, 14, 992, 16)]))], [('plain.bst', 991, 12, 993, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 994, 14, 994, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 994, 18, 994, 25)]))], [('plain.bst', 994, 12, 994, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 995, 10, 995, 13)]))], [('plain.bst', 990, 8, 996, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'The ', [('plain.bst', 997, 10, 997, 16)]), StyString('NUMBER', 4, [('plain.bst', 997, 17, 997, 19)]), StyString('LITERAL', 'organization', [('plain.bst', 997, 20, 997, 32)]), StyString('LITERAL', 'chop.word', [('plain.bst', 997, 33, 997, 42)]), StyString('LITERAL', 'sortify', [('plain.bst', 997, 43, 997, 50)]))], [('plain.bst', 997, 8, 997, 52)]), StyString('LITERAL', 'if$', [('plain.bst', 998, 6, 998, 9)]))], [('plain.bst', 989, 4, 999, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'author', [('plain.bst', 1000, 6, 1000, 12)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 1000, 13, 1000, 30)]))], [('plain.bst', 1000, 4, 1000, 32)]), StyString('LITERAL', 'if$', [('plain.bst', 1001, 2, 1001, 5)]))], [('plain.bst', 987, 36, 1002, 2)]))], [('plain.bst', 986, 1, 1002, 2)])); ; 
  my $bst__editorZoorganizzationZosort = sub { 
    my ($context, $config) = @_; 
    lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 1005, 2, 1005, 8)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 1005, 9, 1005, 15)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 1006, 6, 1006, 18)])); 
      builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 1006, 19, 1006, 25)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 1007, 10, 1007, 13)])); 
        builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 1007, 14, 1007, 20)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          pushString($context, $config, 'to sort, need editor, organization, or key in ', StyString('QUOTE', 'to sort, need editor, organization, or key in ', [('plain.bst', 1008, 14, 1008, 62)])); 
          builtinCite($context, $config, StyString('LITERAL', 'cite$', [('plain.bst', 1008, 63, 1008, 68)])); 
          builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 1008, 69, 1008, 70)])); 
          builtinWarning($context, $config, StyString('LITERAL', 'warning$', [('plain.bst', 1008, 71, 1008, 79)])); 
          pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 1009, 14, 1009, 16)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'to sort, need editor, organization, or key in ', [('plain.bst', 1008, 14, 1008, 62)]), StyString('LITERAL', 'cite$', [('plain.bst', 1008, 63, 1008, 68)]), StyString('LITERAL', '*', [('plain.bst', 1008, 69, 1008, 70)]), StyString('LITERAL', 'warning$', [('plain.bst', 1008, 71, 1008, 79)]), StyString('QUOTE', '', [('plain.bst', 1009, 14, 1009, 16)]))], [('plain.bst', 1008, 12, 1010, 13)])); 
        pushFunction($context, $config, sub { 
          my ($context, $config) = @_; 
          lookupEntryField($context, $config, 'key', StyString('LITERAL', 'key', [('plain.bst', 1011, 14, 1011, 17)])); 
          $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 1011, 18, 1011, 25)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 1011, 14, 1011, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 1011, 18, 1011, 25)]))], [('plain.bst', 1011, 12, 1011, 27)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1012, 10, 1012, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 1007, 10, 1007, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 1007, 14, 1007, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need editor, organization, or key in ', [('plain.bst', 1008, 14, 1008, 62)]), StyString('LITERAL', 'cite$', [('plain.bst', 1008, 63, 1008, 68)]), StyString('LITERAL', '*', [('plain.bst', 1008, 69, 1008, 70)]), StyString('LITERAL', 'warning$', [('plain.bst', 1008, 71, 1008, 79)]), StyString('QUOTE', '', [('plain.bst', 1009, 14, 1009, 16)]))], [('plain.bst', 1008, 12, 1010, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 1011, 14, 1011, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 1011, 18, 1011, 25)]))], [('plain.bst', 1011, 12, 1011, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 1012, 10, 1012, 13)]))], [('plain.bst', 1007, 8, 1013, 9)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        pushString($context, $config, 'The ', StyString('QUOTE', 'The ', [('plain.bst', 1014, 10, 1014, 16)])); 
        pushInteger($context, $config, 4, StyString('NUMBER', 4, [('plain.bst', 1014, 17, 1014, 19)])); 
        lookupEntryField($context, $config, 'organization', StyString('LITERAL', 'organization', [('plain.bst', 1014, 20, 1014, 32)])); 
        $bst__chopZoword->($context, $config, StyString('LITERAL', 'chop.word', [('plain.bst', 1014, 33, 1014, 42)])); 
        $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 1014, 43, 1014, 50)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'The ', [('plain.bst', 1014, 10, 1014, 16)]), StyString('NUMBER', 4, [('plain.bst', 1014, 17, 1014, 19)]), StyString('LITERAL', 'organization', [('plain.bst', 1014, 20, 1014, 32)]), StyString('LITERAL', 'chop.word', [('plain.bst', 1014, 33, 1014, 42)]), StyString('LITERAL', 'sortify', [('plain.bst', 1014, 43, 1014, 50)]))], [('plain.bst', 1014, 8, 1014, 52)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1015, 6, 1015, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 1006, 6, 1006, 18)]), StyString('LITERAL', 'empty$', [('plain.bst', 1006, 19, 1006, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 1007, 10, 1007, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 1007, 14, 1007, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need editor, organization, or key in ', [('plain.bst', 1008, 14, 1008, 62)]), StyString('LITERAL', 'cite$', [('plain.bst', 1008, 63, 1008, 68)]), StyString('LITERAL', '*', [('plain.bst', 1008, 69, 1008, 70)]), StyString('LITERAL', 'warning$', [('plain.bst', 1008, 71, 1008, 79)]), StyString('QUOTE', '', [('plain.bst', 1009, 14, 1009, 16)]))], [('plain.bst', 1008, 12, 1010, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 1011, 14, 1011, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 1011, 18, 1011, 25)]))], [('plain.bst', 1011, 12, 1011, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 1012, 10, 1012, 13)]))], [('plain.bst', 1007, 8, 1013, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'The ', [('plain.bst', 1014, 10, 1014, 16)]), StyString('NUMBER', 4, [('plain.bst', 1014, 17, 1014, 19)]), StyString('LITERAL', 'organization', [('plain.bst', 1014, 20, 1014, 32)]), StyString('LITERAL', 'chop.word', [('plain.bst', 1014, 33, 1014, 42)]), StyString('LITERAL', 'sortify', [('plain.bst', 1014, 43, 1014, 50)]))], [('plain.bst', 1014, 8, 1014, 52)]), StyString('LITERAL', 'if$', [('plain.bst', 1015, 6, 1015, 9)]))], [('plain.bst', 1006, 4, 1016, 5)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryField($context, $config, 'editor', StyString('LITERAL', 'editor', [('plain.bst', 1017, 6, 1017, 12)])); 
      $bst__sortZoformatZonames->($context, $config, StyString('LITERAL', 'sort.format.names', [('plain.bst', 1017, 13, 1017, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 1017, 6, 1017, 12)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 1017, 13, 1017, 30)]))], [('plain.bst', 1017, 4, 1017, 32)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1018, 2, 1018, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'editor.organization.sort', $bst__editorZoorganizzationZosort, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 1003, 1, 1004, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'editor.organization.sort', [('plain.bst', 1004, 10, 1004, 34)]))], [('plain.bst', 1004, 9, 1004, 35)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 1005, 2, 1005, 8)]), StyString('LITERAL', 'empty$', [('plain.bst', 1005, 9, 1005, 15)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [('plain.bst', 1006, 6, 1006, 18)]), StyString('LITERAL', 'empty$', [('plain.bst', 1006, 19, 1006, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 1007, 10, 1007, 13)]), StyString('LITERAL', 'empty$', [('plain.bst', 1007, 14, 1007, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need editor, organization, or key in ', [('plain.bst', 1008, 14, 1008, 62)]), StyString('LITERAL', 'cite$', [('plain.bst', 1008, 63, 1008, 68)]), StyString('LITERAL', '*', [('plain.bst', 1008, 69, 1008, 70)]), StyString('LITERAL', 'warning$', [('plain.bst', 1008, 71, 1008, 79)]), StyString('QUOTE', '', [('plain.bst', 1009, 14, 1009, 16)]))], [('plain.bst', 1008, 12, 1010, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [('plain.bst', 1011, 14, 1011, 17)]), StyString('LITERAL', 'sortify', [('plain.bst', 1011, 18, 1011, 25)]))], [('plain.bst', 1011, 12, 1011, 27)]), StyString('LITERAL', 'if$', [('plain.bst', 1012, 10, 1012, 13)]))], [('plain.bst', 1007, 8, 1013, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'The ', [('plain.bst', 1014, 10, 1014, 16)]), StyString('NUMBER', 4, [('plain.bst', 1014, 17, 1014, 19)]), StyString('LITERAL', 'organization', [('plain.bst', 1014, 20, 1014, 32)]), StyString('LITERAL', 'chop.word', [('plain.bst', 1014, 33, 1014, 42)]), StyString('LITERAL', 'sortify', [('plain.bst', 1014, 43, 1014, 50)]))], [('plain.bst', 1014, 8, 1014, 52)]), StyString('LITERAL', 'if$', [('plain.bst', 1015, 6, 1015, 9)]))], [('plain.bst', 1006, 4, 1016, 5)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [('plain.bst', 1017, 6, 1017, 12)]), StyString('LITERAL', 'sort.format.names', [('plain.bst', 1017, 13, 1017, 30)]))], [('plain.bst', 1017, 4, 1017, 32)]), StyString('LITERAL', 'if$', [('plain.bst', 1018, 2, 1018, 5)]))], [('plain.bst', 1004, 36, 1019, 2)]))], [('plain.bst', 1003, 1, 1019, 2)])); ; 
  my $bst__presort = sub { 
    my ($context, $config) = @_; 
    builtinType($context, $config, StyString('LITERAL', 'type$', [('plain.bst', 1022, 2, 1022, 7)])); 
    pushString($context, $config, 'book', StyString('QUOTE', 'book', [('plain.bst', 1022, 8, 1022, 14)])); 
    builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 1022, 15, 1022, 16)])); 
    builtinType($context, $config, StyString('LITERAL', 'type$', [('plain.bst', 1023, 2, 1023, 7)])); 
    pushString($context, $config, 'inbook', StyString('QUOTE', 'inbook', [('plain.bst', 1023, 8, 1023, 16)])); 
    builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 1023, 17, 1023, 18)])); 
    $bst__or->($context, $config, StyString('LITERAL', 'or', [('plain.bst', 1024, 2, 1024, 4)])); 
    pushFunction($context, $config, $bst__authorZoeditorZosort, StyString('REFERENCE', 'author.editor.sort', [('plain.bst', 1025, 4, 1025, 23)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinType($context, $config, StyString('LITERAL', 'type$', [('plain.bst', 1026, 6, 1026, 11)])); 
      pushString($context, $config, 'proceedings', StyString('QUOTE', 'proceedings', [('plain.bst', 1026, 12, 1026, 25)])); 
      builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 1026, 26, 1026, 27)])); 
      pushFunction($context, $config, $bst__editorZoorganizzationZosort, StyString('REFERENCE', 'editor.organization.sort', [('plain.bst', 1027, 8, 1027, 33)])); 
      pushFunction($context, $config, sub { 
        my ($context, $config) = @_; 
        builtinType($context, $config, StyString('LITERAL', 'type$', [('plain.bst', 1028, 10, 1028, 15)])); 
        pushString($context, $config, 'manual', StyString('QUOTE', 'manual', [('plain.bst', 1028, 16, 1028, 24)])); 
        builtinZe($context, $config, StyString('LITERAL', '=', [('plain.bst', 1028, 25, 1028, 26)])); 
        pushFunction($context, $config, $bst__authorZoorganizzationZosort, StyString('REFERENCE', 'author.organization.sort', [('plain.bst', 1029, 12, 1029, 37)])); 
        pushFunction($context, $config, $bst__authorZosort, StyString('REFERENCE', 'author.sort', [('plain.bst', 1030, 12, 1030, 24)])); 
        builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1031, 10, 1031, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'type$', [('plain.bst', 1028, 10, 1028, 15)]), StyString('QUOTE', 'manual', [('plain.bst', 1028, 16, 1028, 24)]), StyString('LITERAL', '=', [('plain.bst', 1028, 25, 1028, 26)]), StyString('REFERENCE', 'author.organization.sort', [('plain.bst', 1029, 12, 1029, 37)]), StyString('REFERENCE', 'author.sort', [('plain.bst', 1030, 12, 1030, 24)]), StyString('LITERAL', 'if$', [('plain.bst', 1031, 10, 1031, 13)]))], [('plain.bst', 1028, 8, 1032, 9)])); 
      builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1033, 6, 1033, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'type$', [('plain.bst', 1026, 6, 1026, 11)]), StyString('QUOTE', 'proceedings', [('plain.bst', 1026, 12, 1026, 25)]), StyString('LITERAL', '=', [('plain.bst', 1026, 26, 1026, 27)]), StyString('REFERENCE', 'editor.organization.sort', [('plain.bst', 1027, 8, 1027, 33)]), StyString('BLOCK', [(StyString('LITERAL', 'type$', [('plain.bst', 1028, 10, 1028, 15)]), StyString('QUOTE', 'manual', [('plain.bst', 1028, 16, 1028, 24)]), StyString('LITERAL', '=', [('plain.bst', 1028, 25, 1028, 26)]), StyString('REFERENCE', 'author.organization.sort', [('plain.bst', 1029, 12, 1029, 37)]), StyString('REFERENCE', 'author.sort', [('plain.bst', 1030, 12, 1030, 24)]), StyString('LITERAL', 'if$', [('plain.bst', 1031, 10, 1031, 13)]))], [('plain.bst', 1028, 8, 1032, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 1033, 6, 1033, 9)]))], [('plain.bst', 1026, 4, 1034, 5)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1035, 2, 1035, 5)])); 
    pushString($context, $config, '    ', StyString('QUOTE', '    ', [('plain.bst', 1036, 2, 1036, 8)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 1037, 2, 1037, 3)])); 
    lookupEntryField($context, $config, 'year', StyString('LITERAL', 'year', [('plain.bst', 1038, 2, 1038, 6)])); 
    $bst__fieldZoorZonull->($context, $config, StyString('LITERAL', 'field.or.null', [('plain.bst', 1038, 7, 1038, 20)])); 
    $bst__sortify->($context, $config, StyString('LITERAL', 'sortify', [('plain.bst', 1038, 21, 1038, 28)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 1039, 2, 1039, 3)])); 
    pushString($context, $config, '    ', StyString('QUOTE', '    ', [('plain.bst', 1040, 2, 1040, 8)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 1041, 2, 1041, 3)])); 
    lookupEntryField($context, $config, 'title', StyString('LITERAL', 'title', [('plain.bst', 1042, 2, 1042, 7)])); 
    $bst__fieldZoorZonull->($context, $config, StyString('LITERAL', 'field.or.null', [('plain.bst', 1042, 8, 1042, 21)])); 
    $bst__sortZoformatZotitle->($context, $config, StyString('LITERAL', 'sort.format.title', [('plain.bst', 1043, 2, 1043, 19)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 1044, 2, 1044, 3)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 1045, 2, 1045, 4)])); 
    lookupGlobalInteger($context, $config, 'entry.max$', StyString('LITERAL', 'entry.max$', [('plain.bst', 1045, 5, 1045, 15)])); 
    builtinSubstring($context, $config, StyString('LITERAL', 'substring$', [('plain.bst', 1045, 16, 1045, 26)])); 
    pushEntryString($context, $config, 'sort.key$', StyString('REFERENCE', 'sort.key$', [('plain.bst', 1046, 2, 1046, 12)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 1046, 13, 1046, 15)])); 
  }; 
  registerFunctionDefinition($context, $config, 'presort', $bst__presort, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 1020, 1, 1021, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'presort', [('plain.bst', 1021, 10, 1021, 17)]))], [('plain.bst', 1021, 9, 1021, 18)]), StyString('BLOCK', [(StyString('LITERAL', 'type$', [('plain.bst', 1022, 2, 1022, 7)]), StyString('QUOTE', 'book', [('plain.bst', 1022, 8, 1022, 14)]), StyString('LITERAL', '=', [('plain.bst', 1022, 15, 1022, 16)]), StyString('LITERAL', 'type$', [('plain.bst', 1023, 2, 1023, 7)]), StyString('QUOTE', 'inbook', [('plain.bst', 1023, 8, 1023, 16)]), StyString('LITERAL', '=', [('plain.bst', 1023, 17, 1023, 18)]), StyString('LITERAL', 'or', [('plain.bst', 1024, 2, 1024, 4)]), StyString('REFERENCE', 'author.editor.sort', [('plain.bst', 1025, 4, 1025, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'type$', [('plain.bst', 1026, 6, 1026, 11)]), StyString('QUOTE', 'proceedings', [('plain.bst', 1026, 12, 1026, 25)]), StyString('LITERAL', '=', [('plain.bst', 1026, 26, 1026, 27)]), StyString('REFERENCE', 'editor.organization.sort', [('plain.bst', 1027, 8, 1027, 33)]), StyString('BLOCK', [(StyString('LITERAL', 'type$', [('plain.bst', 1028, 10, 1028, 15)]), StyString('QUOTE', 'manual', [('plain.bst', 1028, 16, 1028, 24)]), StyString('LITERAL', '=', [('plain.bst', 1028, 25, 1028, 26)]), StyString('REFERENCE', 'author.organization.sort', [('plain.bst', 1029, 12, 1029, 37)]), StyString('REFERENCE', 'author.sort', [('plain.bst', 1030, 12, 1030, 24)]), StyString('LITERAL', 'if$', [('plain.bst', 1031, 10, 1031, 13)]))], [('plain.bst', 1028, 8, 1032, 9)]), StyString('LITERAL', 'if$', [('plain.bst', 1033, 6, 1033, 9)]))], [('plain.bst', 1026, 4, 1034, 5)]), StyString('LITERAL', 'if$', [('plain.bst', 1035, 2, 1035, 5)]), StyString('QUOTE', '    ', [('plain.bst', 1036, 2, 1036, 8)]), StyString('LITERAL', '*', [('plain.bst', 1037, 2, 1037, 3)]), StyString('LITERAL', 'year', [('plain.bst', 1038, 2, 1038, 6)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 1038, 7, 1038, 20)]), StyString('LITERAL', 'sortify', [('plain.bst', 1038, 21, 1038, 28)]), StyString('LITERAL', '*', [('plain.bst', 1039, 2, 1039, 3)]), StyString('QUOTE', '    ', [('plain.bst', 1040, 2, 1040, 8)]), StyString('LITERAL', '*', [('plain.bst', 1041, 2, 1041, 3)]), StyString('LITERAL', 'title', [('plain.bst', 1042, 2, 1042, 7)]), StyString('LITERAL', 'field.or.null', [('plain.bst', 1042, 8, 1042, 21)]), StyString('LITERAL', 'sort.format.title', [('plain.bst', 1043, 2, 1043, 19)]), StyString('LITERAL', '*', [('plain.bst', 1044, 2, 1044, 3)]), StyString('NUMBER', 1, [('plain.bst', 1045, 2, 1045, 4)]), StyString('LITERAL', 'entry.max$', [('plain.bst', 1045, 5, 1045, 15)]), StyString('LITERAL', 'substring$', [('plain.bst', 1045, 16, 1045, 26)]), StyString('REFERENCE', 'sort.key$', [('plain.bst', 1046, 2, 1046, 12)]), StyString('LITERAL', ':=', [('plain.bst', 1046, 13, 1046, 15)]))], [('plain.bst', 1021, 19, 1047, 2)]))], [('plain.bst', 1020, 1, 1047, 2)])); ; 
  iterateFunction($context, $config, $bst__presort, StyString('LITERAL', 'presort', [('plain.bst', 1049, 9, 1049, 16)])); 
  sortEntries($context, $config, StyCommand(StyString('LITERAL', 'SORT', [('plain.bst', 1050, 1, 1051, 4)]), [()], [('plain.bst', 1050, 1, 1051, 4)])); 
  defineGlobalString($context, $config, 'longest.label', StyString('LITERAL', 'longest.label', [('plain.bst', 1053, 10, 1053, 23)])); 
  defineGlobalInteger($context, $config, 'number.label', StyString('LITERAL', 'number.label', [('plain.bst', 1055, 11, 1055, 23)])); 
  defineGlobalInteger($context, $config, 'longest.label.width', StyString('LITERAL', 'longest.label.width', [('plain.bst', 1055, 24, 1055, 43)])); 
  my $bst__initializzeZolongestZolabel = sub { 
    my ($context, $config) = @_; 
    pushString($context, $config, '', StyString('QUOTE', '', [('plain.bst', 1058, 2, 1058, 4)])); 
    pushGlobalString($context, $config, 'longest.label', StyString('REFERENCE', 'longest.label', [('plain.bst', 1058, 5, 1058, 19)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 1058, 20, 1058, 22)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 1059, 2, 1059, 4)])); 
    pushGlobalInteger($context, $config, 'number.label', StyString('REFERENCE', 'number.label', [('plain.bst', 1059, 5, 1059, 18)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 1059, 19, 1059, 21)])); 
    pushInteger($context, $config, 0, StyString('NUMBER', 0, [('plain.bst', 1060, 2, 1060, 4)])); 
    pushGlobalInteger($context, $config, 'longest.label.width', StyString('REFERENCE', 'longest.label.width', [('plain.bst', 1060, 5, 1060, 25)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 1060, 26, 1060, 28)])); 
  }; 
  registerFunctionDefinition($context, $config, 'initialize.longest.label', $bst__initializzeZolongestZolabel, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 1056, 1, 1057, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'initialize.longest.label', [('plain.bst', 1057, 10, 1057, 34)]))], [('plain.bst', 1057, 9, 1057, 35)]), StyString('BLOCK', [(StyString('QUOTE', '', [('plain.bst', 1058, 2, 1058, 4)]), StyString('REFERENCE', 'longest.label', [('plain.bst', 1058, 5, 1058, 19)]), StyString('LITERAL', ':=', [('plain.bst', 1058, 20, 1058, 22)]), StyString('NUMBER', 1, [('plain.bst', 1059, 2, 1059, 4)]), StyString('REFERENCE', 'number.label', [('plain.bst', 1059, 5, 1059, 18)]), StyString('LITERAL', ':=', [('plain.bst', 1059, 19, 1059, 21)]), StyString('NUMBER', 0, [('plain.bst', 1060, 2, 1060, 4)]), StyString('REFERENCE', 'longest.label.width', [('plain.bst', 1060, 5, 1060, 25)]), StyString('LITERAL', ':=', [('plain.bst', 1060, 26, 1060, 28)]))], [('plain.bst', 1057, 36, 1061, 2)]))], [('plain.bst', 1056, 1, 1061, 2)])); ; 
  my $bst__longestZolabelZopass = sub { 
    my ($context, $config) = @_; 
    lookupGlobalInteger($context, $config, 'number.label', StyString('LITERAL', 'number.label', [('plain.bst', 1064, 2, 1064, 14)])); 
    builtinIntToStr($context, $config, StyString('LITERAL', 'int.to.str$', [('plain.bst', 1064, 15, 1064, 26)])); 
    pushEntryString($context, $config, 'label', StyString('REFERENCE', 'label', [('plain.bst', 1064, 27, 1064, 33)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 1064, 34, 1064, 36)])); 
    lookupGlobalInteger($context, $config, 'number.label', StyString('LITERAL', 'number.label', [('plain.bst', 1065, 2, 1065, 14)])); 
    pushInteger($context, $config, 1, StyString('NUMBER', 1, [('plain.bst', 1065, 15, 1065, 17)])); 
    builtinZp($context, $config, StyString('LITERAL', '+', [('plain.bst', 1065, 18, 1065, 19)])); 
    pushGlobalInteger($context, $config, 'number.label', StyString('REFERENCE', 'number.label', [('plain.bst', 1065, 20, 1065, 33)])); 
    builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 1065, 34, 1065, 36)])); 
    lookupEntryString($context, $config, 'label', StyString('LITERAL', 'label', [('plain.bst', 1066, 2, 1066, 7)])); 
    builtinWidth($context, $config, StyString('LITERAL', 'width$', [('plain.bst', 1066, 8, 1066, 14)])); 
    lookupGlobalInteger($context, $config, 'longest.label.width', StyString('LITERAL', 'longest.label.width', [('plain.bst', 1066, 15, 1066, 34)])); 
    builtinZg($context, $config, StyString('LITERAL', '>', [('plain.bst', 1066, 35, 1066, 36)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      lookupEntryString($context, $config, 'label', StyString('LITERAL', 'label', [('plain.bst', 1067, 6, 1067, 11)])); 
      pushGlobalString($context, $config, 'longest.label', StyString('REFERENCE', 'longest.label', [('plain.bst', 1067, 12, 1067, 26)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 1067, 27, 1067, 29)])); 
      lookupEntryString($context, $config, 'label', StyString('LITERAL', 'label', [('plain.bst', 1068, 6, 1068, 11)])); 
      builtinWidth($context, $config, StyString('LITERAL', 'width$', [('plain.bst', 1068, 12, 1068, 18)])); 
      pushGlobalInteger($context, $config, 'longest.label.width', StyString('REFERENCE', 'longest.label.width', [('plain.bst', 1068, 19, 1068, 39)])); 
      builtinZcZe($context, $config, StyString('LITERAL', ':=', [('plain.bst', 1068, 40, 1068, 42)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'label', [('plain.bst', 1067, 6, 1067, 11)]), StyString('REFERENCE', 'longest.label', [('plain.bst', 1067, 12, 1067, 26)]), StyString('LITERAL', ':=', [('plain.bst', 1067, 27, 1067, 29)]), StyString('LITERAL', 'label', [('plain.bst', 1068, 6, 1068, 11)]), StyString('LITERAL', 'width$', [('plain.bst', 1068, 12, 1068, 18)]), StyString('REFERENCE', 'longest.label.width', [('plain.bst', 1068, 19, 1068, 39)]), StyString('LITERAL', ':=', [('plain.bst', 1068, 40, 1068, 42)]))], [('plain.bst', 1067, 4, 1069, 5)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 1070, 4, 1070, 10)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1071, 2, 1071, 5)])); 
  }; 
  registerFunctionDefinition($context, $config, 'longest.label.pass', $bst__longestZolabelZopass, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 1062, 1, 1063, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'longest.label.pass', [('plain.bst', 1063, 10, 1063, 28)]))], [('plain.bst', 1063, 9, 1063, 29)]), StyString('BLOCK', [(StyString('LITERAL', 'number.label', [('plain.bst', 1064, 2, 1064, 14)]), StyString('LITERAL', 'int.to.str$', [('plain.bst', 1064, 15, 1064, 26)]), StyString('REFERENCE', 'label', [('plain.bst', 1064, 27, 1064, 33)]), StyString('LITERAL', ':=', [('plain.bst', 1064, 34, 1064, 36)]), StyString('LITERAL', 'number.label', [('plain.bst', 1065, 2, 1065, 14)]), StyString('NUMBER', 1, [('plain.bst', 1065, 15, 1065, 17)]), StyString('LITERAL', '+', [('plain.bst', 1065, 18, 1065, 19)]), StyString('REFERENCE', 'number.label', [('plain.bst', 1065, 20, 1065, 33)]), StyString('LITERAL', ':=', [('plain.bst', 1065, 34, 1065, 36)]), StyString('LITERAL', 'label', [('plain.bst', 1066, 2, 1066, 7)]), StyString('LITERAL', 'width$', [('plain.bst', 1066, 8, 1066, 14)]), StyString('LITERAL', 'longest.label.width', [('plain.bst', 1066, 15, 1066, 34)]), StyString('LITERAL', '>', [('plain.bst', 1066, 35, 1066, 36)]), StyString('BLOCK', [(StyString('LITERAL', 'label', [('plain.bst', 1067, 6, 1067, 11)]), StyString('REFERENCE', 'longest.label', [('plain.bst', 1067, 12, 1067, 26)]), StyString('LITERAL', ':=', [('plain.bst', 1067, 27, 1067, 29)]), StyString('LITERAL', 'label', [('plain.bst', 1068, 6, 1068, 11)]), StyString('LITERAL', 'width$', [('plain.bst', 1068, 12, 1068, 18)]), StyString('REFERENCE', 'longest.label.width', [('plain.bst', 1068, 19, 1068, 39)]), StyString('LITERAL', ':=', [('plain.bst', 1068, 40, 1068, 42)]))], [('plain.bst', 1067, 4, 1069, 5)]), StyString('REFERENCE', 'skip$', [('plain.bst', 1070, 4, 1070, 10)]), StyString('LITERAL', 'if$', [('plain.bst', 1071, 2, 1071, 5)]))], [('plain.bst', 1063, 30, 1072, 2)]))], [('plain.bst', 1062, 1, 1072, 2)])); ; 
  $bst__initializzeZolongestZolabel->($context, $config, StyString('LITERAL', 'initialize.longest.label', [('plain.bst', 1074, 9, 1074, 33)])); 
  iterateFunction($context, $config, $bst__longestZolabelZopass, StyString('LITERAL', 'longest.label.pass', [('plain.bst', 1076, 9, 1076, 27)])); 
  my $bst__beginZobib = sub { 
    my ($context, $config) = @_; 
    builtinPreamble($context, $config, StyString('LITERAL', 'preamble$', [('plain.bst', 1079, 2, 1079, 11)])); 
    builtinEmpty($context, $config, StyString('LITERAL', 'empty$', [('plain.bst', 1079, 12, 1079, 18)])); 
    pushFunction($context, $config, \&builtinSkip, StyString('REFERENCE', 'skip$', [('plain.bst', 1080, 4, 1080, 10)])); 
    pushFunction($context, $config, sub { 
      my ($context, $config) = @_; 
      builtinPreamble($context, $config, StyString('LITERAL', 'preamble$', [('plain.bst', 1081, 6, 1081, 15)])); 
      builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 1081, 16, 1081, 22)])); 
      builtinNewline($context, $config, StyString('LITERAL', 'newline$', [('plain.bst', 1081, 23, 1081, 31)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'preamble$', [('plain.bst', 1081, 6, 1081, 15)]), StyString('LITERAL', 'write$', [('plain.bst', 1081, 16, 1081, 22)]), StyString('LITERAL', 'newline$', [('plain.bst', 1081, 23, 1081, 31)]))], [('plain.bst', 1081, 4, 1081, 33)])); 
    builtinIf($context, $config, StyString('LITERAL', 'if$', [('plain.bst', 1082, 2, 1082, 5)])); 
    pushString($context, $config, '\\begin{thebibliography}{', StyString('QUOTE', '\\begin{thebibliography}{', [('plain.bst', 1083, 2, 1083, 28)])); 
    lookupGlobalString($context, $config, 'longest.label', StyString('LITERAL', 'longest.label', [('plain.bst', 1083, 30, 1083, 43)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 1083, 45, 1083, 46)])); 
    pushString($context, $config, '}', StyString('QUOTE', '}', [('plain.bst', 1083, 47, 1083, 50)])); 
    builtinZa($context, $config, StyString('LITERAL', '*', [('plain.bst', 1083, 51, 1083, 52)])); 
    builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 1083, 53, 1083, 59)])); 
    builtinNewline($context, $config, StyString('LITERAL', 'newline$', [('plain.bst', 1083, 60, 1083, 68)])); 
  }; 
  registerFunctionDefinition($context, $config, 'begin.bib', $bst__beginZobib, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 1077, 1, 1078, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'begin.bib', [('plain.bst', 1078, 10, 1078, 19)]))], [('plain.bst', 1078, 9, 1078, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'preamble$', [('plain.bst', 1079, 2, 1079, 11)]), StyString('LITERAL', 'empty$', [('plain.bst', 1079, 12, 1079, 18)]), StyString('REFERENCE', 'skip$', [('plain.bst', 1080, 4, 1080, 10)]), StyString('BLOCK', [(StyString('LITERAL', 'preamble$', [('plain.bst', 1081, 6, 1081, 15)]), StyString('LITERAL', 'write$', [('plain.bst', 1081, 16, 1081, 22)]), StyString('LITERAL', 'newline$', [('plain.bst', 1081, 23, 1081, 31)]))], [('plain.bst', 1081, 4, 1081, 33)]), StyString('LITERAL', 'if$', [('plain.bst', 1082, 2, 1082, 5)]), StyString('QUOTE', '\\begin{thebibliography}{', [('plain.bst', 1083, 2, 1083, 28)]), StyString('LITERAL', 'longest.label', [('plain.bst', 1083, 30, 1083, 43)]), StyString('LITERAL', '*', [('plain.bst', 1083, 45, 1083, 46)]), StyString('QUOTE', '}', [('plain.bst', 1083, 47, 1083, 50)]), StyString('LITERAL', '*', [('plain.bst', 1083, 51, 1083, 52)]), StyString('LITERAL', 'write$', [('plain.bst', 1083, 53, 1083, 59)]), StyString('LITERAL', 'newline$', [('plain.bst', 1083, 60, 1083, 68)]))], [('plain.bst', 1078, 21, 1084, 2)]))], [('plain.bst', 1077, 1, 1084, 2)])); ; 
  $bst__beginZobib->($context, $config, StyString('LITERAL', 'begin.bib', [('plain.bst', 1086, 9, 1086, 18)])); 
  $bst__initZostateZoconsts->($context, $config, StyString('LITERAL', 'init.state.consts', [('plain.bst', 1088, 9, 1088, 26)])); 
  iterateFunction($context, $config, \&builtinCallType, StyString('LITERAL', 'call.type$', [('plain.bst', 1090, 9, 1090, 19)])); 
  my $bst__endZobib = sub { 
    my ($context, $config) = @_; 
    builtinNewline($context, $config, StyString('LITERAL', 'newline$', [('plain.bst', 1093, 2, 1093, 10)])); 
    pushString($context, $config, '\\end{thebibliography}', StyString('QUOTE', '\\end{thebibliography}', [('plain.bst', 1094, 2, 1094, 25)])); 
    builtinWrite($context, $config, StyString('LITERAL', 'write$', [('plain.bst', 1094, 26, 1094, 32)])); 
    builtinNewline($context, $config, StyString('LITERAL', 'newline$', [('plain.bst', 1094, 33, 1094, 41)])); 
  }; 
  registerFunctionDefinition($context, $config, 'end.bib', $bst__endZobib, StyCommand(StyString('LITERAL', 'FUNCTION', [('plain.bst', 1091, 1, 1092, 8)]), [(StyString('BLOCK', [(StyString('LITERAL', 'end.bib', [('plain.bst', 1092, 10, 1092, 17)]))], [('plain.bst', 1092, 9, 1092, 18)]), StyString('BLOCK', [(StyString('LITERAL', 'newline$', [('plain.bst', 1093, 2, 1093, 10)]), StyString('QUOTE', '\\end{thebibliography}', [('plain.bst', 1094, 2, 1094, 25)]), StyString('LITERAL', 'write$', [('plain.bst', 1094, 26, 1094, 32)]), StyString('LITERAL', 'newline$', [('plain.bst', 1094, 33, 1094, 41)]))], [('plain.bst', 1092, 19, 1095, 2)]))], [('plain.bst', 1091, 1, 1095, 2)])); ; 
  $bst__endZobib->($context, $config, StyString('LITERAL', 'end.bib', [('plain.bst', 1097, 9, 1097, 16)])); 


  return $context; 
  # end of automatically generated code 
}
__END_COMPILED__

# ================================================================================
1;
