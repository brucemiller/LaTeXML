# -*- mode: Perl -*-
# /=====================================================================\ #
# |  a11ymark.sty -- demo semantic bindings for accessibility           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

DefConstructorI(T_CS('\@request@math@a11y'), undef, "<?latexml a11y='enabled'?>");
AtBeginDocument(T_CS('\@request@math@a11y'));

# Embellishment is hard to write, hard to speak, but describes exactly several cases
# I will abbreviate it "emb", for now, and use it as a prefix
DefMacro('\emb@atom{}{}', '\DUAL{\@CSYMBOL{#1}}{\@WRAP{#2}}');
DefMacro('\emb@base{}{}{}', sub {
    my ($gullet, $meaning, $base, $emb) = @_;
    # Package::dualize_arglist seems to be doing this with more sophistication,
    # a good bit to read if we ever need to build more infra here.
    # for now, fast and loose, these don't get saved and are only for local association
    my $id_token  = T_OTHER("id" . int(rand(10000)));
    my $ref_token = Invocation(T_CS('\@XMRef'), $id_token);
    my $arg_token = Invocation(T_CS('\@XMArg'), $id_token, $base);
    return Invocation(T_CS('\emb@base@build'),
      $meaning, $ref_token, Tokens($arg_token, $emb))->unlist });

DefConstructor('\emb@base@build{}{}{}',
  '<ltx:XMDual>'
    . '<ltx:XMApp>'
    . '<ltx:XMTok meaning="#1"/>'
    . '#2'
    . '</ltx:XMApp>'
    . '<ltx:XMWrap>#3</ltx:XMWrap>'
    . '</ltx:XMDual>',
  bounded => 1, requireMath => 1);

## I. Calculus
DefConstructor('\diffd', '<ltx:XMTok meaning="differential" name="diffd" role="DIFFOP">d</ltx:XMTok>');
DefMath('\deriv[]{}{}',
  '\frac{\@MAYBEAPPLY{\@SUPERSCRIPT{\diffd}{#1}}{#2}}'
    . '{\@SUPERSCRIPT{\@APPLY{\diffd #3}}{#1}}',
  meaning => 'derivative', reorder => [2, 3, 1],
  # afterDigest => sub {
  #   # NOTE: arg 2 will be wrapped in XMRef!
  #   $_[1]->setProperty(role => 'DIFFOP') if checkDiffOp($_[1]);
  #   return; },
  hide_content_reversion => 1);

DefMath('\integral{}{}', '\int #1 \diffd #2', meaning => 'integral');

## II. Scripts
DefMath('\power{}{}', "{#1^{#2}}", meaning => 'power',
  reversion              => '#1^{#2}',
  hide_content_reversion => 1);
DefMacro('\frobulator',  '\emb@atom{frobulator}{x\'}');
DefMacro('\transpose{}', '\emb@base{transpose}{#1}{^T}');
DefMacro('\adjoint{}',   '\emb@base{adjoint}{#1}{^\dagger}');

# What I Really Want to Say here, but can't is likely:
# DefMath('\derivemark{}', '\derivemark@pres{#1}', meaning=>'#1');
DefMacro('\derivemark{}', sub {
    my ($gullet, $token) = @_;
    # Dualizing the arglist only works if we are going to keep the same token at the end
    # in the case of 2 --> '' , this fails. So, obtain the presentation right away to figure this out

    # we need to digest due to \@XMArg being a constructor
    my $mark = ToString(Digest($token));
    my ($content, $presentation);
    if ($mark =~ /^\d$/) {    # single digit, add primes
      $content      = $token;
      $presentation = Tokens(map { T_CS('\prime') } 1 .. int($mark)) }
    else {
      # assume an id, wrap in parens
      my ($cargs, $pargs) = dualize_arglist('#1', $token);
      $content      = $$cargs[0];
      $presentation = Tokens(T_OTHER('('), $$pargs[0], T_OTHER(')')); }

    return Invocation(T_CS('\DUAL'),
      undef,                  # debugging that I missed this 'undef' argument was not fun.
      $content,
      Invocation(T_CS('\@WRAP'), $presentation))->unlist;
});

# curiously we need an indirection level, so that we point to the dual instead of
# the content node of the dual. The a11y attribute generation does not support the following markup
# at the moment:
#
# <XMDual>
#   <XMApp>
#     <XMTok meaning="derivative-implicit-variable" name="fnderive" role="UNKNOWN"/>
#     <XMRef idref="p1.m1.1"/>
#     <XMRef idref="p1.m1.2"/>
#   </XMApp>
#   <XMApp>
#     <XMTok role="SUPERSCRIPTOP" scriptpos="post1"/>
#     <XMTok font="italic" role="UNKNOWN" xml:id="p1.m1.1">f</XMTok>
#     <XMDual>
#       <XMTok font="italic" fontsize="70%" role="UNKNOWN" xml:id="p1.m1.2">n</XMTok>
#       <XMWrap> ...
#
# We can only deal with 'p1.m1.2' pointing to the inner XMDual, rather than directly to its content "n"
DefMacro('\fnderive{}{}', '\fnderive@build{#1}{\derivemark{#2}}');
DefMath('\fnderive@build{}{}', '#1^#2',
  meaning                => 'derivative-implicit-variable',
  hide_content_reversion => 1);

################################################################################################################

1;
