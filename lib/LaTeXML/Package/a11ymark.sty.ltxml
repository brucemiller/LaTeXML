# -*- mode: Perl -*-
# /=====================================================================\ #
# |  a11ymark.sty -- demo semantic bindings for accessibility           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

DefConstructor('\diffd', '<ltx:XMTok meaning="differential" name="diffd" role="DIFFOP">d</ltx:XMTok>');
DefMath('\deriv[]{}{}',
  '\frac{\@MAYBEAPPLY{\@SUPERSCRIPT{\diffd}{#1}}{#2}}'
    . '{\@SUPERSCRIPT{\@APPLY{\diffd #3}}{#1}}',
  meaning => 'derivative', reorder => [2, 3, 1],
  # afterDigest => sub {
  #   # NOTE: arg 2 will be wrapped in XMRef!
  #   $_[1]->setProperty(role => 'DIFFOP') if checkDiffOp($_[1]);
  #   return; },
  hide_content_reversion => 1);

DefMath('\integral{}{}', '\int #1 \diffd #2', meaning => 'integral');

DefConstructor('\meaning{}{}', '#2', afterConstruct => sub {
    my ($doc, $whatsit) = @_;
    my $apply = $doc->getNode->lastChild;
    if ($apply->localName eq 'XMApp') {    # should be an apply, if by design
      $apply->setAttribute('meaning', ToString($whatsit->getArg(1))); } },
  bounded => 1, requireMath => 1);

DefMacro('\power{}{}', '\meaning{power}{#1^{#2}}');

# These still need work, since currently we get
# annotations "transpose(#1,#2)" and "frobulator(#1,#2)"
# instead of the desired "transpose(#1)" and "frobulator"
# I guess this needs a different type of XMath structural pattern...
DefMacro('\transpose{}', '\meaning{transpose}{#1^T}');
DefMacro('\frobulator',  '\meaning{frobulator}{x\'}');

########
1;
