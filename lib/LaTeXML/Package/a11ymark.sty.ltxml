# -*- mode: Perl -*-
# /=====================================================================\ #
# |  a11ymark.sty -- demo semantic bindings for accessibility           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

## 0. Semantic infrastructure
DefConstructor('\meaning{}{}', '#2', afterConstruct => sub {
    my ($doc, $whatsit) = @_;
    my $node  = $doc->getNode;
    my $apply = $node->lastChild;
    if ($apply && $apply->localName eq 'XMApp') {    # should be an apply, if by design
      $apply->setAttribute('meaning', ToString($whatsit->getArg(1))); }
    else {    # otherwise, add the meaning on the current node, possibly an empty XMArg
      $node->setAttribute('meaning', ToString($whatsit->getArg(1))); }
    return; }, bounded => 1, requireMath => 1);

# Embellishment is hard to write, hard to speak, but describes exactly several cases
# I will abbreviate it "emb", for now, and use it as a prefix
DefConstructor('\emb@atom{}{}',
  '<ltx:XMDual>'
    . '<ltx:XMTok meaning="#1" />'
    . '<ltx:XMWrap>#2</ltx:XMWrap>'
    . '</ltx:XMDual>',
  bounded => 1, requireMath => 1);

DefMacro('\emb@base{}{}{}', sub {
    my ($gullet, $meaning, $base, $emb) = @_;
    # Package::dualize_arglist seems to be doing this with more sophistication,
    # a good bit to read if we ever need to build more infra here.
    # for now, fast and loose, these don't get saved and are only for local association
    my $id_token  = T_OTHER("id" . int(rand(10000)));
    my $ref_token = Invocation(T_CS('\@XMRef'), $id_token);
    my $arg_token = Invocation(T_CS('\@XMArg'), $id_token, $base);
    return Invocation(T_CS('\emb@base@build'),
      $meaning, $ref_token, Tokens($arg_token, $emb))->unlist });

DefMacro('\numprimemarks{}', sub {
    my ($gullet, $numtok) = @_;
    my $num = int(ToString($numtok));
    return map { T_CS('\prime') } 1 .. $num; });

DefConstructor('\emb@base@build{}{}{}',
  '<ltx:XMDual>'
    . '<ltx:XMApp>'
    . '<ltx:XMTok meaning="#1"/>'
    . '#2'
    . '</ltx:XMApp>'
    . '<ltx:XMWrap>#3</ltx:XMWrap>'
    . '</ltx:XMDual>',
  bounded => 1, requireMath => 1);

## I. Calculus
DefConstructor('\diffd', '<ltx:XMTok meaning="differential" name="diffd" role="DIFFOP">d</ltx:XMTok>');
DefMath('\deriv[]{}{}',
  '\frac{\@MAYBEAPPLY{\@SUPERSCRIPT{\diffd}{#1}}{#2}}'
    . '{\@SUPERSCRIPT{\@APPLY{\diffd #3}}{#1}}',
  meaning => 'derivative', reorder => [2, 3, 1],
  # afterDigest => sub {
  #   # NOTE: arg 2 will be wrapped in XMRef!
  #   $_[1]->setProperty(role => 'DIFFOP') if checkDiffOp($_[1]);
  #   return; },
  hide_content_reversion => 1);

DefMath('\integral{}{}', '\int #1 \diffd #2', meaning => 'integral');

## II. Scripts
DefMacro('\power{}{}',   '\meaning{power}{#1^{#2}}');
DefMacro('\frobulator',  '\emb@atom{frobulator}{x\'}');
DefMacro('\transpose{}', '\emb@base{transpose}{#1}{^T}');
DefMacro('\adjoint{}',   '\emb@base{adjoint}{#1}{^\dagger}');

# This looks misleadingly "straightforward". The floating script is hard to convince to bind to #1,
# so literally writing f'' and trying to annotate failed in pretty much all different configurations I tried.
# what seems to succeed gracefully is my \meaning-based semantic injections in the constructed tree,
# *given that* I use the f^{\prime\prime} form.
#
DefMacro('\derivenum{}{}', '\meaning{derivative-implicit-variable}{#1^{\meaning{#2}{\numprimemarks{#2}}}}');

################################################################################################################

1;
